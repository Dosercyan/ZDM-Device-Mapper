From 49021de812973420559bcb59e7bc5828f0d1f606 Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun.tancheff@seagate.com>
Date: Wed, 24 Aug 2016 18:31:53 -0500
Subject: [PATCH 2/7] Add blkzonecmd and blkreport ZAC/ZBC drives

This patch adds blkzonecmd to issue zone commands:
  Reset (Write Pointer)
  Open Zone
  Close Zone
  Finish Zone

and blkreport to retrieve drive zone information.

Signed-off-by: Shaun Tancheff <shaun.tancheff@seagate.com>
---
 configure.ac            |  14 ++
 include/strutils.h      |   1 +
 lib/strutils.c          |   8 +-
 sys-utils/Makemodule.am |  14 ++
 sys-utils/blkreport.8   |  95 ++++++++
 sys-utils/blkreport.c   | 584 ++++++++++++++++++++++++++++++++++++++++++++++++
 sys-utils/blkzonecmd.8  |  87 ++++++++
 sys-utils/blkzonecmd.c  | 258 +++++++++++++++++++++
 8 files changed, 1059 insertions(+), 2 deletions(-)
 create mode 100644 sys-utils/blkreport.8
 create mode 100644 sys-utils/blkreport.c
 create mode 100644 sys-utils/blkzonecmd.8
 create mode 100644 sys-utils/blkzonecmd.c

diff --git a/configure.ac b/configure.ac
index d1d9a0f..f1d40eb 100644
--- a/configure.ac
+++ b/configure.ac
@@ -248,6 +248,12 @@ AC_CHECK_HEADERS([security/pam_misc.h],
 #endif
 ])
 
+AC_CHECK_HEADERS([linux/blkzoned_api.h], [], [], [
+#ifdef HAVE_BLKZONED_API_H
+#include <linux/blkzoned_api.h>
+#endif
+])
+
 AC_CHECK_HEADERS([security/openpam.h], [], [], [
 #ifdef HAVE_SECURITY_PAM_APPL_H
 #include <security/pam_appl.h>
@@ -1426,6 +1432,14 @@ UL_BUILD_INIT([blkdiscard], [check])
 UL_REQUIRES_LINUX([blkdiscard])
 AM_CONDITIONAL([BUILD_BLKDISCARD], [test "x$build_blkdiscard" = xyes])
 
+UL_BUILD_INIT([blkreport], [check])
+UL_REQUIRES_LINUX([blkreport])
+AM_CONDITIONAL([BUILD_BLKREPORT], [test "x$build_blkreport" = xyes])
+
+UL_BUILD_INIT([blkzonecmd], [check])
+UL_REQUIRES_LINUX([blkzonecmd])
+AM_CONDITIONAL([BUILD_BLKZONECMD], [test "x$build_blkzonecmd" = xyes])
+
 UL_BUILD_INIT([ldattach], [check])
 UL_REQUIRES_LINUX([ldattach])
 AM_CONDITIONAL([BUILD_LDATTACH], [test "x$build_ldattach" = xyes])
diff --git a/include/strutils.h b/include/strutils.h
index ec2a8ac..93296c5 100644
--- a/include/strutils.h
+++ b/include/strutils.h
@@ -26,6 +26,7 @@ extern uint32_t strtou32_or_err(const char *str, const char *errmesg);
 
 extern int64_t strtos64_or_err(const char *str, const char *errmesg);
 extern uint64_t strtou64_or_err(const char *str, const char *errmesg);
+extern uint64_t strtou64_base_or_err(int base, const char *str, const char *errmesg);
 
 extern double strtod_or_err(const char *str, const char *errmesg);
 
diff --git a/lib/strutils.c b/lib/strutils.c
index 30dc090..b57770d 100644
--- a/lib/strutils.c
+++ b/lib/strutils.c
@@ -314,7 +314,7 @@ err:
 	errx(STRTOXX_EXIT_CODE, "%s: '%s'", errmesg, str);
 }
 
-uint64_t strtou64_or_err(const char *str, const char *errmesg)
+uint64_t strtou64_base_or_err(int base, const char *str, const char *errmesg)
 {
 	uintmax_t num;
 	char *end = NULL;
@@ -322,7 +322,7 @@ uint64_t strtou64_or_err(const char *str, const char *errmesg)
 	if (str == NULL || *str == '\0')
 		goto err;
 	errno = 0;
-	num = strtoumax(str, &end, 10);
+	num = strtoumax(str, &end, base);
 
 	if (errno || str == end || (end && *end))
 		goto err;
@@ -335,6 +335,10 @@ err:
 	errx(STRTOXX_EXIT_CODE, "%s: '%s'", errmesg, str);
 }
 
+uint64_t strtou64_or_err(const char *str, const char *errmesg)
+{
+	return strtou64_base_or_err(10, str, errmesg);
+}
 
 double strtod_or_err(const char *str, const char *errmesg)
 {
diff --git a/sys-utils/Makemodule.am b/sys-utils/Makemodule.am
index f306e65..d3a9578 100644
--- a/sys-utils/Makemodule.am
+++ b/sys-utils/Makemodule.am
@@ -110,6 +110,20 @@ blkdiscard_SOURCES = sys-utils/blkdiscard.c lib/monotonic.c
 blkdiscard_LDADD = $(LDADD) libcommon.la $(REALTIME_LIBS)
 endif
 
+if BUILD_BLKREPORT
+sbin_PROGRAMS += blkreport
+dist_man_MANS += sys-utils/blkreport.8
+blkreport_SOURCES = sys-utils/blkreport.c
+blkreport_LDADD = $(LDADD) libcommon.la $(REALTIME_LIBS)
+endif
+
+if BUILD_BLKZONECMD
+sbin_PROGRAMS += blkzonecmd
+dist_man_MANS += sys-utils/blkzonecmd.8
+blkzonecmd_SOURCES = sys-utils/blkzonecmd.c
+blkzonecmd_LDADD = $(LDADD) libcommon.la $(REALTIME_LIBS)
+endif
+
 if BUILD_LDATTACH
 usrsbin_exec_PROGRAMS += ldattach
 dist_man_MANS += sys-utils/ldattach.8
diff --git a/sys-utils/blkreport.8 b/sys-utils/blkreport.8
new file mode 100644
index 0000000..f030f8b
--- /dev/null
+++ b/sys-utils/blkreport.8
@@ -0,0 +1,95 @@
+.TH BLKREPORT 5 "March 2016" "util-linux" "System Administration"
+.SH NAME
+blkreport \- report zones on a device
+.SH SYNOPSIS
+.B blkreport
+[options]
+.RB [ \-o
+.IR offset ]
+.RB [ \-l
+.IR report length ]
+.I device
+.SH DESCRIPTION
+.B blkreport
+is used to report device zone information.  This is useful for
+zoned devices that support the ZAC or ZBC command set.
+Unlike
+.BR sg_rep_zones (8) ,
+this command is can be used on any block device.
+.PP
+By default,
+.B blkreport
+will report from the start of the block device upto 512k bytes of the
+zone report (~8160 zones].  Options may be used to modify
+this behavior based on the starting zone or size of the report,
+as explained below.
+.PP
+The
+.I device
+argument is the pathname of the block device.
+.PP
+.SH OPTIONS
+The
+.I zone
+and
+.I length
+arguments may be followed by the multiplicative suffixes KiB (=1024),
+MiB (=1024*1024), and so on for GiB, TiB, PiB, EiB, ZiB and YiB (the "iB" is
+optional, e.g., "K" has the same meaning as "KiB") or the suffixes
+KB (=1000), MB (=1000*1000), and so on for GB, TB, PB, EB, ZB and YB.
+.TP
+.BR \-z , " \-\-zone \fIoffset"
+The starting zone to be reported on on specified as a sector offset.
+The provided offset in sector units should match the start of a zone.
+The default value is zero.
+.TP
+.BR \-l , " \-\-length \fIlength"
+The number of bytes to allocate for the report from the block device.
+The provided value will be aligned to the device sector size.
+If the specified value will be limited to the range of 512 bytes to 512 k-bytes.
+.TP
+.BR \-e , " \-\-endian \fInum"
+Assume report is in 0->little endian or 1->big endian format and disable
+the endian guessing.
+.TP
+.BR \-F , " \-\-force"
+Force report to by-pass the zone cache and query the media. If the zone
+cache is available it will be updated with the results of the report.
+.TP
+.BR \-r , " \-\-option"
+Zoned devices support various reports. The default report lists all zones,
+however more specific reports can be specified. Available reports are:
+.BR 0 \- non seq. and reset (default)
+.BR 1 \- empty
+.BR 2 \- open implicit
+.BR 3 \- open explicit
+.BR 4 \- closed
+.BR 5 \- full
+.BR 6 \- read only
+.BR 7 \- offline
+.BR 0x10 \- reset
+.BR 0x11 \- non sequential
+.BR 0x3f \- non write pointer zones
+.TP
+.BR \-v , " \-\-verbose"
+Display the aligned values of
+.I offset
+and
+.IR length .
+.TP
+.BR \-V , " \-\-version"
+Display version information and exit.
+.TP
+.BR \-h , " \-\-help"
+Display help text and exit.
+.SH AUTHOR
+.MT shaun.tancheff@seagate.com
+Shaun Tancheff
+.ME
+.SH SEE ALSO
+.BR sg_rep_zones (8)
+.SH AVAILABILITY
+The blkreport command is part of the util-linux package and is available
+.UR ftp://\:ftp.kernel.org\:/pub\:/linux\:/utils\:/util-linux/
+Linux Kernel Archive
+.UE .
diff --git a/sys-utils/blkreport.c b/sys-utils/blkreport.c
new file mode 100644
index 0000000..b22b3f2
--- /dev/null
+++ b/sys-utils/blkreport.c
@@ -0,0 +1,584 @@
+/*
+ * blkreport.c -- request a zone report on part (or all) of the block device.
+ *
+ * Copyright (C) 2015,2016 Seagate Technology PLC
+ * Written by Shaun Tancheff <shaun.tancheff@seagate.com>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * This program uses BLKREPORT ioctl to query zone information about part of
+ * or a whole block device, if the device supports it.
+ * You can specify range (start and length) to be queried.
+ */
+
+#include <string.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <fcntl.h>
+#include <limits.h>
+#include <getopt.h>
+#include <time.h>
+
+#include <sys/ioctl.h>
+#include <sys/stat.h>
+#include <sys/time.h>
+#include <linux/fs.h>
+
+#ifdef HAVE_BLKZONED_API_H
+#include <linux/blkzoned_api.h>
+#endif
+
+#include "nls.h"
+#include "strutils.h"
+#include "c.h"
+#include "closestream.h"
+#include "monotonic.h"
+
+#ifndef HAVE_BLKZONED_API_H
+
+#define ZBC_REPORT_OPTION_MASK  0x3f
+#define ZBC_REPORT_ZONE_PARTIAL 0x80
+
+/**
+ * enum zone_report_option - Report Zones types to be included.
+ *
+ * @ZOPT_NON_SEQ_AND_RESET: Default (all zones).
+ * @ZOPT_ZC1_EMPTY: Zones which are empty.
+ * @ZOPT_ZC2_OPEN_IMPLICIT: Zones open but not explicitly opened
+ * @ZOPT_ZC3_OPEN_EXPLICIT: Zones opened explicitly
+ * @ZOPT_ZC4_CLOSED: Zones closed for writing.
+ * @ZOPT_ZC5_FULL: Zones that are full.
+ * @ZOPT_ZC6_READ_ONLY: Zones that are read-only
+ * @ZOPT_ZC7_OFFLINE: Zones that are offline
+ * @ZOPT_RESET: Zones with Reset WP Recommended
+ * @ZOPT_NON_SEQ: Zones that with Non-Sequential Write Resources Active
+ * @ZOPT_NON_WP_ZONES: Zones that do not have Write Pointers (conventional)
+ * @ZOPT_PARTIAL_FLAG: Modifies the definition of the Zone List Length field.
+ *
+ * Used by Report Zones in bdev_zone_get_report: report_option
+ */
+enum zbc_zone_reporting_options {
+	ZBC_ZONE_REPORTING_OPTION_ALL = 0,
+	ZBC_ZONE_REPORTING_OPTION_EMPTY,
+	ZBC_ZONE_REPORTING_OPTION_IMPLICIT_OPEN,
+	ZBC_ZONE_REPORTING_OPTION_EXPLICIT_OPEN,
+	ZBC_ZONE_REPORTING_OPTION_CLOSED,
+	ZBC_ZONE_REPORTING_OPTION_FULL,
+	ZBC_ZONE_REPORTING_OPTION_READONLY,
+	ZBC_ZONE_REPORTING_OPTION_OFFLINE,
+	ZBC_ZONE_REPORTING_OPTION_NEED_RESET_WP = 0x10,
+	ZBC_ZONE_REPORTING_OPTION_NON_SEQWRITE,
+	ZBC_ZONE_REPORTING_OPTION_NON_WP = 0x3f,
+	ZBC_ZONE_REPORTING_OPTION_RESERVED = 0x40,
+	ZBC_ZONE_REPORTING_OPTION_PARTIAL = ZBC_REPORT_ZONE_PARTIAL
+};
+
+/**
+ * enum blk_zone_type - Types of zones allowed in a zoned device.
+ *
+ * @BLK_ZONE_TYPE_RESERVED: Reserved.
+ * @BLK_ZONE_TYPE_CONVENTIONAL: Zone has no WP. Zone commands are not available.
+ * @BLK_ZONE_TYPE_SEQWRITE_REQ: Zone must be written sequentially
+ * @BLK_ZONE_TYPE_SEQWRITE_PREF: Zone may be written non-sequentially
+ *
+ * TBD: Move to blkzoned_api - we don't need pointless duplication
+ * and user space needs to handle the same information in the
+ * same format -- so lets make it easy
+ */
+enum blk_zone_type {
+	BLK_ZONE_TYPE_RESERVED,
+	BLK_ZONE_TYPE_CONVENTIONAL,
+	BLK_ZONE_TYPE_SEQWRITE_REQ,
+	BLK_ZONE_TYPE_SEQWRITE_PREF,
+	BLK_ZONE_TYPE_UNKNOWN,
+};
+
+/**
+ * enum blk_zone_state - State [condition] of a zone in a zoned device.
+ *
+ * @BLK_ZONE_NO_WP: Zone has not write pointer it is CMR/Conventional
+ * @BLK_ZONE_EMPTY: Zone is empty. Write pointer is at the start of the zone.
+ * @BLK_ZONE_OPEN: Zone is open, but not explicitly opened by a zone open cmd.
+ * @BLK_ZONE_OPEN_EXPLICIT: Zones was explicitly opened by a zone open cmd.
+ * @BLK_ZONE_CLOSED: Zone was [explicitly] closed for writing.
+ * @BLK_ZONE_UNKNOWN: Zone states 0x5 through 0xc are reserved by standard.
+ * @BLK_ZONE_FULL: Zone was [explicitly] marked full by a zone finish cmd.
+ * @BLK_ZONE_READONLY: Zone is read-only.
+ * @BLK_ZONE_OFFLINE: Zone is offline.
+ * @BLK_ZONE_BUSY: [INTERNAL] Kernel zone cache for this zone is being updated.
+ *
+ * The Zone Condition state machine also maps the above deinitions as:
+ *   - ZC1: Empty         | BLK_ZONE_EMPTY
+ *   - ZC2: Implicit Open | BLK_ZONE_OPEN
+ *   - ZC3: Explicit Open | BLK_ZONE_OPEN_EXPLICIT
+ *   - ZC4: Closed        | BLK_ZONE_CLOSED
+ *   - ZC5: Full          | BLK_ZONE_FULL
+ *   - ZC6: Read Only     | BLK_ZONE_READONLY
+ *   - ZC7: Offline       | BLK_ZONE_OFFLINE
+ *
+ * States 0x5 to 0xC are reserved by the current ZBC/ZAC spec.
+ */
+enum blk_zone_state {
+	BLK_ZONE_NO_WP,
+	BLK_ZONE_EMPTY,
+	BLK_ZONE_OPEN,
+	BLK_ZONE_OPEN_EXPLICIT,
+	BLK_ZONE_CLOSED,
+	BLK_ZONE_UNKNOWN = 0x5,
+	BLK_ZONE_READONLY = 0xd,
+	BLK_ZONE_FULL = 0xe,
+	BLK_ZONE_OFFLINE = 0xf,
+	BLK_ZONE_BUSY = 0x10,
+};
+
+/**
+ * enum bdev_zone_same - Report Zones same code.
+ *
+ * @BLK_ZONE_SAME_ALL_DIFFERENT: All zones differ in type and size.
+ * @BLK_ZONE_SAME_ALL: All zones are the same size and type.
+ * @BLK_ZONE_SAME_LAST_DIFFERS: All zones are the same size and type
+ *    except the last zone which differs by size.
+ * @BLK_ZONE_SAME_LEN_TYPES_DIFFER: All zones are the same length
+ *    but zone types differ.
+ *
+ * Returned from Report Zones. See bdev_zone_report* same_field.
+ */
+enum blk_zone_same {
+	BLK_ZONE_SAME_ALL_DIFFERENT     = 0,
+	BLK_ZONE_SAME_ALL               = 1,
+	BLK_ZONE_SAME_LAST_DIFFERS      = 2,
+	BLK_ZONE_SAME_LEN_TYPES_DIFFER  = 3,
+};
+
+/**
+ * struct bdev_zone_get_report - ioctl: Report Zones request
+ *
+ * @zone_locator_lba: starting lba for first [reported] zone
+ * @return_page_count: number of *bytes* allocated for result
+ * @report_option: see: zone_report_option enum
+ * @force_unit_access: Force report from media
+ *
+ * Used to issue report zones command to connected device
+ */
+struct bdev_zone_get_report {
+	__u64 zone_locator_lba;
+	__u32 return_page_count;
+	__u8  report_option;
+	__u8  force_unit_access;
+} __attribute__((packed));
+
+/**
+ * struct bdev_zone_action - ioctl: Perform Zone Action
+ *
+ * @zone_locator_lba: starting lba for first [reported] zone
+ * @return_page_count: number of *bytes* allocated for result
+ * @action: One of the ZONE_ACTION_*'s Close,Finish,Open, or Reset
+ * @all_zones: Flag to indicate if command should apply to all zones.
+ * @force_unit_access: Force command to media (bypass zone cache).
+ *
+ * Used to issue report zones command to connected device
+ */
+struct bdev_zone_action {
+	__u64 zone_locator_lba;
+	__u32 action;
+	__u8  all_zones;
+	__u8  force_unit_access;
+} __attribute__((packed));
+
+/**
+ * struct bdev_zone_descriptor - A Zone descriptor entry from report zones
+ *
+ * @type: see zone_type enum
+ * @flags: Bits 0:reset, 1:non-seq, 2-3: resv, 4-7: see zone_condition enum
+ * @reserved1: padding
+ * @length: length of zone in sectors
+ * @lba_start: lba where the zone starts.
+ * @lba_wptr: lba of the current write pointer.
+ * @reserved: padding
+ *
+ */
+struct bdev_zone_descriptor {
+	__u8 type;
+	__u8 flags;
+	__u8  reserved1[6];
+	__be64 length;
+	__be64 lba_start;
+	__be64 lba_wptr;
+	__u8 reserved[32];
+} __attribute__((packed));
+
+/**
+ * struct bdev_zone_report - Report Zones result
+ *
+ * @descriptor_count: Number of descriptor entries that follow
+ * @same_field: bits 0-3: enum zone_same (MASK: 0x0F)
+ * @reserved1: padding
+ * @maximum_lba: LBA of the last logical sector on the device, inclusive
+ *               of all logical sectors in all zones.
+ * @reserved2: padding
+ * @descriptors: array of descriptors follows.
+ */
+struct bdev_zone_report {
+	__be32 descriptor_count;
+	__u8 same_field;
+	__u8 reserved1[3];
+	__be64 maximum_lba;
+	__u8 reserved2[48];
+	struct bdev_zone_descriptor descriptors[0];
+} __attribute__((packed));
+
+/**
+ * struct bdev_zone_report_io - Report Zones ioctl argument.
+ *
+ * @in: Report Zones inputs
+ * @out: Report Zones output
+ */
+struct bdev_zone_report_io {
+	union {
+		struct bdev_zone_get_report in;
+		struct bdev_zone_report out;
+	} data;
+} __attribute__((packed));
+
+#endif /* HAVE_BLKZONED_API_H */
+
+#ifndef BLKREPORT
+# define BLKREPORT	_IOWR(0x12, 130, struct bdev_zone_report_io)
+#endif
+
+static const char * same_text[] = {
+	"all zones are different",
+	"all zones are same size",
+	"last zone differs by size",
+	"all zones same size - different types",
+};
+
+static const char * type_text[] = {
+	"RESERVED",
+	"CONVENTIONAL",
+	"SEQ_WRITE_REQUIRED",
+	"SEQ_WRITE_PREFERRED",
+};
+
+#define ARRAY_COUNT(x) (sizeof((x))/sizeof((*x)))
+
+static int is_big_endian = 0;
+static int do_endian_probe = 1;
+
+static inline uint64_t endian64(uint64_t in)
+{
+	return is_big_endian ? be64toh(in) : in;
+}
+
+static inline uint32_t endian32(uint32_t in)
+{
+	return is_big_endian ? be32toh(in) : in;
+}
+
+static inline uint16_t endian16(uint16_t in)
+{
+	return is_big_endian ? be16toh(in) : in;
+}
+
+static void test_endian(struct bdev_zone_report * info)
+{
+	struct bdev_zone_descriptor * entry = &info->descriptors[0];
+	uint64_t len = entry->length;
+
+	if (!do_endian_probe)
+		return;
+
+	is_big_endian = 1;
+	if ( len == 0x080000 ||
+	     len == 0x100000 ||
+	     len == 0x200000 ||
+	     len == 0x300000 ||
+	     len == 0x400000 ||
+	     len == 0x800000 ) {
+		fprintf(stdout, "Detected length: 0x%"PRIu64
+			" appears little endian\n", len);
+		is_big_endian = 0;
+	}
+}
+
+const char * condition_str[] = {
+	"cv", /* conventional zone */
+	"e0", /* empty */
+	"Oi", /* open implicit */
+	"Oe", /* open explicit */
+	"Cl", /* closed */
+	"x5", "x6", "x7", "x8", "x9", "xA", "xB", /* xN: reserved */
+	"ro", /* read only */
+	"fu", /* full */
+	"OL"  /* offline */
+	};
+
+static const char * zone_condition_str(uint8_t cond)
+{
+	return condition_str[cond & 0x0f];
+}
+
+static void print_zones(struct bdev_zone_report * info, uint32_t size)
+{
+	uint32_t count = endian32(info->descriptor_count);
+	uint32_t max_count;
+	uint32_t iter;
+	int same_code = info->same_field & 0x0f;
+
+	fprintf(stdout, "  count: %u, same %u (%s), max_lba %lu\n",
+		count,
+		same_code, same_text[same_code],
+		endian64(info->maximum_lba & (~0ul >> 16)) );
+
+	max_count = (size - sizeof(struct bdev_zone_report))
+                        / sizeof(struct bdev_zone_descriptor);
+	if (count > max_count) {
+		fprintf(stdout, "Truncating report to %d of %d zones.\n",
+			max_count, count );
+		count = max_count;
+	}
+
+	for (iter = 0; iter < count; iter++ ) {
+		struct bdev_zone_descriptor * entry = &info->descriptors[iter];
+		unsigned int type  = entry->type & 0xF;
+		unsigned int flags = entry->flags;
+		uint64_t start = endian64(entry->lba_start);
+		uint64_t wp = endian64(entry->lba_wptr);
+		uint8_t cond = (flags & 0xF0) >> 4;
+		uint64_t len = endian64(entry->length);
+
+		if (!len) {
+			break;
+		}
+		fprintf(stdout,
+			"  start: %9lx, len %7lx, wptr %8lx"
+			" reset:%u non-seq:%u, zcond:%2u(%s) [type: %u(%s)]\n",
+		start, len, wp - start, flags & 0x01, (flags & 0x02) >> 1,
+		cond, zone_condition_str(cond), type, type_text[type]);
+	}
+}
+
+static inline int is_report_option_valid(uint64_t ropt)
+{
+	uint8_t _opt = ropt & ZBC_REPORT_OPTION_MASK;
+
+	if (ropt & ZBC_ZONE_REPORTING_OPTION_RESERVED) {
+		fprintf(stderr, "Illegal report option %x is reserved.\n",
+			ZBC_ZONE_REPORTING_OPTION_RESERVED);
+		return 0;
+	}
+
+	if (_opt <= ZBC_ZONE_REPORTING_OPTION_OFFLINE)
+		return 1;
+	
+	switch (_opt) {
+	case ZBC_ZONE_REPORTING_OPTION_NEED_RESET_WP:
+	case ZBC_ZONE_REPORTING_OPTION_NON_SEQWRITE:
+	case ZBC_ZONE_REPORTING_OPTION_NON_WP:
+		return 1;
+	default:
+		fprintf(stderr, "Illegal report option %x is unknown.\n",
+			ZBC_ZONE_REPORTING_OPTION_RESERVED);
+		return 0;
+	}
+}
+
+static int do_report(int fd, uint64_t lba, uint64_t len, int fua, uint8_t ropt, int verbose)
+{
+	int rc = -4;
+	struct bdev_zone_report_io *zone_info;
+
+	zone_info = malloc(len);
+	if (zone_info) {
+		memset(zone_info, 0, len);
+		zone_info->data.in.report_option     = ropt;
+		zone_info->data.in.return_page_count = len;
+		zone_info->data.in.zone_locator_lba  = lba;
+		zone_info->data.in.force_unit_access = fua;
+
+		rc = ioctl(fd, BLKREPORT, zone_info);
+		if (rc != -1) {
+			test_endian(&zone_info->data.out);
+
+			if (verbose)
+				fprintf(stdout, "Found %d zones\n",
+					endian32(zone_info->data.out.descriptor_count));
+
+			print_zones(&zone_info->data.out, len);
+		} else {
+			fprintf(stderr, "ERR: %d -> %s\n\n", errno, strerror(errno));
+		}
+		free(zone_info);
+	}
+
+	return rc;
+}
+
+static void __attribute__((__noreturn__)) usage(FILE *out)
+{
+	fputs(USAGE_HEADER, out);
+	fprintf(out,
+	      _(" %s [options] <device>\n"), program_invocation_short_name);
+
+	fputs(USAGE_SEPARATOR, out);
+	fputs(_("Discard the content of sectors on a device.\n"), out);
+
+	fputs(USAGE_OPTIONS, out);
+	fputs(_(" -z, --zone <num>  zone lba in bytes to report from\n"
+		" -l, --length <num>  length of report (512 bytes to 512k bytes)\n"
+		" -r, --option <report> report option\n"
+		"    report is the numeric value from \"enum zone_report_option\".\n"
+		"             0 - non seq. and reset (default)\n"
+		"             1 - empty\n"
+		"             2 - open implicit\n"
+		"             3 - open explicit\n"
+		"             4 - closed\n"
+		"             5 - full\n"
+		"             6 - read only\n"
+		"             7 - offline\n"
+		"          0x10 - reset\n"
+		"          0x11 - non sequential\n"
+		"          0x3f - non write pointer zones\n"
+		" -F, --force         force zone report to query media\n"
+		" -e, --endian <num>  Results is 0=little or 1=big endian\n"
+		" -v, --verbose       print aligned length and offset"),
+		out);
+	fputs(USAGE_SEPARATOR, out);
+	fputs(USAGE_HELP, out);
+	fputs(USAGE_VERSION, out);
+	fprintf(out, USAGE_MAN_TAIL("blkreport(8)"));
+	exit(out == stderr ? EXIT_FAILURE : EXIT_SUCCESS);
+}
+
+
+#define MAX_REPORT_LEN (1 << 19) /* 512k */
+
+int main(int argc, char **argv)
+{
+	char *path;
+	int c;
+	int fd;
+	int secsize;
+	uint64_t blksize;
+	struct stat sb;
+	int verbose = 0;
+	uint64_t ropt = ZBC_ZONE_REPORTING_OPTION_ALL;
+	uint64_t offset = 0ul;
+	uint32_t length = MAX_REPORT_LEN;
+	int fua = 0;
+
+	static const struct option longopts[] = {
+	    { "help",      0, 0, 'h' },
+	    { "version",   0, 0, 'V' },
+	    { "zone",      1, 0, 'z' }, /* starting LBA */
+	    { "length",    1, 0, 'l' }, /* max #of bytes for result */
+	    { "option",    1, 0, 'r' }, /* report option */
+	    { "endian",    1, 0, 'e' },
+	    { "force",     0, 0, 'F' },
+	    { "verbose",   0, 0, 'v' },
+	    { NULL,        0, 0, 0 }
+	};
+
+	setlocale(LC_ALL, "");
+	bindtextdomain(PACKAGE, LOCALEDIR);
+	textdomain(PACKAGE);
+	atexit(close_stdout);
+
+	while ((c = getopt_long(argc, argv, "hVsFvz:l:r:e:", longopts, NULL)) != -1) {
+		switch(c) {
+		case 'h':
+			usage(stdout);
+			break;
+		case 'V':
+			printf(UTIL_LINUX_VERSION);
+			return EXIT_SUCCESS;
+		case 'F':
+			fua = 1;
+			break;
+		case 'l':
+			length = strtou64_base_or_err(0, optarg,
+					_("failed to parse length"));
+			break;
+		case 'z':
+			offset = strtou64_base_or_err(0, optarg,
+					_("failed to parse offset"));
+			break;
+		case 'r':
+			ropt = strtou64_base_or_err(0, optarg,
+					_("failed to parse report option"));
+			break;
+		case 'e':
+			do_endian_probe = 0;
+			is_big_endian = strtou64_base_or_err(0, optarg,
+						_("failed to endian option"));
+			break;
+		case 'v':
+			verbose = 1;
+			break;
+		default:
+			usage(stderr);
+			break;
+		}
+	}
+
+	if (optind == argc)
+		errx(EXIT_FAILURE, _("no device specified"));
+
+	path = argv[optind++];
+
+	if (optind != argc) {
+		warnx(_("unexpected number of arguments"));
+		usage(stderr);
+	}
+
+	fd = open(path, O_RDWR);
+	if (fd < 0)
+		err(EXIT_FAILURE, _("cannot open %s"), path);
+
+	if (fstat(fd, &sb) == -1)
+		err(EXIT_FAILURE, _("stat of %s failed"), path);
+	if (!S_ISBLK(sb.st_mode))
+		errx(EXIT_FAILURE, _("%s: not a block device"), path);
+
+	if (ioctl(fd, BLKGETSIZE64, &blksize))
+		err(EXIT_FAILURE, _("%s: BLKGETSIZE64 ioctl failed"), path);
+	if (ioctl(fd, BLKSSZGET, &secsize))
+		err(EXIT_FAILURE, _("%s: BLKSSZGET ioctl failed"), path);
+
+	/* check offset alignment to the sector size */
+	if (offset % secsize)
+		errx(EXIT_FAILURE, _("%s: offset %" PRIu64 " is not aligned "
+			 "to sector size %i"), path, offset, secsize);
+
+	/* is the range end behind the end of the device ?*/
+	if (offset > blksize)
+		errx(EXIT_FAILURE, _("%s: offset is greater than device size"), path);
+
+	length = (length / 512) * 512;
+	if (length < 512)
+		length = 512;
+	if (length > MAX_REPORT_LEN)
+		length = MAX_REPORT_LEN;
+
+	if (!is_report_option_valid(ropt))
+		errx(EXIT_FAILURE, _("%s: invalid report option for device"), path);
+
+	if (do_report(fd, offset, length, fua, ropt & 0xFF, verbose))
+		 err(EXIT_FAILURE, _("%s: BLKREPORT ioctl failed"), path);
+
+	close(fd);
+	return EXIT_SUCCESS;
+}
diff --git a/sys-utils/blkzonecmd.8 b/sys-utils/blkzonecmd.8
new file mode 100644
index 0000000..8e5d5f0
--- /dev/null
+++ b/sys-utils/blkzonecmd.8
@@ -0,0 +1,87 @@
+.TH BLKZONECMD 5 "March 2016" "util-linux" "System Administration"
+.SH NAME
+blkzonecmd \- send zone commands to a zoned (SMR) device
+.SH SYNOPSIS
+.B blkzonecmd
+[options]
+.RB [ \-z
+.IR zone ]
+.I [\-o] or [\-c] or [\-r]
+.I device
+.SH DESCRIPTION
+.B blkzonecmd
+is used to modify the state of a zone.  This is useful for
+zoned devices that support the ZAC or ZBC command set.
+Unlike
+.BR sg_zone (8) ,
+this command is can be used on any block device.
+.PP
+By default,
+.B blkzonecmd
+will operate on the zone at device logical sector 0. Options may be used to
+modify this behavior as well as specify the operation to be performed on
+the zone, as explained below.
+.PP
+The
+.I device
+argument is the pathname of the block device.
+.PP
+.SH OPTIONS
+The
+.I zone
+argument may be followed by the multiplicative suffixes KiB (=1024),
+MiB (=1024*1024), and so on for GiB, TiB, PiB, EiB, ZiB and YiB (the "iB" is
+optional, e.g., "K" has the same meaning as "KiB") or the suffixes
+KB (=1000), MB (=1000*1000), and so on for GB, TB, PB, EB, ZB and YB.
+As zones were originally required to be sized as a power of 2 logical
+sectors this still is the most common layout. The 0x prefix can also be
+used to specify the zone to be operated on.
+.TP
+.BR \-z , " \-\-zone \fIoffset"
+The zone to be operated on specified as a sector offset.
+The provided offset in sector units should match the start of a zone.
+The default value is zero.
+.TP
+.BR \-o , " \-\-open"
+Send an Open Zone command. Advise media that a zone may be written. On
+success the zone state condition will be advanced to Open Explicit
+.TP
+.BR \-c , " \-\-close"
+Send an Close Zone command. Advise media that a zone may/shall not be
+written to.
+.TP
+.BR \-f , " \-\-finish"
+Send an Finish Zone command. This has the effect of marking a zone full.
+For a Host Managed drive this will move the effective write pointer to
+the end of the zone and all reads commands will succeed. The data that was
+not written to since the last time the zone was EMPTY (reset) will return
+the subsitute data pattern (0's by default).
+.TP
+.BR \-r , " \-\-reset"
+Send a Reset Zone command. On success all data in the zone will be
+deleted.
+.TP
+.BR \-a , " \-\-all"
+Issue the command to all zones on the device.
+.B blkzonecmd.
+.TP
+.BR \-v , " \-\-verbose"
+Display the aligned values of
+.I zone
+.TP
+.BR \-V , " \-\-version"
+Display version information and exit.
+.TP
+.BR \-h , " \-\-help"
+Display help text and exit.
+.SH AUTHOR
+.MT shaun.tancheff@seagate.com
+Shaun Tancheff
+.ME
+.SH SEE ALSO
+.BR sg_zone (8)
+.SH AVAILABILITY
+The blkzonecmd command is part of the util-linux package and is available
+.UR ftp://\:ftp.kernel.org\:/pub\:/linux\:/utils\:/util-linux/
+Linux Kernel Archive
+.UE .
diff --git a/sys-utils/blkzonecmd.c b/sys-utils/blkzonecmd.c
new file mode 100644
index 0000000..7dce728
--- /dev/null
+++ b/sys-utils/blkzonecmd.c
@@ -0,0 +1,258 @@
+/*
+ * blkreport.c -- request a zone report on part (or all) of the block device.
+ *
+ * Copyright (C) 2015,2016 Seagate Technology PLC
+ * Written by Shaun Tancheff <shaun.tancheff@seagate.com>
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>.
+ *
+ * This program uses BLKREPORT ioctl to query zone information about part of
+ * or a whole block device, if the device supports it.
+ * You can specify range (start and length) to be queried.
+ */
+
+#include <string.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <stdint.h>
+#include <fcntl.h>
+#include <limits.h>
+#include <getopt.h>
+#include <time.h>
+
+#include <sys/ioctl.h>
+#include <sys/stat.h>
+#include <sys/time.h>
+#include <linux/fs.h>
+
+#ifdef HAVE_BLKZONED_API_H
+#include <linux/blkzoned_api.h>
+#endif
+
+#include "nls.h"
+#include "strutils.h"
+#include "c.h"
+#include "closestream.h"
+#include "monotonic.h"
+
+#ifndef HAVE_BLKZONED_API_H
+/**
+ * struct bdev_zone_action - ioctl: Perform Zone Action
+ *
+ * @zone_locator_lba: starting lba for first [reported] zone
+ * @return_page_count: number of *bytes* allocated for result
+ * @action: One of the ZONE_ACTION_*'s Close,Finish,Open, or Reset
+ * @all_zones: Flag to indicate if command should apply to all zones.
+ * @force_unit_access: Force command to media (bypass zone cache).
+ *
+ * Used to issue report zones command to connected device
+ */
+struct bdev_zone_action {
+	__u64 zone_locator_lba;
+	__u32 action;
+	__u8  all_zones;
+	__u8  force_unit_access;
+} __attribute__((packed));
+
+#endif /* HAVE_BLKZONED_API_H */
+
+#ifndef BLKZONEACTION
+#define BLKZONEACTION	_IOW(0x12, 131, struct bdev_zone_action)
+
+#define ZONE_ACTION_CLOSE	0x01
+#define ZONE_ACTION_FINISH	0x02
+#define ZONE_ACTION_OPEN	0x03
+#define ZONE_ACTION_RESET	0x04
+
+#endif /* BLKZONEACTION */
+
+static void print_stats(int act, char *path, uint64_t lba)
+{
+	switch (act) {
+	case ZONE_ACTION_CLOSE:
+		printf(_("%s: Close Zone %" PRIu64 "\n"), path, lba);
+		break;
+	case ZONE_ACTION_FINISH:
+		printf(_("%s: Open Zone %" PRIu64 "\n"), path, lba);
+		break;
+	case ZONE_ACTION_OPEN:
+		printf(_("%s: Open Zone %" PRIu64 "\n"), path, lba);
+		break;
+	case ZONE_ACTION_RESET:
+		printf(_("%s: Reset Zone %" PRIu64 "\n"), path, lba);
+		break;
+	default:
+		printf(_("%s: Unknown Action on %" PRIu64 "\n"), path, lba);
+		break;
+	}
+}
+
+static void __attribute__((__noreturn__)) usage(FILE *out)
+{
+	fputs(USAGE_HEADER, out);
+	fprintf(out,
+	      _(" %s [options] <device>\n"), program_invocation_short_name);
+
+	fputs(USAGE_SEPARATOR, out);
+	fputs(_("Discard the content of sectors on a device.\n"), out);
+
+	fputs(USAGE_OPTIONS, out);
+	fputs(_(" -z, --zone <num>  lba of start of zone to act upon\n"
+		" -o, --open        open zone\n"
+		" -c, --close       close zone\n"
+		" -f, --finish      finish zone\n"
+		" -r, --reset       reset zone\n"
+		" -a, --all         apply to all zones\n"
+		" -F, --force       force command to be set to media\n"
+		" -v, --verbose     print aligned length and offset"),
+		out);
+	fputs(USAGE_SEPARATOR, out);
+	fputs(USAGE_HELP, out);
+	fputs(USAGE_VERSION, out);
+	fprintf(out, USAGE_MAN_TAIL("blkzonecmd(8)"));
+	exit(out == stderr ? EXIT_FAILURE : EXIT_SUCCESS);
+}
+
+
+int main(int argc, char **argv)
+{
+	char *path;
+	int c, fd, verbose = 0, secsize;
+	uint64_t blksize;
+	struct stat sb;
+	struct bdev_zone_action za;
+	uint64_t zone_lba = 0ul;
+	uint32_t act = ZONE_ACTION_OPEN;
+	int fua = 0;
+	int rc = 0;
+
+	static const struct option longopts[] = {
+	    { "help",      0, 0, 'h' },
+	    { "version",   0, 0, 'V' },
+	    { "all",       0, 0, 'a' },
+	    { "zone",      1, 0, 'z' },
+	    { "close",     0, 0, 'c' },
+	    { "finish",    0, 0, 'f' },
+	    { "force",     0, 0, 'F' },
+	    { "open",      0, 0, 'o' },
+	    { "reset",     0, 0, 'r' },
+	    { "verbose",   0, 0, 'v' },
+	    { NULL,        0, 0, 0 }
+	};
+
+	setlocale(LC_ALL, "");
+	bindtextdomain(PACKAGE, LOCALEDIR);
+	textdomain(PACKAGE);
+	atexit(close_stdout);
+
+	while ((c = getopt_long(argc, argv, "hVvocFfrz:", longopts, NULL)) != -1) {
+		switch(c) {
+		case 'h':
+			usage(stdout);
+			break;
+		case 'V':
+			printf(UTIL_LINUX_VERSION);
+			return EXIT_SUCCESS;
+		case 'z':
+			zone_lba = strtou64_base_or_err(0, optarg,
+					_("failed to parse length"));
+			break;
+		case 'o':
+			act = ZONE_ACTION_OPEN;
+			break;
+		case 'c':
+			act = ZONE_ACTION_CLOSE;
+			break;
+		case 'f':
+			act = ZONE_ACTION_FINISH;
+			break;
+		case 'r':
+			act = ZONE_ACTION_RESET;
+			break;
+		case 'F':
+			fua = 1;
+			break;
+		case 'v':
+			verbose = 1;
+			break;
+		default:
+			usage(stderr);
+			break;
+		}
+	}
+
+	if (optind == argc)
+		errx(EXIT_FAILURE, _("no device specified"));
+
+	path = argv[optind++];
+
+	if (optind != argc) {
+		warnx(_("unexpected number of arguments"));
+		usage(stderr);
+	}
+
+	fd = open(path, O_WRONLY);
+	if (fd < 0)
+		err(EXIT_FAILURE, _("cannot open %s"), path);
+
+	if (fstat(fd, &sb) == -1)
+		err(EXIT_FAILURE, _("stat of %s failed"), path);
+	if (!S_ISBLK(sb.st_mode))
+		errx(EXIT_FAILURE, _("%s: not a block device"), path);
+
+	if (ioctl(fd, BLKGETSIZE64, &blksize))
+		err(EXIT_FAILURE, _("%s: BLKGETSIZE64 ioctl failed"), path);
+	if (ioctl(fd, BLKSSZGET, &secsize))
+		err(EXIT_FAILURE, _("%s: BLKSSZGET ioctl failed"), path);
+
+	if (zone_lba != ~0ul) {
+		/* check offset alignment to the sector size */
+		if (zone_lba % secsize)
+			errx(EXIT_FAILURE, _("%s: offset %" PRIu64 " is not aligned "
+				 "to sector size %i"), path, zone_lba, secsize);
+
+		/* is the range end behind the end of the device ?*/
+		if (zone_lba > blksize)
+			errx(EXIT_FAILURE, _("%s: offset is greater than device size"), path);
+	}
+
+	switch (act) {
+	case ZONE_ACTION_CLOSE:
+	case ZONE_ACTION_FINISH:
+	case ZONE_ACTION_OPEN:
+	case ZONE_ACTION_RESET:
+		za.zone_locator_lba = zone_lba;
+		za.all_zones = 0;
+		if (zone_lba == ~0ul) {
+			za.zone_locator_lba = 0;
+			za.all_zones = 1;
+		}
+		za.action = act;
+		za.force_unit_access = fua;
+		rc = ioctl(fd, BLKZONEACTION, &za);
+		if (rc == -1)
+			err(EXIT_FAILURE, _("%s: BLKZONEACTION ioctl failed"), path);
+		break;
+	default:
+		err(EXIT_FAILURE, _("%s: Unknown zone action %d"), path, act);
+		break;
+	}
+
+	if (verbose && zone_lba)
+		print_stats(act, path, zone_lba);
+
+	close(fd);
+	return EXIT_SUCCESS;
+}
-- 
2.9.3

