From 93080fed05896eb9e2a6c19d7a47732b6cee7973 Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun@tancheff.com>
Date: Mon, 16 May 2016 15:52:34 -0500
Subject: [PATCH 43/64] Configure discard granularity and max sectors

On SMR drives translating RESET WP -> DISCARD makes a fine analogue.
However the discard granularity is a ZONE. Also fix max sectors to
a ZONE size as we are only setup to perform a RESET WP one zone at
a time.

Also avoid some slow paths for HA drives where it is not needed.

Also prepare to support RESET WP -> WRITE SAME on conventional zones.

Signed-off-by: Shaun Tancheff <shaun.tancheff@seagate.com>
---
 drivers/scsi/sd.c | 56 ++++++++++++++++++++++++++++++++++++++++++-------------
 drivers/scsi/sd.h | 23 ++++++++++++++++++++---
 2 files changed, 63 insertions(+), 16 deletions(-)

diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index 10034e0..a2576d4 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -693,9 +693,13 @@ static void sd_config_discard(struct scsi_disk *sdkp, unsigned int mode)
 		break;
 
 	case SD_ZBC_RESET_WP:
-		max_blocks = min_not_zero(sdkp->max_unmap_blocks,
-					  (u32)SD_MAX_WS16_BLOCKS);
 		q->limits.discard_zeroes_data = 1;
+		q->limits.discard_granularity =
+			sd_zbc_discard_granularity(sdkp);
+
+		max_blocks = min_not_zero(sdkp->max_unmap_blocks,
+					  q->limits.discard_granularity >>
+						ilog2(logical_block_size));
 		break;
 
 	case SD_LBP_ZERO:
@@ -803,6 +807,29 @@ static int sd_setup_discard_cmnd(struct scsi_cmnd *cmd)
 				  blk_zone_is_cmr(zone) ? "CMR" : "unknown",
 				  zone->start, zone->len);
 			spin_unlock_irqrestore(&zone->lock, flags);
+
+			if (blk_zone_is_cmr(zone) &&
+			    nr_sectors < sdkp->max_ws_blocks) {
+				page = alloc_page(GFP_ATOMIC | __GFP_ZERO);
+				if (!page)
+					return BLKPREP_DEFER;
+
+				sd_printk(KERN_INFO, sdkp,
+					  "Discardi CMR -> Write Same 16\n");
+				sd_printk(KERN_INFO, sdkp,
+					  "Write Same Z:%zx/%zx len %zx/%x\n",
+					  zone->start, zone->len,
+					  sector, nr_sectors);
+
+				cmd->cmd_len = 16;
+				cmd->cmnd[0] = WRITE_SAME_16;
+				put_unaligned_be64(sector, &cmd->cmnd[2]);
+				put_unaligned_be32(nr_sectors, &cmd->cmnd[10]);
+
+				len = sdkp->device->sector_size;
+				ret = BLKPREP_OK;
+				break;
+			}
 			ret = BLKPREP_DONE;
 			goto out;
 		}
@@ -814,8 +841,8 @@ static int sd_setup_discard_cmnd(struct scsi_cmnd *cmd)
 		if (zone->start != sector ||
 		    zone->len < nr_sectors) {
 			sd_printk(KERN_INFO, sdkp,
-				  "Misaligned RESET WP, start %zu/%zu "
-				  "len %zu/%u\n",
+				  "Misaligned RESET WP, start %zx/%zx "
+				  "len %zx/%x\n",
 				  zone->start, sector, zone->len, nr_sectors);
 			spin_unlock_irqrestore(&zone->lock, flags);
 			ret = BLKPREP_KILL;
@@ -1868,13 +1895,12 @@ static int sd_done(struct scsi_cmnd *SCpnt)
 			good_bytes = blk_rq_bytes(req);
 			scsi_set_resid(SCpnt, 0);
 		} else {
-#ifdef CONFIG_SCSI_ZBC
 			if (op == ZBC_OUT)
 				/* RESET WRITE POINTER failed */
 				sd_zbc_update_zones(sdkp,
 						    blk_rq_pos(req),
-						    512, true);
-#endif
+						    512, SD_ZBC_RESET_WP_ERR);
+
 			good_bytes = 0;
 			scsi_set_resid(SCpnt, blk_rq_bytes(req));
 		}
@@ -1947,7 +1973,6 @@ static int sd_done(struct scsi_cmnd *SCpnt)
 				good_bytes = blk_rq_bytes(req);
 				scsi_set_resid(SCpnt, 0);
 			}
-#ifdef CONFIG_SCSI_ZBC
 			/*
 			 * ZBC: Unaligned write command.
 			 * Write did not start a write pointer position.
@@ -1955,8 +1980,7 @@ static int sd_done(struct scsi_cmnd *SCpnt)
 			if (sshdr.ascq == 0x04)
 				sd_zbc_update_zones(sdkp,
 						    blk_rq_pos(req),
-						    512, true);
-#endif
+						    512, SD_ZBC_WRITE_ERR);
 		}
 		break;
 	default:
@@ -2182,7 +2206,7 @@ static void sd_read_zones(struct scsi_disk *sdkp, unsigned char *buffer)
 	 * supports equal zone sizes.
 	 */
 	same = buffer[4] & 0xf;
-	if (same == 0 || same > 3) {
+	if (same > 3) {
 		sd_printk(KERN_WARNING, sdkp,
 			  "REPORT ZONES SAME type %d not supported\n", same);
 		return;
@@ -2192,10 +2216,16 @@ static void sd_read_zones(struct scsi_disk *sdkp, unsigned char *buffer)
 	zone_len = logical_to_sectors(sdkp->device,
 				      get_unaligned_be64(&desc[8]));
 	blk_queue_chunk_sectors(sdkp->disk->queue, zone_len);
-	sd_config_discard(sdkp, SD_ZBC_RESET_WP);
 	queue_flag_set_unlocked(QUEUE_FLAG_SINGLE, sdkp->disk->queue);
 
-	sd_zbc_setup(sdkp, buffer, SD_BUF_SIZE);
+	if (same == 0) {
+		sd_printk(KERN_WARNING, sdkp,
+			  "REPORT ZONES SAME type %d "
+			  "ignoring zones not of 0x%llx size\n", same, zone_len);
+	}
+
+	sd_zbc_setup(sdkp, zone_len, buffer, SD_BUF_SIZE);
+	sd_config_discard(sdkp, SD_ZBC_RESET_WP);
 }
 
 static void read_capacity_error(struct scsi_disk *sdkp, struct scsi_device *sdp,
diff --git a/drivers/scsi/sd.h b/drivers/scsi/sd.h
index 1a4d1d4..0311eaf 100644
--- a/drivers/scsi/sd.h
+++ b/drivers/scsi/sd.h
@@ -278,17 +278,23 @@ static inline void sd_dif_complete(struct scsi_cmnd *cmd, unsigned int a)
 
 #endif /* CONFIG_BLK_DEV_INTEGRITY */
 
+
+#define SD_ZBC_INIT		0
+#define SD_ZBC_RESET_WP_ERR	1
+#define SD_ZBC_WRITE_ERR	2
+
+
 #ifdef CONFIG_SCSI_ZBC
 
 extern int sd_zbc_report_zones(struct scsi_disk *, unsigned char *, int,
 			       sector_t, enum zbc_zone_reporting_options, bool);
-extern int sd_zbc_setup(struct scsi_disk *, char *, int);
+extern int sd_zbc_setup(struct scsi_disk *, u64, char *, int);
 extern void sd_zbc_remove(struct scsi_disk *);
 extern void sd_zbc_reset_zones(struct scsi_disk *);
 extern int sd_zbc_lookup_zone(struct scsi_disk *, struct request *,
 			      sector_t, unsigned int);
-extern void sd_zbc_update_zones(struct scsi_disk *, sector_t, int, bool);
-extern void sd_zbc_refresh_zone_work(struct work_struct *);
+extern void sd_zbc_update_zones(struct scsi_disk *, sector_t, int, int);
+extern unsigned int sd_zbc_discard_granularity(struct scsi_disk *);
 
 #else /* CONFIG_SCSI_ZBC */
 
@@ -315,6 +321,17 @@ static inline int sd_zbc_lookup_zone(struct scsi_disk *sdkp,
 }
 
 static inline void sd_zbc_remove(struct scsi_disk *sdkp) {}
+
+static inline void sd_zbc_update_zones(struct scsi_disk *sdkp, sector_t s,
+				       int a, int b)
+{
+}
+
+static inline unsigned int sd_zbc_discard_granularity(struct scsi_disk *sdkp)
+{
+	return sdkp->device->sector_size;
+}
+
 #endif /* CONFIG_SCSI_ZBC */
 
 #endif /* _SCSI_DISK_H */
-- 
2.8.1

