From 31c0998f04dc6783ac319446479c6a6d44c0f91b Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun@tancheff.com>
Date: Mon, 16 May 2016 18:15:06 -0500
Subject: [PATCH 64/64] Add support for SCT Write Same

Since the Write Same command was deprecated and moved to
an SCT feature ATA drives have not supported Write Same
in Linux.

On the current SMR drives support is being added to report
TRIM/DISCARD/UNMAP support via Reset WP. However Reset WP
is not available for the conventional zones. Write Same is
the preferred fallback for UNMAP to maintain the
'Discard returns 0s' contract.

Restore Write Same support by translating SCSI Write Same to
SCT Write Same for drives which support it.

Signed-off-by: Shaun Tancheff <shaun.tancheff@seagate.com>
---
 drivers/ata/libata-scsi.c  |  39 ++++++++++++++++
 drivers/scsi/sd.c          | 113 +++++++++++++++++++++++++++++++++------------
 include/linux/ata.h        |  43 +++++++++++++++++
 include/scsi/scsi_device.h |   2 +
 4 files changed, 167 insertions(+), 30 deletions(-)

diff --git a/drivers/ata/libata-scsi.c b/drivers/ata/libata-scsi.c
index e0d44f9..fbcfe2e 100644
--- a/drivers/ata/libata-scsi.c
+++ b/drivers/ata/libata-scsi.c
@@ -3306,6 +3306,45 @@ static unsigned int ata_scsi_write_same_xlat(struct ata_queued_cmd *qc)
 		goto invalid_param_len;
 
 	buf = page_address(sg_page(scsi_sglist(scmd)));
+
+	if (ata_id_sct_write_same(dev->id))
+	{
+		u16 *sctpg = buf;
+
+		put_unaligned_le16(0x0002,  &sctpg[0]); /* SCT_ACT_WRITE_SAME */
+		put_unaligned_le16(0x0101,  &sctpg[1]); /* WRITE PTRN FG */
+		put_unaligned_le64(block,   &sctpg[2]);
+		put_unaligned_le64(n_block, &sctpg[6]);
+		put_unaligned_le32(0u,      &sctpg[10]);
+
+		tf->hob_feature = 0;
+		tf->feature = 0;
+		tf->hob_nsect = 0;
+		tf->nsect = 1;
+		tf->lbah = 0;
+		tf->lbam = 0;
+		tf->lbal = ATA_CMD_STANDBYNOW1;
+		tf->hob_lbah = 0;
+		tf->hob_lbam = 0;
+		tf->hob_lbal = 0;
+		tf->device = ATA_CMD_STANDBYNOW1;
+		tf->protocol = ATA_PROT_DMA;
+		tf->command = ATA_CMD_WRITE_LOG_DMA_EXT;
+
+#if 0
+		if (ata_ncq_enabled(dev)) {
+			tf->protocol = ATA_PROT_NCQ;
+			tf->command = ATA_CMD_WRITE_LOG_EXT;
+		}
+#endif
+		tf->flags |= ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE |
+			     ATA_TFLAG_LBA48 | ATA_TFLAG_WRITE;
+
+		ata_qc_set_pc_nbytes(qc);
+
+		return 0;
+	}
+
 	size = ata_set_lba_range_entries(buf, 512, block, n_block);
 
 	if (ata_ncq_enabled(dev) && ata_fpdma_dsm_supported(dev)) {
diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index 6d89874..9f161a8 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -669,7 +669,7 @@ static void sd_config_discard(struct scsi_disk *sdkp, unsigned int mode)
 	 */
 	if (sdkp->lbprz) {
 		q->limits.discard_alignment = 0;
-		q->limits.discard_granularity = 1;
+		q->limits.discard_granularity = logical_block_size;
 	} else {
 		q->limits.discard_alignment = sdkp->unmap_alignment *
 			logical_block_size;
@@ -706,12 +706,16 @@ static void sd_config_discard(struct scsi_disk *sdkp, unsigned int mode)
 
 	case SD_ZBC_RESET_WP:
 		q->limits.discard_zeroes_data = 1;
+		q->limits.discard_alignment = 
 		q->limits.discard_granularity =
 			sd_zbc_discard_granularity(sdkp);
 
 		max_blocks = min_not_zero(sdkp->max_unmap_blocks,
 					  q->limits.discard_granularity >>
 						ilog2(logical_block_size));
+
+		if (sdkp->device->sct_write_same)
+			sdkp->max_ws_blocks = max_blocks;
 		break;
 
 	case SD_LBP_ZERO:
@@ -781,7 +785,6 @@ static int sd_setup_discard_cmnd(struct scsi_cmnd *cmd)
 		cmd->cmnd[1] = 0x8; /* UNMAP */
 		put_unaligned_be64(sector, &cmd->cmnd[2]);
 		put_unaligned_be32(nr_sectors, &cmd->cmnd[10]);
-
 		len = sdkp->device->sector_size;
 		break;
 
@@ -801,6 +804,19 @@ static int sd_setup_discard_cmnd(struct scsi_cmnd *cmd)
 #ifdef CONFIG_SCSI_ZBC
 		zone = blk_lookup_zone(rq->q, sector);
 		if (!zone) {
+			sd_printk(KERN_INFO, sdkp,
+				  "No zone for sector %zu\n", sector);
+			if (sector && sdkp->zoned == 1) {
+				/* this is the HostAware runt zone */
+				cmd->cmd_len = 16;
+				cmd->cmnd[0] = ZBC_OUT;
+				cmd->cmnd[1] = ZO_RESET_WRITE_POINTER;
+				put_unaligned_be64(sector, &cmd->cmnd[2]);
+				/* Reset Write Pointer doesn't have a payload */
+				len = 0;
+				cmd->sc_data_direction = DMA_NONE;
+				break;
+			}
 			ret = BLKPREP_KILL;
 			goto out;
 		}
@@ -815,29 +831,47 @@ static int sd_setup_discard_cmnd(struct scsi_cmnd *cmd)
 		}
 		if (!blk_zone_is_smr(zone)) {
 			sd_printk(KERN_INFO, sdkp,
-				  "Discarding %s zone %zu/%zu\n",
+				  "Discarding %s zone %zx/%zx\n",
 				  blk_zone_is_cmr(zone) ? "CMR" : "unknown",
 				  zone->start, zone->len);
 			spin_unlock_irqrestore(&zone->lock, flags);
 
 			if (blk_zone_is_cmr(zone) &&
-			    nr_sectors < sdkp->max_ws_blocks) {
+			    nr_sectors < sdkp->max_ws_blocks &&
+			     (sdp->sct_write_same || !sdp->no_write_same)) {
+				u16 *sctpg;
+
 				page = alloc_page(GFP_ATOMIC | __GFP_ZERO);
 				if (!page)
 					return BLKPREP_DEFER;
 
 				sd_printk(KERN_INFO, sdkp,
-					  "Discardi CMR -> Write Same 16\n");
-				sd_printk(KERN_INFO, sdkp,
-					  "Write Same Z:%zx/%zx len %zx/%x\n",
-					  zone->start, zone->len,
+					  "  ... -> Write Same %zx/%x\n",
 					  sector, nr_sectors);
 
 				cmd->cmd_len = 16;
 				cmd->cmnd[0] = WRITE_SAME_16;
 				put_unaligned_be64(sector, &cmd->cmnd[2]);
 				put_unaligned_be32(nr_sectors, &cmd->cmnd[10]);
-
+				len = sdkp->device->sector_size;
+				ret = BLKPREP_OK;
+				if (!sdp->sct_write_same)
+					break;
+
+				sctpg = page_address(page);
+				memset(&cmd->cmnd[0], 0, 16);
+				cmd->cmnd[0] = ATA_16;
+				cmd->cmnd[1] = (5 << 1);
+				cmd->cmnd[2] = 0x02;
+				cmd->cmnd[6] = 1;
+				cmd->cmnd[8] = ATA_CMD_STANDBYNOW1;
+				cmd->cmnd[13] = ATA_CMD_STANDBYNOW1;
+				cmd->cmnd[14] = ATA_CMD_WRITE_LOG_EXT;
+				put_unaligned_le16(0x0002, &sctpg[0]);
+				put_unaligned_le16(0x0101, &sctpg[1]);
+				put_unaligned_le64(sector, &sctpg[2]);
+				put_unaligned_le64(nr_sectors, &sctpg[6]);
+				put_unaligned_le32(0u, &sctpg[10]);
 				len = sdkp->device->sector_size;
 				ret = BLKPREP_OK;
 				break;
@@ -867,10 +901,24 @@ static int sd_setup_discard_cmnd(struct scsi_cmnd *cmd)
 		zone->wp = zone->start;
 		spin_unlock_irqrestore(&zone->lock, flags);
 #endif
-		cmd->cmd_len = 16;
-		cmd->cmnd[0] = ZBC_OUT;
-		cmd->cmnd[1] = ZO_RESET_WRITE_POINTER;
-		put_unaligned_be64(sector, &cmd->cmnd[2]);
+
+		if (sdp->use_ata16_for_zbc) {
+			cmd->cmnd[0] = ATA_16;
+			cmd->cmnd[1] = (3 << 1) | 1;
+			cmd->cmnd[4] =
+				ATA_SUBCMD_ZAC_MGMT_OUT_RESET_WRITE_POINTER;
+			if (sector == ~0ul || sector == ~1ul)
+				cmd->cmnd[3] = 0x1;
+			else
+				_lba_to_cmd_ata(&cmd->cmnd[7], sector);
+			cmd->cmnd[13] = 1 << 6;
+			cmd->cmnd[14] = ATA_CMD_ZAC_MGMT_OUT;
+		} else {
+			cmd->cmd_len = 16;
+			cmd->cmnd[0] = ZBC_OUT;
+			cmd->cmnd[1] = ZO_RESET_WRITE_POINTER;
+			put_unaligned_be64(sector, &cmd->cmnd[2]);
+		}
 		/* Reset Write Pointer doesn't have a payload */
 		len = 0;
 		cmd->sc_data_direction = DMA_NONE;
@@ -912,7 +960,7 @@ static void sd_config_write_same(struct scsi_disk *sdkp)
 	struct request_queue *q = sdkp->disk->queue;
 	unsigned int logical_block_size = sdkp->device->sector_size;
 
-	if (sdkp->device->no_write_same) {
+	if (sdkp->device->no_write_same && !sdkp->device->sct_write_same) {
 		sdkp->max_ws_blocks = 0;
 		goto out;
 	}
@@ -2019,6 +2067,7 @@ static int sd_done(struct scsi_cmnd *SCpnt)
 	unsigned int good_bytes = result ? 0 : scsi_bufflen(SCpnt);
 	struct scsi_sense_hdr sshdr;
 	struct scsi_disk *sdkp = scsi_disk(SCpnt->request->rq_disk);
+	struct scsi_device *sdp = sdkp->device;
 	struct request *req = SCpnt->request;
 	int sense_valid = 0;
 	int sense_deferred = 0;
@@ -2035,7 +2084,8 @@ static int sd_done(struct scsi_cmnd *SCpnt)
 				/* RESET WRITE POINTER failed */
 				sd_zbc_update_zones(sdkp,
 						    blk_rq_pos(req),
-						    512, SD_ZBC_RESET_WP_ERR);
+						    (1<<14),
+						    SD_ZBC_RESET_WP_ERR);
 
 			good_bytes = 0;
 			scsi_set_resid(SCpnt, blk_rq_bytes(req));
@@ -2113,10 +2163,10 @@ static int sd_done(struct scsi_cmnd *SCpnt)
 			 * ZBC: Unaligned write command.
 			 * Write did not start a write pointer position.
 			 */
-			if (sshdr.ascq == 0x04)
+			if (sshdr.ascq == 0x04 && sdp->type == TYPE_ZBC)
 				sd_zbc_update_zones(sdkp,
 						    blk_rq_pos(req),
-						    512, SD_ZBC_WRITE_ERR);
+						    (1<<14), SD_ZBC_WRITE_ERR);
 		}
 		break;
 	default:
@@ -3072,6 +3122,7 @@ static void sd_read_block_limits(struct scsi_disk *sdkp)
  */
 static void sd_read_block_characteristics(struct scsi_disk *sdkp)
 {
+	struct scsi_device *sdev = sdkp->device;
 	unsigned char *buffer;
 	u16 rot;
 	const int vpd_len = 512;
@@ -3091,21 +3142,23 @@ static void sd_read_block_characteristics(struct scsi_disk *sdkp)
 	}
 
 	sdkp->zoned = (buffer[8] >> 4) & 3;
-	if (sdkp->zoned != 1) {
-		unsigned char cmd[16] = { 0 };
 
-		cmd[0] = ATA_16;
-		cmd[1] = (4 << 1) | 1;
-		cmd[2] = 0xe;
-		cmd[6] = 0x1;
-		cmd[8] = 0x1;
-		cmd[14] = ATA_CMD_ID_ATA;
+	if (scsi_get_vpd_page(sdev, 0x89, buffer, SD_BUF_SIZE))
+		goto out;
 
-		if (scsi_execute_req(sdkp->device, cmd, DMA_FROM_DEVICE, buffer,
-				     vpd_len, NULL, 30 * HZ, 3, NULL))
-			goto out;
-		if (ata_id_zoned_cap((u16 *)buffer) == 0x01)
-			sdkp->zoned = 1;
+	/* buf size is 512, ata id page (512 bytes) starts at offset 60 */
+	if (ata_id_sct_write_same((u16 *)&buffer[60])) {
+		sdev->sct_write_same = 1;
+		sdkp->max_ws_blocks = SD_MAX_WS16_BLOCKS;
+	}
+
+	if (sdkp->zoned != 1) {
+		sdkp->zoned = ata_id_zoned_cap((u16 *)&buffer[60]);
+		if (sdkp->zoned == 1) {
+			sdev->use_ata16_for_zbc = 1;
+			sd_printk(KERN_WARNING, sdkp,
+				"ATA 16 for ZBC*\n");
+		}
 	}
 
  out:
diff --git a/include/linux/ata.h b/include/linux/ata.h
index 2f5517d..d12a9a3 100644
--- a/include/linux/ata.h
+++ b/include/linux/ata.h
@@ -104,6 +104,7 @@ enum {
 	ATA_ID_CFA_KEY_MGMT	= 162,
 	ATA_ID_CFA_MODES	= 163,
 	ATA_ID_DATA_SET_MGMT	= 169,
+	ATA_ID_SCT_CMD_XPORT	= 206,
 	ATA_ID_ROT_SPEED	= 217,
 	ATA_ID_PIO4		= (1 << 1),
 
@@ -777,6 +778,48 @@ static inline bool ata_id_sense_reporting_enabled(const u16 *id)
 }
 
 /**
+ *
+ * Word: 206 - SCT Command Transport
+ *    15:12 - Vendor Specific
+ *     11:6 - Reserved
+ *        5 - SCT Command Transport Data Tables supported
+ *        4 - SCT Command Transport Features Control supported
+ *        3 - SCT Command Transport Error Recovery Control supported
+ *        2 - SCT Command Transport Write Same supported
+ *        1 - SCT Command Transport Long Sector Access supported
+ *        0 - SCT Command Transport supported
+ */
+static inline bool ata_id_sct_data_tables(const u16 *id)
+{
+	return id[ATA_ID_SCT_CMD_XPORT] & (1 << 5) ? true : false;
+}
+
+static inline bool ata_id_sct_features_ctrl(const u16 *id)
+{
+	return id[ATA_ID_SCT_CMD_XPORT] & (1 << 4) ? true : false;
+}
+
+static inline bool ata_id_sct_error_recovery_ctrl(const u16 *id)
+{
+	return id[ATA_ID_SCT_CMD_XPORT] & (1 << 3) ? true : false;
+}
+
+static inline bool ata_id_sct_write_same(const u16 *id)
+{
+	return id[ATA_ID_SCT_CMD_XPORT] & (1 << 2) ? true : false;
+}
+
+static inline bool ata_id_sct_long_sector_access(const u16 *id)
+{
+	return id[ATA_ID_SCT_CMD_XPORT] & (1 << 1) ? true : false;
+}
+
+static inline bool ata_id_sct_supported(const u16 *id)
+{
+	return id[ATA_ID_SCT_CMD_XPORT] & (1 << 0) ? true : false;
+}
+
+/**
  *	ata_id_major_version	-	get ATA level of drive
  *	@id: Identify data
  *
diff --git a/include/scsi/scsi_device.h b/include/scsi/scsi_device.h
index fe89d7c..942af0b 100644
--- a/include/scsi/scsi_device.h
+++ b/include/scsi/scsi_device.h
@@ -150,6 +150,8 @@ struct scsi_device {
 	unsigned use_10_for_ms:1; /* first try 10-byte mode sense/select */
 	unsigned no_report_opcodes:1;	/* no REPORT SUPPORTED OPERATION CODES */
 	unsigned no_write_same:1;	/* no WRITE SAME command */
+	unsigned sct_write_same:1;	/* Has WRITE SAME via SCT Command */
+	unsigned use_ata16_for_zbc:1;	/* HBA blocks ZBC -> ZAC use ata16 */
 	unsigned use_16_for_rw:1; /* Use read/write(16) over read/write(10) */
 	unsigned skip_ms_page_8:1;	/* do not use MODE SENSE page 0x08 */
 	unsigned skip_ms_page_3f:1;	/* do not use MODE SENSE page 0x3f */
-- 
2.8.1

