From d398cd7272b216d8935cf10be4143850f3127297 Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun@tancheff.com>
Date: Wed, 9 Mar 2016 10:30:25 -0600
Subject: [PATCH 7/8] RAID 4/5/6: Fine-grained TRIM enable for ZDM

Currently RAID 4/5/6 requires an module parameter to enable
discard bios.

This was done due the to general inadequacies of relying on
hardware to correctly self identify.

Since ZDM does not rely on lower level device support to for
TRIM handling it seems reasonable to allow another method to
communicate to MD-RAID that enabling discard is safe.

This method is also more targeted. Devices are not expected
to set this parameter directly. And the kernel module parameter
which assumes devices are unsafe remains intact.

Signed-off-by: Shaun Tancheff <shaun.tancheff@seagate.com>
---
 drivers/md/dm-zoned.c  |  1 +
 drivers/md/raid5.c     |  4 +++-
 include/linux/blkdev.h | 14 ++++++++++----
 3 files changed, 14 insertions(+), 5 deletions(-)

diff --git a/drivers/md/dm-zoned.c b/drivers/md/dm-zoned.c
index 657f357..ade1cb7 100644
--- a/drivers/md/dm-zoned.c
+++ b/drivers/md/dm-zoned.c
@@ -1935,6 +1935,7 @@ static void zoned_io_hints(struct dm_target *ti, struct queue_limits *limits)
 		limits->discard_granularity = Z_C4K;
 		limits->max_discard_sectors = 1 << 30;
 		limits->discard_zeroes_data = 1;
+		limits->raid_discard_safe = 1;
 	}
 }
 
diff --git a/drivers/md/raid5.c b/drivers/md/raid5.c
index 477ee97..8321ea6 100644
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@ -6943,12 +6943,14 @@ static int run(struct mddev *mddev)
 			    !bdev_get_queue(rdev->bdev)->
 						limits.discard_zeroes_data)
 				discard_supported = false;
+
 			/* Unfortunately, discard_zeroes_data is not currently
 			 * a guarantee - just a hint.  So we only allow DISCARD
 			 * if the sysadmin has confirmed that only safe devices
 			 * are in use by setting a module parameter.
 			 */
-			if (!devices_handle_discard_safely) {
+			if (!devices_handle_discard_safely &&
+			    !bdev_discard_raid_safe(rdev->bdev)) {
 				if (discard_supported) {
 					pr_info("md/raid456: discard support disabled due to uncertainty.\n");
 					pr_info("Set raid456.devices_handle_discard_safely=Y to override.\n");
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index d4068c1..f2392cf 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -276,11 +276,12 @@ struct queue_limits {
 	unsigned short		max_segments;
 	unsigned short		max_integrity_segments;
 
-	unsigned char		misaligned;
-	unsigned char		discard_misaligned;
-	unsigned char		cluster;
-	unsigned char		discard_zeroes_data;
 	unsigned char		raid_partial_stripes_expensive;
+	unsigned		misaligned:1;
+	unsigned		discard_misaligned:1;
+	unsigned		cluster:1;
+	unsigned		discard_zeroes_data:1;
+	unsigned		raid_discard_safe:1;
 };
 
 struct request_queue {
@@ -1302,6 +1303,11 @@ static inline unsigned int bdev_discard_zeroes_data(struct block_device *bdev)
 	return queue_discard_zeroes_data(bdev_get_queue(bdev));
 }
 
+static inline unsigned int bdev_discard_raid_safe(struct block_device *bdev)
+{
+	return bdev_get_queue(bdev)->limits.raid_discard_safe;
+}
+
 static inline unsigned int bdev_write_same(struct block_device *bdev)
 {
 	struct request_queue *q = bdev_get_queue(bdev);
-- 
2.7.0

