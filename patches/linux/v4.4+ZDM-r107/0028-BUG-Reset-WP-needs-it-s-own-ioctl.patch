From b330815c721a1eebd6579c5f8039f56c4aaa6848 Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun@tancheff.com>
Date: Fri, 18 Mar 2016 23:29:29 -0500
Subject: [PATCH 28/29] BUG: Reset WP needs it's own ioctl #.

BIO's with 0 bytes are not handled by blk_partition_remap()
adjust as neccessary before bio submit.

REQ_PRIO is handled special. Use REQ_META for ATA flag
instead.

Backport 4.5 fixes to 4.4.

Bump version number to 107

Signed-off-by: Shaun Tancheff <shaun.tancheff@seagate.com>
---
 block/blk-lib.c                   | 14 +++++++++++++-
 block/ioctl.c                     | 32 +++++++++++++++++++-------------
 drivers/md/dm-zoned.c             | 22 +++++++++++-----------
 drivers/md/libzoned.c             |  4 ++--
 drivers/scsi/sd.c                 | 35 +++++++++++++----------------------
 fs/ext4/ext4.h                    |  1 -
 fs/ext4/inode.c                   |  4 ----
 fs/ext4/page-io.c                 |  8 +-------
 fs/xfs/xfs_aops.c                 |  4 +---
 fs/xfs/xfs_file.c                 |  1 -
 include/linux/fs.h                | 12 +++++-------
 include/uapi/linux/blkzoned_api.h | 11 ++++++-----
 include/uapi/linux/fs.h           |  2 +-
 13 files changed, 72 insertions(+), 78 deletions(-)

diff --git a/block/blk-lib.c b/block/blk-lib.c
index 2496e34..6c05a71 100644
--- a/block/blk-lib.c
+++ b/block/blk-lib.c
@@ -344,7 +344,7 @@ static int bio_add_kmem_pages(struct bio *bio, void *buf, size_t bufsz)
  * Description:
  *    Issue a zone report request for the sectors in question.
  */
-int blkdev_issue_zone_report(struct block_device *bdev,	unsigned long bi_rw,
+int blkdev_issue_zone_report(struct block_device *bdev, unsigned long bi_rw,
 			     sector_t sector, u8 opt, void *buf, size_t bufsz,
 			     gfp_t gfp_mask)
 {
@@ -451,6 +451,18 @@ int blkdev_issue_zone_action(struct block_device *bdev, unsigned long bi_rw,
 	bio->bi_vcnt = 0;
 	bio->bi_iter.bi_size = 0;
 
+	/*
+	 * Since bi_size is zero the partion offset (if any) will
+	 * not get tacked on by blk_partition_remap(bio);
+	 * Do we want that to happen?
+	 */
+	if (bdev != bdev->bd_contains) {
+		struct hd_struct *p = bdev->bd_part;
+
+		bio->bi_iter.bi_sector += p->start_sect;
+		bio->bi_bdev = bdev->bd_contains;
+	}
+
 	atomic_inc(&bb.done);
 	submit_bio(REQ_WRITE | bi_rw, bio);
 
diff --git a/block/ioctl.c b/block/ioctl.c
index 7ac1d3a..fdfcdc0 100644
--- a/block/ioctl.c
+++ b/block/ioctl.c
@@ -237,7 +237,7 @@ static int blk_zoned_report_ioctl(struct block_device *bdev, fmode_t mode,
 	}
 	opt = zone_iodata->data.in.report_option & 0x7F;
 	if (zone_iodata->data.in.report_option & ZOPT_USE_ATA_PASS)
-		bi_rw = REQ_PRIO;
+		bi_rw |= REQ_META;
 
 	error = blkdev_issue_zone_report(bdev, bi_rw,
 			zone_iodata->data.in.zone_locator_lba, opt,
@@ -263,8 +263,8 @@ static int blk_zoned_action_ioctl(struct block_device *bdev, fmode_t mode,
 		return -EBADF;
 
 	/*
-	 * When the low bit is set force ATA passthrough try to work around
-	 * older SAS HBA controllers that don't support ZBC to ZAC translation.
+	 * When the low bit is set force ATA passthrough to work around
+	 * hold SAS HBA controllers that don't support ZBC to ZAC translation.
 	 *
 	 * When the low bit is clear follow the normal path but also correct
 	 * for ~0ul LBA means 'for all lbas'.
@@ -274,7 +274,7 @@ static int blk_zoned_action_ioctl(struct block_device *bdev, fmode_t mode,
 	 *     device....
 	 */
 	if (arg & 1) {
-		bi_rw = REQ_PRIO;
+		bi_rw |= REQ_META;
 		if (arg != ~0ul)
 			arg &= ~1ul; /* ~1 :: 0xFF...FE */
 	} else {
@@ -282,18 +282,27 @@ static int blk_zoned_action_ioctl(struct block_device *bdev, fmode_t mode,
 			arg = ~0ul;
 	}
 
+	/*
+	 * When acting on *all* zones we explicitly disallow using a partition.
+	 */
+	if (arg == ~0ul && bdev != bdev->bd_contains) {
+		pr_err("%s: All zone operations disallowed on this device\n",
+			__func__);
+		return -EFAULT;
+	}
+
 	switch (cmd) {
 	case BLKOPENZONE:
-		bi_rw = REQ_OPEN_ZONE;
+		bi_rw |= REQ_OPEN_ZONE;
 		break;
 	case BLKCLOSEZONE:
-		bi_rw = REQ_CLOSE_ZONE;
+		bi_rw |= REQ_CLOSE_ZONE;
 		break;
-	case BLKDISCARD:
-		bi_rw = REQ_DISCARD;
+	case BLKRESETZONE:
+		bi_rw |= REQ_DISCARD;
 		break;
 	default:
-		pr_err("%s: Unknown action: %u", __func__, cmd);
+		pr_err("%s: Unknown action: %u\n", __func__, cmd);
 		WARN_ON(1);
 	}
 	return blkdev_issue_zone_action(bdev, bi_rw, arg, GFP_KERNEL);
@@ -314,9 +323,6 @@ static int blk_ioctl_discard(struct block_device *bdev, fmode_t mode,
 	start = range[0];
 	len = range[1];
 
-	if (start & 1 && len == (1 << 29))
-		return blk_zoned_action_ioctl(bdev, mode, BLKDISCARD, start);
-
 	if (start & 511)
 		return -EINVAL;
 	if (len & 511)
@@ -676,11 +682,11 @@ int blkdev_ioctl(struct block_device *bdev, fmode_t mode, unsigned cmd,
 	case BLKTRACESETUP:
 	case BLKTRACETEARDOWN:
 		return blk_trace_ioctl(bdev, cmd, argp);
-
 	case BLKREPORT:
 		return blk_zoned_report_ioctl(bdev, mode, argp);
 	case BLKOPENZONE:
 	case BLKCLOSEZONE:
+	case BLKRESETZONE:
 		return blk_zoned_action_ioctl(bdev, mode, cmd, arg);
 
 	case IOC_PR_REGISTER:
diff --git a/drivers/md/dm-zoned.c b/drivers/md/dm-zoned.c
index 8e8cf7a..ec47d2c 100644
--- a/drivers/md/dm-zoned.c
+++ b/drivers/md/dm-zoned.c
@@ -121,12 +121,13 @@ static inline u32 bio_stream(struct bio *bio)
 	 * use this heuristic to try to skip unnecessary co-mingling of data.
 	 */
 
-	if (bio->bi_rw & REQ_META)
+	if (bio->bi_rw & REQ_META) {
 		stream_id = 0xff;
-	else {
-		u32 upid = bio->pid;
+	} else {
+		unsigned int id = bio_get_streamid(bio);
 
-		stream_id = ((upid/97) + (upid/1031) + (upid)) & 0xff;
+		/* high 8 bits is hash of PID, low 8 bits is hash of inode# */
+		stream_id = id >> 8;
 		if (stream_id == 0)
 			stream_id++;
 		if (stream_id == 0xff)
@@ -221,11 +222,11 @@ static int dmz_zone_action(struct zoned *znd, u64 z_id, unsigned long rw)
 		return wp_err;
 
 	if (znd->bdev_is_zoned) {
-		u64 z_offset = z_id + znd->zdstart;
+		u64 z_offset = zone_to_sector(z_id + znd->zdstart);
 		struct zone_action za = {
 			.znd = znd,
 			.bi_rw = rw,
-			.s_addr = zone_to_sector(z_offset),
+			.s_addr = z_offset - znd->start_sect,
 			.wp_err = 0,
 		};
 		if (znd->ata_passthrough)
@@ -345,7 +346,8 @@ static int dmz_report_zones(struct zoned *znd, u64 z_id,
 	if (znd->bdev_is_zoned) {
 		u8  opt = ZOPT_NON_SEQ_AND_RESET;
 		unsigned long bi_rw = 0;
-		u64 s_addr = (z_id + znd->zdstart) << 19;
+		u64 s_addr = zone_to_sector(z_id + znd->zdstart)
+			   - znd->start_sect;
 
 		if (znd->ata_passthrough)
 			bi_rw = REQ_PRIO;
@@ -1808,7 +1810,7 @@ static int zoned_bio(struct zoned *znd, struct bio *bio)
 		}
 	}
 
-	/* check for SYNC flag */
+	/* check for REQ_FLUSH flag */
 	if (bio->bi_rw & REQ_FLUSH) {
 		bio->bi_rw &= ~(REQ_FLUSH);
 		set_bit(DO_FLUSH, &znd->flags);
@@ -1832,10 +1834,8 @@ static int zoned_bio(struct zoned *znd, struct bio *bio)
 			rcode = zoned_map_write(znd, bio, s_zdm);
 			if (rcode == DM_MAPIO_SUBMITTED) {
 				z_discard_partial(znd, blks, CRIT);
-				if (znd->z_gc_free < 5) {
-					Z_DBG(znd, "Low Crit GC Immed.");
+				if (znd->z_gc_free < 5)
 					gc_immediate(znd, !wait, CRIT);
-				}
 			}
 		} else {
 			rcode = zm_read_bios(znd, bio, s_zdm);
diff --git a/drivers/md/libzoned.c b/drivers/md/libzoned.c
index 4dd1c30..6d8de68 100644
--- a/drivers/md/libzoned.c
+++ b/drivers/md/libzoned.c
@@ -12,7 +12,7 @@
  * warranty of any kind, whether express or implied.
  */
 
-#define BUILD_NO		105
+#define BUILD_NO		107
 
 #define EXTRA_DEBUG		0
 #define ENABLE_PG_FREE_VIA_LAZY	1
@@ -3020,7 +3020,7 @@ static int manage_lazy_activity(struct zoned *znd)
 	struct map_pg *expg;
 	struct map_pg *_tpg;
 	int want_flush = 0;
-	const u32 msecs = MEM_HOT_BOOST_INC;
+	const u32 msecs = MEM_PURGE_MSECS;
 
 	spin_lock(&znd->lzy_lck);
 	expg = list_first_entry_or_null(&znd->lzy_pool, typeof(*expg), lazy);
diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index 28654c9..f8b281f 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -697,8 +697,9 @@ static void sd_config_discard(struct scsi_disk *sdkp, unsigned int mode)
 		break;
 
 	case SD_LBP_RESET_WP:
-		max_blocks = min_not_zero(sdkp->max_unmap_blocks,
-					  (u32)SD_MAX_WS16_BLOCKS);
+		max_blocks = (u32)SD_MAX_WS16_BLOCKS;
+		q->limits.discard_alignment = sdkp->physical_block_size;
+		q->limits.discard_granularity = sdkp->physical_block_size;
 		q->limits.discard_zeroes_data = sdkp->lbprz;
 		break;
 
@@ -757,20 +758,6 @@ static int sd_setup_discard_cmnd(struct scsi_cmnd *cmd)
 		len = 24;
 		break;
 
-	case SD_LBP_RESET_WP:
-		cmd->cmd_len = 16;
-		cmd->cmnd[0] = ZBC_ACTION;
-		cmd->cmnd[1] = ZBC_SA_RESET_WP;
-		cmd->cmnd[14] = 0;
-		if (sector == ~0ul) {
-			cmd->cmnd[14] = 1;
-			sector = 0;
-		}
-		put_unaligned_be64(sector, &cmd->cmnd[2]);
-		len = 0;
-		cmd->sc_data_direction = DMA_NONE;
-		break;
-
 	case SD_LBP_WS16:
 		cmd->cmd_len = 16;
 		cmd->cmnd[0] = WRITE_SAME_16;
@@ -1205,14 +1192,14 @@ static int sd_setup_zoned_cmnd(struct scsi_cmnd *cmd)
 		if (ret != BLKPREP_OK)
 			goto out;
 
-		ret = BLKPREP_KILL;
 		cmd = rq->special;
 		if (sdp->changed) {
 			pr_err("SCSI disk has been changed or is not present.");
+			ret = BLKPREP_KILL;
 			goto out;
 		}
 
-		if (rq->cmd_flags & REQ_PRIO) {
+		if (rq->cmd_flags & REQ_META) {
 			cmd->cmnd[0] = ATA_16;
 			cmd->cmnd[1] = (0x6 << 1) | 1;
 			cmd->cmnd[2] = 0x0e;
@@ -1252,7 +1239,7 @@ static int sd_setup_zoned_cmnd(struct scsi_cmnd *cmd)
 		sector = 0;
 	}
 
-	if (rq->cmd_flags & REQ_PRIO) {
+	if (rq->cmd_flags & REQ_META) {
 		cmd->cmnd[0] = ATA_16;
 		cmd->cmnd[1] = (3 << 1) | 1;
 		cmd->cmnd[3] = allbit;
@@ -1274,6 +1261,7 @@ static int sd_setup_zoned_cmnd(struct scsi_cmnd *cmd)
 		cmd->cmnd[14] = allbit;
 		put_unaligned_be64(sector, &cmd->cmnd[2]);
 	}
+	rq->__data_len = 0;
 	cmd->cmd_len = 16;
 	cmd->transfersize = 0;
 	cmd->underflow = 0;
@@ -1287,9 +1275,11 @@ static int sd_setup_zoned_cmnd(struct scsi_cmnd *cmd)
 static int sd_init_command(struct scsi_cmnd *cmd)
 {
 	struct request *rq = cmd->request;
+	struct scsi_device *sdp = cmd->device;
 
-	if ((rq->cmd_flags & REQ_ZONED_FLAGS) ||
-	   ((rq->cmd_flags & REQ_PRIO) && (rq->cmd_flags & REQ_DISCARD)))
+	if (rq->cmd_flags & REQ_ZONED_FLAGS)
+		return sd_setup_zoned_cmnd(cmd);
+	if ((rq->cmd_flags & REQ_DISCARD) && sdp->zabc)
 		return sd_setup_zoned_cmnd(cmd);
 	if (rq->cmd_flags & REQ_DISCARD)
 		return sd_setup_discard_cmnd(cmd);
@@ -1303,8 +1293,9 @@ static int sd_init_command(struct scsi_cmnd *cmd)
 static void sd_uninit_command(struct scsi_cmnd *SCpnt)
 {
 	struct request *rq = SCpnt->request;
+	struct scsi_device *sdp = SCpnt->device;
 
-	if ((rq->cmd_flags & REQ_DISCARD) && !(rq->cmd_flags & REQ_PRIO))
+	if ((rq->cmd_flags & REQ_DISCARD) && !sdp->zabc)
 		__free_page(rq->completion_data);
 
 	if (SCpnt->cmnd != rq->cmd) {
diff --git a/fs/ext4/ext4.h b/fs/ext4/ext4.h
index 82d012e..cc7ca4e 100644
--- a/fs/ext4/ext4.h
+++ b/fs/ext4/ext4.h
@@ -192,7 +192,6 @@ struct ext4_io_submit {
 	struct bio		*io_bio;
 	ext4_io_end_t		*io_end;
 	sector_t		io_next_block;
-	pid_t			pid;
 };
 
 /*
diff --git a/fs/ext4/inode.c b/fs/ext4/inode.c
index 2e48ee3..ea433a7 100644
--- a/fs/ext4/inode.c
+++ b/fs/ext4/inode.c
@@ -1884,7 +1884,6 @@ static int ext4_writepage(struct page *page,
 		return __ext4_journalled_writepage(page, len);
 
 	ext4_io_submit_init(&io_submit, wbc);
-	io_submit.pid = inode->pid;
 	io_submit.io_end = ext4_init_io_end(inode, GFP_NOFS);
 	if (!io_submit.io_end) {
 		redirty_page_for_writepage(wbc, page);
@@ -2510,7 +2509,6 @@ static int ext4_writepages(struct address_space *mapping,
 	mpd.inode = inode;
 	mpd.wbc = wbc;
 	ext4_io_submit_init(&mpd.io_submit, wbc);
-	mpd.io_submit.pid = inode->pid;
 retry:
 	if (wbc->sync_mode == WB_SYNC_ALL || wbc->tagged_writepages)
 		tag_pages_for_writeback(mapping, mpd.first_page, mpd.last_page);
@@ -2564,8 +2562,6 @@ retry:
 			}
 		}
 		ext4_journal_stop(handle);
-		if (mpd.io_submit.io_bio)
-			mpd.io_submit.io_bio->pid = inode->pid;
 		/* Submit prepared bio */
 		ext4_io_submit(&mpd.io_submit);
 		/* Unlock pages we didn't use */
diff --git a/fs/ext4/page-io.c b/fs/ext4/page-io.c
index bdc4112..457e96a 100644
--- a/fs/ext4/page-io.c
+++ b/fs/ext4/page-io.c
@@ -357,7 +357,6 @@ void ext4_io_submit(struct ext4_io_submit *io)
 		int io_op = io->io_wbc->sync_mode == WB_SYNC_ALL ?
 			    WRITE_SYNC : WRITE;
 		bio_get(io->io_bio);
-		io->io_bio->pid = io->pid;
 		submit_bio(io_op, io->io_bio);
 		bio_put(io->io_bio);
 	}
@@ -386,7 +385,6 @@ static int io_submit_init_bio(struct ext4_io_submit *io,
 	bio->bi_end_io = ext4_end_bio;
 	bio->bi_private = ext4_get_io_end(io->io_end);
 	io->io_bio = bio;
-	io->io_bio->pid = io->pid;
 	io->io_next_block = bh->b_blocknr;
 	return 0;
 }
@@ -472,10 +470,8 @@ int ext4_bio_write_page(struct ext4_io_submit *io,
 			/* A hole? We can safely clear the dirty bit */
 			if (!buffer_mapped(bh))
 				clear_buffer_dirty(bh);
-			if (io->io_bio) {
-				io->io_bio->pid = inode->pid;
+			if (io->io_bio)
 				ext4_io_submit(io);
-			}
 			continue;
 		}
 		if (buffer_new(bh)) {
@@ -502,8 +498,6 @@ int ext4_bio_write_page(struct ext4_io_submit *io,
 	do {
 		if (!buffer_async_write(bh))
 			continue;
-		if (io->io_bio)
-			io->io_bio->pid = inode->pid;
 		ret = io_submit_add_bh(io, inode,
 				       data_page ? data_page : page, bh);
 		if (ret) {
diff --git a/fs/xfs/xfs_aops.c b/fs/xfs/xfs_aops.c
index f5b7128..c86acc0 100644
--- a/fs/xfs/xfs_aops.c
+++ b/fs/xfs/xfs_aops.c
@@ -382,9 +382,7 @@ xfs_submit_ioend_bio(
 	atomic_inc(&ioend->io_remaining);
 	bio->bi_private = ioend;
 	bio->bi_end_io = xfs_end_bio;
-	bio_set_streamid(bio, ioend->io_inode->i_streamid);
-	bio->pid = ioend->io_inode->pid;
-
+	bio_set_streamid(bio, inode_streamid(ioend->io_inode));
 	submit_bio(wbc->sync_mode == WB_SYNC_ALL ? WRITE_SYNC : WRITE, bio);
 }
 
diff --git a/fs/xfs/xfs_file.c b/fs/xfs/xfs_file.c
index 365e40a..d6c8513 100644
--- a/fs/xfs/xfs_file.c
+++ b/fs/xfs/xfs_file.c
@@ -1051,7 +1051,6 @@ xfs_file_open(
 		return -EFBIG;
 	if (XFS_FORCED_SHUTDOWN(XFS_M(inode->i_sb)))
 		return -EIO;
-
 	inode->pid = get_current()->pid;
 	return 0;
 }
diff --git a/include/linux/fs.h b/include/linux/fs.h
index 70476d6..debeccc 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -31,6 +31,7 @@
 #include <linux/blk_types.h>
 #include <linux/workqueue.h>
 #include <linux/percpu-rwsem.h>
+#include <linux/hash.h>
 
 #include <asm/byteorder.h>
 #include <uapi/linux/fs.h>
@@ -676,12 +677,7 @@ struct inode {
 	__u32			i_fsnotify_mask; /* all events this inode cares about */
 	struct hlist_head	i_fsnotify_marks;
 #endif
-
-/*
- *  SST: HACK most recent process id to *WRITE* to file
- * for passing to BIO struct as *stream_id*
- */
-	pid_t			pid;
+	pid_t			pid; /* use PID for fallback streamid */
 
 	void			*i_private; /* fs or device private pointer */
 };
@@ -691,7 +687,9 @@ static inline unsigned int inode_streamid(struct inode *inode)
 	if (inode) {
 		if (inode->i_streamid)
 			return inode->i_streamid;
-		return ((inode->i_ino >> 16) ^ inode->i_ino) & 0xFFFF;
+
+		return ((hash_32(inode->pid, 8) << 8)
+			|hash_32(inode->i_ino, 8));
 	}
 	return 0;
 }
diff --git a/include/uapi/linux/blkzoned_api.h b/include/uapi/linux/blkzoned_api.h
index e627fc6..2007b56 100644
--- a/include/uapi/linux/blkzoned_api.h
+++ b/include/uapi/linux/blkzoned_api.h
@@ -28,7 +28,7 @@
  * @ZOPT_ZC6_READ_ONLY: Zones that are read-only
  * @ZOPT_ZC7_OFFLINE: Zones that are offline
  * @ZOPT_RESET: Zones that are empty
- * @ZOPT_NON_SEQ: Zones that have cache writes pending
+ * @ZOPT_NON_SEQ: Zones that have HA media-cache writes pending
  * @ZOPT_NON_WP_ZONES: Zones that do not have Write Pointers (conventional)
  *
  * @ZOPT_USE_ATA_PASS: Flag used in kernel to service command I/O
@@ -212,9 +212,10 @@ struct bdev_zone_report_io {
 	} data;
 } __packed;
 
-
-#define BLKREPORT	_IOWR(0x12, 128, struct bdev_zone_report_io)
-#define BLKOPENZONE	_IO(0x12, 129)
-#define BLKCLOSEZONE	_IO(0x12, 130)
+/* continuing from uapi/linux/fs.h: */
+#define BLKREPORT	_IOWR(0x12, 130, struct bdev_zone_report_io)
+#define BLKOPENZONE	_IO(0x12, 131)
+#define BLKCLOSEZONE	_IO(0x12, 132)
+#define BLKRESETZONE	_IO(0x12, 133)
 
 #endif /* _UAPI_BLKZONED_API_H */
diff --git a/include/uapi/linux/fs.h b/include/uapi/linux/fs.h
index 08948e6..5134b40 100644
--- a/include/uapi/linux/fs.h
+++ b/include/uapi/linux/fs.h
@@ -152,7 +152,7 @@ struct inodes_stat_t {
 #define BLKSECDISCARD _IO(0x12,125)
 #define BLKROTATIONAL _IO(0x12,126)
 #define BLKZEROOUT _IO(0x12,127)
-/* A jump here: See blkzoned_api.h, Reserving 128,129,130. */
+/* A jump here: See blkzoned_api.h, Reserving 130 to 133. */
 
 #define BMAP_IOCTL 1		/* obsolete - kept for compatibility */
 #define FIBMAP	   _IO(0x00,1)	/* bmap access */
-- 
2.7.0

