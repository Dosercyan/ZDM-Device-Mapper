From 90b1cf05e349a6c7018333b27d21d12cbb2cfc8d Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun.tancheff@seagate.com>
Date: Sun, 21 Feb 2016 15:13:06 -0800
Subject: [PATCH 08/29] RAID 4/5/6: Fine-grained TRIM enable for ZDM

    Currently RAID 4/5/6 requires an module parameter to enable
    discard bios.

    This was done due the to general inadequacies of relying on
    hardware to correctly self identify.

    Since ZDM does not rely on lower level device support to for
    TRIM handling it seems reasonable to allow another method to
    communicate to MD-RAID that enabling discard is safe.

    This method is also more targeted. Devices are not expected
    to set this parameter directly. And the kernel module parameter
    which assumes devices are unsafe remains intact.

Signed-off-by: Shaun Tancheff <shaun.tancheff@seagate.com>
---
 drivers/md/dm-zoned.c  |  1 +
 drivers/md/raid5.c     |  4 +++-
 include/linux/blkdev.h | 14 ++++++++++----
 3 files changed, 14 insertions(+), 5 deletions(-)

diff --git a/drivers/md/dm-zoned.c b/drivers/md/dm-zoned.c
index baf9bbc..3e7c1b0 100644
--- a/drivers/md/dm-zoned.c
+++ b/drivers/md/dm-zoned.c
@@ -1861,6 +1861,7 @@ static void zoned_io_hints(struct dm_target *ti, struct queue_limits *limits)
 		limits->max_discard_sectors = 1 << 30;
 		limits->max_hw_discard_sectors = 1 << 30;
 		limits->discard_zeroes_data = 1;
+		limits->raid_discard_safe = 1;
 	}
 }
 
diff --git a/drivers/md/raid5.c b/drivers/md/raid5.c
index 034a553..8efb7f1 100644
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@ -7002,12 +7002,14 @@ static int run(struct mddev *mddev)
 			    !bdev_get_queue(rdev->bdev)->
 						limits.discard_zeroes_data)
 				discard_supported = false;
+
 			/* Unfortunately, discard_zeroes_data is not currently
 			 * a guarantee - just a hint.  So we only allow DISCARD
 			 * if the sysadmin has confirmed that only safe devices
 			 * are in use by setting a module parameter.
 			 */
-			if (!devices_handle_discard_safely) {
+			if (!devices_handle_discard_safely &&
+			    !bdev_discard_raid_safe(rdev->bdev)) {
 				if (discard_supported) {
 					pr_info("md/raid456: discard support disabled due to uncertainty.\n");
 					pr_info("Set raid456.devices_handle_discard_safely=Y to override.\n");
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index c70e358..abbf4f5 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -272,11 +272,12 @@ struct queue_limits {
 	unsigned short		max_segments;
 	unsigned short		max_integrity_segments;
 
-	unsigned char		misaligned;
-	unsigned char		discard_misaligned;
-	unsigned char		cluster;
-	unsigned char		discard_zeroes_data;
 	unsigned char		raid_partial_stripes_expensive;
+	unsigned		misaligned:1;
+	unsigned		discard_misaligned:1;
+	unsigned		cluster:1;
+	unsigned		discard_zeroes_data:1;
+	unsigned		raid_discard_safe:1;
 };
 
 struct request_queue {
@@ -1315,6 +1316,11 @@ static inline unsigned int bdev_discard_zeroes_data(struct block_device *bdev)
 	return queue_discard_zeroes_data(bdev_get_queue(bdev));
 }
 
+static inline unsigned int bdev_discard_raid_safe(struct block_device *bdev)
+{
+	return bdev_get_queue(bdev)->limits.raid_discard_safe;
+}
+
 static inline unsigned int bdev_write_same(struct block_device *bdev)
 {
 	struct request_queue *q = bdev_get_queue(bdev);
-- 
2.7.0

