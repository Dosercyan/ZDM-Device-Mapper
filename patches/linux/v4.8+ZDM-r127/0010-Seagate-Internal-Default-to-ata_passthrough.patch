From d8b1e731ef8c19c40053a8fe61ef1322af7a3f8c Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun@tancheff.com>
Date: Mon, 14 Nov 2016 21:27:59 -0600
Subject: [PATCH 10/11] Seagate Internal: Default to ata_passthrough.

Lots of old HBAs in test systems need to use ZAC because ZBC support
is not available via the HBA's firmware SAT.

Signed-off-by: Shaun Tancheff <shaun.tancheff@seagate.com>
---
 drivers/scsi/sd.c          |  20 +++++++-
 drivers/scsi/sd_zbc.c      | 123 ++++++++++++++++++++++++++++++++++-----------
 include/linux/ata.h        |  15 ++++++
 include/scsi/scsi_device.h |   1 +
 4 files changed, 129 insertions(+), 30 deletions(-)

diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index b59823d..098b12d 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -65,6 +65,8 @@
 #include <scsi/scsi_ioctl.h>
 #include <scsi/scsicam.h>
 
+#include <linux/ata.h>
+
 #include "sd.h"
 #include "scsi_priv.h"
 #include "scsi_logging.h"
@@ -123,6 +125,10 @@ static void sd_print_result(const struct scsi_disk *, const char *, int);
 static DEFINE_SPINLOCK(sd_index_lock);
 static DEFINE_IDA(sd_index_ida);
 
+static int zbc_use_ata16 = 1;
+module_param_named(zbc_use_ata16, zbc_use_ata16, int, S_IRUGO | S_IWUSR);
+MODULE_PARM_DESC(zbc_use_ata16, "Some controllers / drivers break on ZBC");
+
 /* This semaphore is used to mediate the 0->1 reference get in the
  * face of object destruction (i.e. we can't allow a get on an
  * object after last put) */
@@ -2775,13 +2781,13 @@ static void sd_read_block_characteristics(struct scsi_disk *sdkp)
 	struct request_queue *q = sdkp->disk->queue;
 	unsigned char *buffer;
 	u16 rot;
-	const int vpd_len = 64;
+	const int vpd_len = 512; /* this will bork a certain aac HBA */
 
 	buffer = kmalloc(vpd_len, GFP_KERNEL);
 
 	if (!buffer ||
 	    /* Block Device Characteristics VPD */
-	    scsi_get_vpd_page(sdkp->device, 0xb1, buffer, vpd_len))
+	    scsi_get_vpd_page(sdkp->device, 0xb1, buffer, 64))
 		goto out;
 
 	rot = get_unaligned_be16(&buffer[4]);
@@ -2792,6 +2798,15 @@ static void sd_read_block_characteristics(struct scsi_disk *sdkp)
 	}
 
 	sdkp->zoned = (buffer[8] >> 4) & 3;
+	if (sdkp->zoned != 1) {
+		struct scsi_device *sdev = sdkp->device;
+
+		if (!scsi_get_vpd_page(sdev, 0x89, buffer, vpd_len)) {
+			sdkp->zoned = ata_id_zoned_cap((u16 *)&buffer[60]);
+			if (sdkp->zoned == 1)
+				sdev->use_ata16_for_zbc = 1;
+		}
+	}
 	if (sdkp->zoned == 1)
 		q->limits.zoned = BLK_ZONED_HA;
 	else if (sdkp->device->type == TYPE_ZBC)
@@ -3049,6 +3064,7 @@ static void sd_probe_async(void *data, async_cookie_t cookie)
 	gd->queue = sdkp->device->request_queue;
 
 	/* defaults, until the device tells us otherwise */
+	sdp->use_ata16_for_zbc = zbc_use_ata16;
 	sdp->sector_size = 512;
 	sdkp->capacity = 0;
 	sdkp->media_present = 1;
diff --git a/drivers/scsi/sd_zbc.c b/drivers/scsi/sd_zbc.c
index 9540a38..644490e 100644
--- a/drivers/scsi/sd_zbc.c
+++ b/drivers/scsi/sd_zbc.c
@@ -34,6 +34,8 @@
 #include <scsi/scsi_host.h>
 #include <scsi/scsi_eh.h>
 
+#include <linux/ata.h>
+
 #include "sd.h"
 #include "scsi_priv.h"
 
@@ -73,9 +75,16 @@ static void sd_zbc_parse_report(struct scsi_disk *sdkp,
 	if (buf[1] & 0x02)
 		zone->non_seq = 1;
 
-	zone->len = logical_to_sectors(sdp, get_unaligned_be64(&buf[8]));
-	zone->start = logical_to_sectors(sdp, get_unaligned_be64(&buf[16]));
-	zone->wp = logical_to_sectors(sdp, get_unaligned_be64(&buf[24]));
+	if (sdkp->device->use_ata16_for_zbc) {
+		zone->len = logical_to_sectors(sdp, get_unaligned_le64(&buf[8]));
+		zone->start = logical_to_sectors(sdp, get_unaligned_le64(&buf[16]));
+		zone->wp = logical_to_sectors(sdp, get_unaligned_le64(&buf[24]));
+	} else {
+		zone->len = logical_to_sectors(sdp, get_unaligned_be64(&buf[8]));
+		zone->start = logical_to_sectors(sdp, get_unaligned_be64(&buf[16]));
+		zone->wp = logical_to_sectors(sdp, get_unaligned_be64(&buf[24]));
+	}
+
 	if (zone->type != ZBC_ZONE_TYPE_CONV &&
 	    zone->cond == ZBC_ZONE_COND_FULL)
 		zone->wp = zone->start + zone->len;
@@ -95,10 +104,22 @@ static int sd_zbc_report_zones(struct scsi_disk *sdkp, unsigned char *buf,
 	int result;
 
 	memset(cmd, 0, 16);
-	cmd[0] = ZBC_IN;
-	cmd[1] = ZI_REPORT_ZONES;
-	put_unaligned_be64(lba, &cmd[2]);
-	put_unaligned_be32(buflen, &cmd[10]);
+	if (sdp->use_ata16_for_zbc) {
+		cmd[0] = ATA_16;
+		cmd[1] = (0x6 << 1) | 1;
+		cmd[2] = 0x0e;
+		cmd[4] = ATA_SUBCMD_ZAC_MGMT_IN_REPORT_ZONES;
+		cmd[5] = ((buflen / 512) >> 8) & 0xff;
+		cmd[6] = (buflen / 512) & 0xff;
+		_lba_to_cmd_ata(&cmd[7], lba);
+		cmd[13] = 1 << 6;
+		cmd[14] = ATA_CMD_ZAC_MGMT_IN;
+	} else {
+		cmd[0] = ZBC_IN;
+		cmd[1] = ZI_REPORT_ZONES;
+		put_unaligned_be64(lba, &cmd[2]);
+		put_unaligned_be32(buflen, &cmd[10]);
+	}
 	memset(buf, 0, buflen);
 
 	result = scsi_execute_req(sdp, cmd, DMA_FROM_DEVICE,
@@ -140,16 +161,28 @@ int sd_zbc_setup_report_cmnd(struct scsi_cmnd *cmd)
 	ret = scsi_init_io(cmd);
 	if (ret != BLKPREP_OK)
 		return ret;
-
+	lba = sectors_to_logical(sdkp->device, sector);
 	cmd->cmd_len = 16;
 	memset(cmd->cmnd, 0, cmd->cmd_len);
-	cmd->cmnd[0] = ZBC_IN;
-	cmd->cmnd[1] = ZI_REPORT_ZONES;
-	lba = sectors_to_logical(sdkp->device, sector);
-	put_unaligned_be64(lba, &cmd->cmnd[2]);
-	put_unaligned_be32(nr_bytes, &cmd->cmnd[10]);
-	/* Do partial report for speeding things up */
-	cmd->cmnd[14] = ZBC_REPORT_ZONE_PARTIAL;
+	if (sdkp->device->use_ata16_for_zbc) {
+		cmd->cmnd[0] = ATA_16;
+		cmd->cmnd[1] = (0x6 << 1) | 1;
+		cmd->cmnd[2] = 0x0e;
+		cmd->cmnd[3] = ZBC_REPORT_ZONE_PARTIAL;
+		cmd->cmnd[4] = ATA_SUBCMD_ZAC_MGMT_IN_REPORT_ZONES;
+		cmd->cmnd[5] = ((nr_bytes / 512) >> 8) & 0xff;
+		cmd->cmnd[6] = (nr_bytes / 512) & 0xff;
+		_lba_to_cmd_ata(&cmd->cmnd[7], lba);
+		cmd->cmnd[13] = 1 << 6;
+		cmd->cmnd[14] = ATA_CMD_ZAC_MGMT_IN;
+	} else {
+		cmd->cmnd[0] = ZBC_IN;
+		cmd->cmnd[1] = ZI_REPORT_ZONES;
+		put_unaligned_be64(lba, &cmd->cmnd[2]);
+		put_unaligned_be32(nr_bytes, &cmd->cmnd[10]);
+		/* Do partial report for speeding things up */
+		cmd->cmnd[14] = ZBC_REPORT_ZONE_PARTIAL;
+	}
 
 	cmd->sc_data_direction = DMA_FROM_DEVICE;
 	cmd->sdb.length = nr_bytes;
@@ -193,9 +226,14 @@ static void sd_zbc_report_zones_complete(struct scsi_cmnd *scmd,
 
 		if (bytes == 0) {
 			/* Set the report header */
-			hdr.nr_zones = min_t(unsigned int,
-					 (good_bytes - 64) / 64,
-					 get_unaligned_be32(&buf[0]) / 64);
+			if (sdkp->device->use_ata16_for_zbc)
+				hdr.nr_zones = min_t(unsigned int,
+						 (good_bytes - 64) / 64,
+						 get_unaligned_le32(&buf[0]) / 64);
+			else
+				hdr.nr_zones = min_t(unsigned int,
+						 (good_bytes - 64) / 64,
+						 get_unaligned_be32(&buf[0]) / 64);
 			memcpy(buf, &hdr, sizeof(struct blk_zone_report_hdr));
 			offset += 64;
 			bytes += 64;
@@ -256,9 +294,22 @@ int sd_zbc_setup_reset_cmnd(struct scsi_cmnd *cmd)
 
 	cmd->cmd_len = 16;
 	memset(cmd->cmnd, 0, cmd->cmd_len);
-	cmd->cmnd[0] = ZBC_OUT;
-	cmd->cmnd[1] = ZO_RESET_WRITE_POINTER;
-	put_unaligned_be64(block, &cmd->cmnd[2]);
+	if (sdkp->device->use_ata16_for_zbc) {
+		cmd->cmnd[0] = ATA_16;
+		cmd->cmnd[1] = (3 << 1) | 1;
+		cmd->cmnd[2] = 0;
+		cmd->cmnd[3] = 0;
+		cmd->cmnd[4] = ZO_RESET_WRITE_POINTER;
+		cmd->cmnd[5] = 0;
+		cmd->cmnd[6] = 0;
+		_lba_to_cmd_ata(&cmd->cmnd[7], block);
+		cmd->cmnd[13] = 1 << 6;
+		cmd->cmnd[14] = ATA_CMD_ZAC_MGMT_OUT;
+	} else {
+		cmd->cmnd[0] = ZBC_OUT;
+		cmd->cmnd[1] = ZO_RESET_WRITE_POINTER;
+		put_unaligned_be64(block, &cmd->cmnd[2]);
+	}
 
 	rq->timeout = SD_TIMEOUT;
 	cmd->sc_data_direction = DMA_NONE;
@@ -382,9 +433,12 @@ static int sd_zbc_read_zoned_characteristics(struct scsi_disk *sdkp,
 {
 
 	if (scsi_get_vpd_page(sdkp->device, 0xb6, buf, 64)) {
-		sd_printk(KERN_NOTICE, sdkp,
-			  "Unconstrained-read check failed\n");
-		return -ENODEV;
+		if (!sdkp->device->use_ata16_for_zbc) {
+			sd_printk(KERN_NOTICE, sdkp,
+				  "Unconstrained-read check failed\n");
+			return -ENODEV;
+		}
+		buf[4] = 1;
 	}
 
 	if (sdkp->device->type != TYPE_ZBC) {
@@ -422,7 +476,11 @@ static int sd_zbc_check_capacity(struct scsi_disk *sdkp,
 		return ret;
 
 	/* The max_lba field is the capacity of this device */
-	lba = get_unaligned_be64(&buf[8]);
+	if (sdkp->device->use_ata16_for_zbc)
+		lba = get_unaligned_le64(&buf[8]);
+	else
+		lba = get_unaligned_be64(&buf[8]);
+
 	if (lba + 1 == sdkp->capacity)
 		return 0;
 
@@ -464,7 +522,10 @@ static int sd_zbc_check_zone_size(struct scsi_disk *sdkp)
 	same = buf[4] & 0x0f;
 	if (same > 0) {
 		rec = &buf[64];
-		zone_blocks = get_unaligned_be64(&rec[8]);
+		if (sdkp->device->use_ata16_for_zbc)
+			zone_blocks = get_unaligned_le64(&rec[8]);
+		else
+			zone_blocks = get_unaligned_be64(&rec[8]);
 		goto out;
 	}
 
@@ -476,7 +537,10 @@ static int sd_zbc_check_zone_size(struct scsi_disk *sdkp)
 	do {
 
 		/* Parse REPORT ZONES header */
-		list_length = get_unaligned_be32(&buf[0]) + 64;
+		if (sdkp->device->use_ata16_for_zbc)
+			list_length = get_unaligned_le32(&buf[0]) + 64;
+		else
+			list_length = get_unaligned_be32(&buf[0]) + 64;
 		rec = buf + 64;
 		if (list_length < SD_ZBC_BUF_SIZE)
 			buf_len = list_length;
@@ -485,7 +549,10 @@ static int sd_zbc_check_zone_size(struct scsi_disk *sdkp)
 
 		/* Parse zone descriptors */
 		while (rec < buf + buf_len) {
-			zone_blocks = get_unaligned_be64(&rec[8]);
+			if (sdkp->device->use_ata16_for_zbc)
+				zone_blocks = get_unaligned_le64(&rec[8]);
+			else
+				zone_blocks = get_unaligned_be64(&rec[8]);
 			if (sdkp->zone_blocks == 0) {
 				sdkp->zone_blocks = zone_blocks;
 			} else if (zone_blocks != sdkp->zone_blocks &&
diff --git a/include/linux/ata.h b/include/linux/ata.h
index adbc812..492553b 100644
--- a/include/linux/ata.h
+++ b/include/linux/ata.h
@@ -1097,6 +1097,21 @@ static inline unsigned ata_set_lba_range_entries(void *_buffer,
 	return used_bytes;
 }
 
+/**
+ * _lba_to_cmd_ata() - Copy lba48 to ATA command
+ * @cmd: ATA command as an array of bytes
+ * @_lba: lba48 in the low 48 bits
+ */
+static inline void _lba_to_cmd_ata(u8 *cmd, u64 _lba)
+{
+	cmd[1] =  _lba	      & 0xff;
+	cmd[3] = (_lba >>  8) & 0xff;
+	cmd[5] = (_lba >> 16) & 0xff;
+	cmd[0] = (_lba >> 24) & 0xff;
+	cmd[2] = (_lba >> 32) & 0xff;
+	cmd[4] = (_lba >> 40) & 0xff;
+}
+
 static inline bool ata_ok(u8 status)
 {
 	return ((status & (ATA_BUSY | ATA_DRDY | ATA_DF | ATA_DRQ | ATA_ERR))
diff --git a/include/scsi/scsi_device.h b/include/scsi/scsi_device.h
index 8a95631..4bd3e9d 100644
--- a/include/scsi/scsi_device.h
+++ b/include/scsi/scsi_device.h
@@ -156,6 +156,7 @@ struct scsi_device {
 	unsigned use_10_for_ms:1; /* first try 10-byte mode sense/select */
 	unsigned no_report_opcodes:1;	/* no REPORT SUPPORTED OPERATION CODES */
 	unsigned no_write_same:1;	/* no WRITE SAME command */
+	unsigned use_ata16_for_zbc:1;	/* HBA blocks ZBC -> ZAC use ata16 */
 	unsigned use_16_for_rw:1; /* Use read/write(16) over read/write(10) */
 	unsigned skip_ms_page_8:1;	/* do not use MODE SENSE page 0x08 */
 	unsigned skip_ms_page_3f:1;	/* do not use MODE SENSE page 0x3f */
-- 
2.10.2

