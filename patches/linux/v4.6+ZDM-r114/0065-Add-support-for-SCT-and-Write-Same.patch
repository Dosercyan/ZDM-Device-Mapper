From 3c8de21e355fb01dbfadd4ea0eb40eaa496c7746 Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun@tancheff.com>
Date: Mon, 16 May 2016 19:21:51 -0500
Subject: [PATCH 65/65] Add support for SCT and Write Same

SATA drives may support write same when discard is not
available.

Signed-off-by: Shaun Tancheff <shaun.tancheff@seagate.com>
---
 block/blk-lib.c            |  2 +-
 drivers/ata/libata-scsi.c  | 39 ++++++++++++++++++++++++
 drivers/md/dm-zdm.c        |  3 ++
 drivers/md/raid0.c         |  1 +
 drivers/scsi/sd.c          | 75 ++++++++++++++++++++++++++++++++++++++--------
 drivers/scsi/sd_zbc.c      | 31 ++++++++++---------
 include/linux/ata.h        | 43 ++++++++++++++++++++++++++
 include/linux/blkdev.h     |  6 ++--
 include/scsi/scsi_device.h |  1 +
 9 files changed, 171 insertions(+), 30 deletions(-)

diff --git a/block/blk-lib.c b/block/blk-lib.c
index 316b634..157094a 100644
--- a/block/blk-lib.c
+++ b/block/blk-lib.c
@@ -94,7 +94,7 @@ int blkdev_issue_discard(struct block_device *bdev, sector_t sector,
 		}
 
 		/* Make sure bi_size doesn't overflow */
-		req_sects = min_t(sector_t, nr_sects, UINT_MAX >> 9);
+		req_sects = min_t(sector_t, nr_sects, max_discard_sectors);
 
 		/*
 		 * If splitting a request, and the next starting sector would be
diff --git a/drivers/ata/libata-scsi.c b/drivers/ata/libata-scsi.c
index b86af14..34ae4a0 100644
--- a/drivers/ata/libata-scsi.c
+++ b/drivers/ata/libata-scsi.c
@@ -3305,6 +3305,45 @@ static unsigned int ata_scsi_write_same_xlat(struct ata_queued_cmd *qc)
 		goto invalid_param_len;
 
 	buf = page_address(sg_page(scsi_sglist(scmd)));
+
+	if (ata_id_sct_write_same(dev->id))
+	{
+		u16 *sctpg = buf;
+
+		put_unaligned_le16(0x0002,  &sctpg[0]); /* SCT_ACT_WRITE_SAME */
+		put_unaligned_le16(0x0101,  &sctpg[1]); /* WRITE PTRN FG */
+		put_unaligned_le64(block,   &sctpg[2]);
+		put_unaligned_le64(n_block, &sctpg[6]);
+		put_unaligned_le32(0u,      &sctpg[10]);
+
+		tf->hob_feature = 0;
+		tf->feature = 0;
+		tf->hob_nsect = 0;
+		tf->nsect = 1;
+		tf->lbah = 0;
+		tf->lbam = 0;
+		tf->lbal = ATA_CMD_STANDBYNOW1;
+		tf->hob_lbah = 0;
+		tf->hob_lbam = 0;
+		tf->hob_lbal = 0;
+		tf->device = ATA_CMD_STANDBYNOW1;
+		tf->protocol = ATA_PROT_DMA;
+		tf->command = ATA_CMD_WRITE_LOG_DMA_EXT;
+
+#if 0
+		if (ata_ncq_enabled(dev)) {
+			tf->protocol = ATA_PROT_NCQ;
+			tf->command = ATA_CMD_WRITE_LOG_EXT;
+		}
+#endif
+		tf->flags |= ATA_TFLAG_ISADDR | ATA_TFLAG_DEVICE |
+			     ATA_TFLAG_LBA48 | ATA_TFLAG_WRITE;
+
+		ata_qc_set_pc_nbytes(qc);
+
+		return 0;
+	}
+
 	size = ata_set_lba_range_entries(buf, 512, block, n_block);
 
 	if (ata_ncq_enabled(dev) && ata_fpdma_dsm_supported(dev)) {
diff --git a/drivers/md/dm-zdm.c b/drivers/md/dm-zdm.c
index 240da79..6e8afbe 100644
--- a/drivers/md/dm-zdm.c
+++ b/drivers/md/dm-zdm.c
@@ -507,6 +507,8 @@ static int zoned_ctr(struct dm_target *ti, unsigned int argc, char **argv)
 			znd->trim = 1;
 		if (!strcasecmp("nodiscard", argv[r]))
 			znd->trim = 0;
+		if (!strcasecmp("raid5-trim", argv[r]))
+			znd->raid5_trim = 1;
 
 		if (!strncasecmp("reserve=", argv[r], 8)) {
 			u64 mz_resv;
@@ -1879,6 +1881,7 @@ static void zoned_io_hints(struct dm_target *ti, struct queue_limits *limits)
 		limits->max_discard_sectors = 1 << 30;
 		limits->max_hw_discard_sectors = 1 << 30;
 		limits->discard_zeroes_data = 1;
+		limits->raid_discard_safe = znd->raid5_trim;
 	}
 }
 
diff --git a/drivers/md/raid0.c b/drivers/md/raid0.c
index 34783a3..f63dbb6 100644
--- a/drivers/md/raid0.c
+++ b/drivers/md/raid0.c
@@ -70,6 +70,7 @@ static void dump_zones(struct mddev *mddev)
 			(unsigned long long)zone_size>>1);
 		zone_start = conf->strip_zone[j].zone_end;
 	}
+	printk(KERN_INFO "\n");
 }
 
 static int create_strip_zones(struct mddev *mddev, struct r0conf **private_conf)
diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index 2fba4fb..c371cf2 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -706,12 +706,16 @@ static void sd_config_discard(struct scsi_disk *sdkp, unsigned int mode)
 
 	case SD_ZBC_RESET_WP:
 		q->limits.discard_zeroes_data = 1;
+		q->limits.discard_alignment = 
 		q->limits.discard_granularity =
 			sd_zbc_discard_granularity(sdkp);
 
 		max_blocks = min_not_zero(sdkp->max_unmap_blocks,
 					  q->limits.discard_granularity >>
 						ilog2(logical_block_size));
+
+		if (sdkp->device->sct_write_same)
+			sdkp->max_ws_blocks = max_blocks;
 		break;
 
 	case SD_LBP_ZERO:
@@ -781,7 +785,6 @@ static int sd_setup_discard_cmnd(struct scsi_cmnd *cmd)
 		cmd->cmnd[1] = 0x8; /* UNMAP */
 		put_unaligned_be64(sector, &cmd->cmnd[2]);
 		put_unaligned_be32(nr_sectors, &cmd->cmnd[10]);
-
 		len = sdkp->device->sector_size;
 		break;
 
@@ -801,6 +804,19 @@ static int sd_setup_discard_cmnd(struct scsi_cmnd *cmd)
 #ifdef CONFIG_SCSI_ZBC
 		zone = blk_lookup_zone(rq->q, sector);
 		if (!zone) {
+			sd_printk(KERN_INFO, sdkp,
+				  "No zone for sector %zu\n", sector);
+			if (sector && sdkp->zoned == 1) {
+				/* this is the HostAware runt zone */
+				cmd->cmd_len = 16;
+				cmd->cmnd[0] = ZBC_OUT;
+				cmd->cmnd[1] = ZO_RESET_WRITE_POINTER;
+				put_unaligned_be64(sector, &cmd->cmnd[2]);
+				/* Reset Write Pointer doesn't have a payload */
+				len = 0;
+				cmd->sc_data_direction = DMA_NONE;
+				break;
+			}
 			ret = BLKPREP_KILL;
 			goto out;
 		}
@@ -815,29 +831,47 @@ static int sd_setup_discard_cmnd(struct scsi_cmnd *cmd)
 		}
 		if (!blk_zone_is_smr(zone)) {
 			sd_printk(KERN_INFO, sdkp,
-				  "Discarding %s zone %zu/%zu\n",
+				  "Discarding %s zone %zx/%zx\n",
 				  blk_zone_is_cmr(zone) ? "CMR" : "unknown",
 				  zone->start, zone->len);
 			spin_unlock_irqrestore(&zone->lock, flags);
 
 			if (blk_zone_is_cmr(zone) &&
-			    nr_sectors < sdkp->max_ws_blocks) {
+			    nr_sectors < sdkp->max_ws_blocks &&
+			     (sdp->sct_write_same || !sdp->no_write_same)) {
+				u16 *sctpg;
+
 				page = alloc_page(GFP_ATOMIC | __GFP_ZERO);
 				if (!page)
 					return BLKPREP_DEFER;
 
 				sd_printk(KERN_INFO, sdkp,
-					  "Discardi CMR -> Write Same 16\n");
-				sd_printk(KERN_INFO, sdkp,
-					  "Write Same Z:%zx/%zx len %zx/%x\n",
-					  zone->start, zone->len,
+					  "  ... -> Write Same %zx/%x\n",
 					  sector, nr_sectors);
 
 				cmd->cmd_len = 16;
 				cmd->cmnd[0] = WRITE_SAME_16;
 				put_unaligned_be64(sector, &cmd->cmnd[2]);
 				put_unaligned_be32(nr_sectors, &cmd->cmnd[10]);
-
+				len = sdkp->device->sector_size;
+				ret = BLKPREP_OK;
+				if (!sdp->sct_write_same)
+					break;
+
+				sctpg = page_address(page);
+				memset(&cmd->cmnd[0], 0, 16);
+				cmd->cmnd[0] = ATA_16;
+				cmd->cmnd[1] = (5 << 1);
+				cmd->cmnd[2] = 0x02;
+				cmd->cmnd[6] = 1;
+				cmd->cmnd[8] = ATA_CMD_STANDBYNOW1;
+				cmd->cmnd[13] = ATA_CMD_STANDBYNOW1;
+				cmd->cmnd[14] = ATA_CMD_WRITE_LOG_EXT;
+				put_unaligned_le16(0x0002, &sctpg[0]);
+				put_unaligned_le16(0x0101, &sctpg[1]);
+				put_unaligned_le64(sector, &sctpg[2]);
+				put_unaligned_le64(nr_sectors, &sctpg[6]);
+				put_unaligned_le32(0u, &sctpg[10]);
 				len = sdkp->device->sector_size;
 				ret = BLKPREP_OK;
 				break;
@@ -912,7 +946,7 @@ static void sd_config_write_same(struct scsi_disk *sdkp)
 	struct request_queue *q = sdkp->disk->queue;
 	unsigned int logical_block_size = sdkp->device->sector_size;
 
-	if (sdkp->device->no_write_same) {
+	if (sdkp->device->no_write_same && !sdkp->device->sct_write_same) {
 		sdkp->max_ws_blocks = 0;
 		goto out;
 	}
@@ -2020,6 +2054,7 @@ static int sd_done(struct scsi_cmnd *SCpnt)
 	unsigned int good_bytes = result ? 0 : scsi_bufflen(SCpnt);
 	struct scsi_sense_hdr sshdr;
 	struct scsi_disk *sdkp = scsi_disk(SCpnt->request->rq_disk);
+	struct scsi_device *sdp = sdkp->device;
 	struct request *req = SCpnt->request;
 	int sense_valid = 0;
 	int sense_deferred = 0;
@@ -2036,7 +2071,8 @@ static int sd_done(struct scsi_cmnd *SCpnt)
 				/* RESET WRITE POINTER failed */
 				sd_zbc_update_zones(sdkp,
 						    blk_rq_pos(req),
-						    512, SD_ZBC_RESET_WP_ERR);
+						    (1<<14),
+						    SD_ZBC_RESET_WP_ERR);
 
 			good_bytes = 0;
 			scsi_set_resid(SCpnt, blk_rq_bytes(req));
@@ -2114,10 +2150,10 @@ static int sd_done(struct scsi_cmnd *SCpnt)
 			 * ZBC: Unaligned write command.
 			 * Write did not start a write pointer position.
 			 */
-			if (sshdr.ascq == 0x04)
+			if (sshdr.ascq == 0x04 && sdp->type == TYPE_ZBC)
 				sd_zbc_update_zones(sdkp,
 						    blk_rq_pos(req),
-						    512, SD_ZBC_WRITE_ERR);
+						    (1<<14), SD_ZBC_WRITE_ERR);
 		}
 		break;
 	default:
@@ -3162,6 +3198,20 @@ static void sd_read_write_same(struct scsi_disk *sdkp, unsigned char *buffer)
 		sdkp->ws10 = 1;
 }
 
+static void sd_read_sct_write_same(struct scsi_disk *sdkp,
+				   unsigned char *buffer)
+{
+	struct scsi_device *sdev = sdkp->device;
+
+	/* buf size is 512, page is 60 + 512, we need page 206 */
+	if (!scsi_get_vpd_page(sdev, 0x89, buffer, SD_BUF_SIZE)) {
+		if (ata_id_sct_write_same((u16 *)&buffer[60])) {
+			sdev->sct_write_same = 1;
+			sdkp->max_ws_blocks = SD_MAX_WS16_BLOCKS;
+		}
+	}
+}
+
 /**
  *	sd_revalidate_disk - called the first time a new disk is seen,
  *	performs disk spin up, read_capacity, etc.
@@ -3211,6 +3261,7 @@ static int sd_revalidate_disk(struct gendisk *disk)
 		sd_read_cache_type(sdkp, buffer);
 		sd_read_app_tag_own(sdkp, buffer);
 		sd_read_write_same(sdkp, buffer);
+		sd_read_sct_write_same(sdkp, buffer);
 	}
 
 	sdkp->first_scan = 0;
diff --git a/drivers/scsi/sd_zbc.c b/drivers/scsi/sd_zbc.c
index ee95401..db568c0 100644
--- a/drivers/scsi/sd_zbc.c
+++ b/drivers/scsi/sd_zbc.c
@@ -109,14 +109,14 @@ struct blk_zone *zbc_desc_to_zone(struct scsi_disk *sdkp, unsigned char *rec)
 	if (zone_cond == ZBC_ZONE_COND_EMPTY &&
 	    zone->wp != zone->start) {
 		sd_zbc_debug(sdkp,
-			     "zone %zu state EMPTY wp %zu: adjust wp\n",
+			     "zone %zx state EMPTY wp %zx: adjust wp\n",
 			     zone->start, zone->wp);
 		zone->wp = zone->start;
 	}
 	if (zone_cond == ZBC_ZONE_COND_FULL &&
 	    zone->wp != zone->start + zone->len) {
 		sd_zbc_debug(sdkp,
-			     "zone %zu state FULL wp %zu: adjust wp\n",
+			     "zone %zx state FULL wp %zx: adjust wp\n",
 			     zone->start, zone->wp);
 		zone->wp = zone->start + zone->len;
 	}
@@ -173,7 +173,7 @@ sector_t zbc_parse_zones(struct scsi_disk *sdkp, u64 zlen, unsigned char *buf,
 	}
 
 	sd_zbc_debug(sdkp,
-		     "Inserted %d zones, next sector %zu len %d\n",
+		     "Inserted %d zones, next sector %zx len %d\n",
 		     rec_no, next_sector, list_length);
 
 	return next_sector;
@@ -345,7 +345,7 @@ retry:
 		}
 		if (zone_num && (zone_num == zone_busy)) {
 			sd_zbc_debug(sdkp,
-				     "zone update for %zu in progress\n",
+				     "zone update for %zx in progress\n",
 				     sector);
 			kfree(zbc_work);
 			return;
@@ -383,7 +383,7 @@ int sd_zbc_report_zones(struct scsi_disk *sdkp, unsigned char *buffer,
 	if (!scsi_device_online(sdp))
 		return -ENODEV;
 
-	sd_zbc_debug(sdkp, "REPORT ZONES lba %zu len %d\n", start_lba, bufflen);
+	sd_zbc_debug(sdkp, "REPORT ZONES lba %zx len %d\n", start_lba, bufflen);
 
 	memset(cmd, 0, 16);
 	cmd[0] = ZBC_IN;
@@ -399,7 +399,7 @@ int sd_zbc_report_zones(struct scsi_disk *sdkp, unsigned char *buffer,
 
 	if (result) {
 		sd_zbc_debug(sdkp,
-			     "REPORT ZONES lba %zu failed with %d/%d\n",
+			     "REPORT ZONES lba %zx failed with %d/%d\n",
 			     start_lba, host_byte(result), driver_byte(result));
 		return -EIO;
 	}
@@ -425,16 +425,17 @@ int sd_zbc_lookup_zone(struct scsi_disk *sdkp, struct request *rq,
 	zone = blk_lookup_zone(q, sector);
 	/* Might happen during zone initialization */
 	if (!zone) {
-		sd_zbc_debug_ratelimit(sdkp,
-				       "zone for sector %zu not found, skipping\n",
-				       sector);
+		if (sdkp->zoned != 1)
+			sd_zbc_debug_ratelimit(sdkp,
+				"zone for sector %zx not found, skipping\n",
+				sector);
 		return BLKPREP_OK;
 	}
 	spin_lock_irqsave(&zone->lock, flags);
 	if (zone->state == BLK_ZONE_UNKNOWN ||
 	    zone->state == BLK_ZONE_BUSY) {
 		sd_zbc_debug_ratelimit(sdkp,
-				       "zone %zu state %x, deferring\n",
+				       "zone %zx state %x, deferring\n",
 				       zone->start, zone->state);
 		ret = BLKPREP_DEFER;
 	} else if (zone->state == BLK_ZONE_OFFLINE) {
@@ -442,28 +443,30 @@ int sd_zbc_lookup_zone(struct scsi_disk *sdkp, struct request *rq,
 		goto out;
 	} else {
 		if (rq->cmd_flags & (REQ_WRITE | REQ_WRITE_SAME)) {
+			if (zone->type == BLK_ZONE_TYPE_SEQWRITE_PREF)
+				zone->wp += num_sectors;
 			if (zone->type != BLK_ZONE_TYPE_SEQWRITE_REQ)
 				goto out;
 			if (zone->state == BLK_ZONE_READONLY)
 				goto out;
 			if (blk_zone_is_full(zone)) {
 				sd_zbc_debug(sdkp,
-					     "Write to full zone %zu/%zu\n",
+					     "Write to full zone %zx/%zx\n",
 					     sector, zone->wp);
 				ret = BLKPREP_KILL;
 				goto out;
 			}
 			if (zone->wp != sector) {
 				sd_zbc_debug(sdkp,
-					     "Misaligned write %zu/%zu\n",
+					     "Misaligned write %zx/%zx\n",
 					     sector, zone->wp);
 				ret = BLKPREP_KILL;
 				goto out;
 			}
 			zone->wp += num_sectors;
-		} else if (blk_zone_is_smr(zone) && (zone->wp <= sector)) {
+		} else if (blk_zone_is_seq_req(zone) && (zone->wp <= sector)) {
 			sd_zbc_debug(sdkp,
-				     "Read beyond wp %zu/%zu\n",
+				     "Read beyond wp %zx/%zx\n",
 				     sector, zone->wp);
 			if (zone->type == BLK_ZONE_TYPE_SEQWRITE_REQ)
 				ret = BLKPREP_DONE;
diff --git a/include/linux/ata.h b/include/linux/ata.h
index 83e2a99..ccad265 100644
--- a/include/linux/ata.h
+++ b/include/linux/ata.h
@@ -104,6 +104,7 @@ enum {
 	ATA_ID_CFA_KEY_MGMT	= 162,
 	ATA_ID_CFA_MODES	= 163,
 	ATA_ID_DATA_SET_MGMT	= 169,
+	ATA_ID_SCT_CMD_XPORT	= 206,
 	ATA_ID_ROT_SPEED	= 217,
 	ATA_ID_PIO4		= (1 << 1),
 
@@ -777,6 +778,48 @@ static inline bool ata_id_sense_reporting_enabled(const u16 *id)
 }
 
 /**
+ *
+ * Word: 206 - SCT Command Transport
+ *    15:12 - Vendor Specific
+ *     11:6 - Reserved
+ *        5 - SCT Command Transport Data Tables supported
+ *        4 - SCT Command Transport Features Control supported
+ *        3 - SCT Command Transport Error Recovery Control supported
+ *        2 - SCT Command Transport Write Same supported
+ *        1 - SCT Command Transport Long Sector Access supported
+ *        0 - SCT Command Transport supported
+ */
+static inline bool ata_id_sct_data_tables(const u16 *id)
+{
+	return id[ATA_ID_SCT_CMD_XPORT] & (1 << 5) ? true : false;
+}
+
+static inline bool ata_id_sct_features_ctrl(const u16 *id)
+{
+	return id[ATA_ID_SCT_CMD_XPORT] & (1 << 4) ? true : false;
+}
+
+static inline bool ata_id_sct_error_recovery_ctrl(const u16 *id)
+{
+	return id[ATA_ID_SCT_CMD_XPORT] & (1 << 3) ? true : false;
+}
+
+static inline bool ata_id_sct_write_same(const u16 *id)
+{
+	return id[ATA_ID_SCT_CMD_XPORT] & (1 << 2) ? true : false;
+}
+
+static inline bool ata_id_sct_long_sector_access(const u16 *id)
+{
+	return id[ATA_ID_SCT_CMD_XPORT] & (1 << 1) ? true : false;
+}
+
+static inline bool ata_id_sct_supported(const u16 *id)
+{
+	return id[ATA_ID_SCT_CMD_XPORT] & (1 << 0) ? true : false;
+}
+
+/**
  *	ata_id_major_version	-	get ATA level of drive
  *	@id: Identify data
  *
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index 2c3296d..4d1b8ee 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -278,9 +278,9 @@ struct blk_zone {
 	void *private_data;
 };
 
-#define blk_zone_is_smr(z) ((z)->type == BLK_ZONE_TYPE_SEQWRITE_REQ ||	\
-			    (z)->type == BLK_ZONE_TYPE_SEQWRITE_PREF)
-
+#define blk_zone_is_seq_req(z) ((z)->type == BLK_ZONE_TYPE_SEQWRITE_REQ)
+#define blk_zone_is_seq_pref(z) ((z)->type == BLK_ZONE_TYPE_SEQWRITE_PREF)
+#define blk_zone_is_smr(z) (blk_zone_is_seq_req(z) || blk_zone_is_seq_pref(z))
 #define blk_zone_is_cmr(z) ((z)->type == BLK_ZONE_TYPE_CONVENTIONAL)
 #define blk_zone_is_full(z) ((z)->wp == (z)->start + (z)->len)
 #define blk_zone_is_empty(z) ((z)->wp == (z)->start)
diff --git a/include/scsi/scsi_device.h b/include/scsi/scsi_device.h
index 74d79bd..c6645de 100644
--- a/include/scsi/scsi_device.h
+++ b/include/scsi/scsi_device.h
@@ -151,6 +151,7 @@ struct scsi_device {
 	unsigned use_10_for_ms:1; /* first try 10-byte mode sense/select */
 	unsigned no_report_opcodes:1;	/* no REPORT SUPPORTED OPERATION CODES */
 	unsigned no_write_same:1;	/* no WRITE SAME command */
+	unsigned sct_write_same:1;	/* Has WRITE SAME via SCT Command */
 	unsigned use_16_for_rw:1; /* Use read/write(16) over read/write(10) */
 	unsigned skip_ms_page_8:1;	/* do not use MODE SENSE page 0x08 */
 	unsigned skip_ms_page_3f:1;	/* do not use MODE SENSE page 0x3f */
-- 
2.8.1

