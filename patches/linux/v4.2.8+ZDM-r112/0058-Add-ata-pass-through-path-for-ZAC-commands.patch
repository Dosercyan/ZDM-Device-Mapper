From 4c8e1db1b260e2d82c9d87bda19795b3fc43bf52 Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun@tancheff.com>
Date: Sat, 30 Apr 2016 16:01:47 -0500
Subject: [PATCH 58/65] Add ata pass-through path for ZAC commands.

The current generation of HBA SAS adapters support connecting SATA
drives and perform SCSI<->ATA translations in hardware.
Unfortunately the ZBC commands are not being translate (yet).

Currently users of SAS controllers can only send ZAC commands via
ata pass-through.

This method overloads the meaning of REQ_PRIO to direct ZBC commands
to follow the ZAC path.
Note also that this approach expects the initiator to deal with the
little endian result due to bypassing the normal translation layers.

Signed-off-by: Shaun Tancheff <shaun.tancheff@seagate.com>
---
 block/ioctl.c                     |  88 ++++++++++++++++++++++++-----
 drivers/scsi/sd.c                 | 113 +++++++++++++++++++++++++++-----------
 include/uapi/linux/blkzoned_api.h |   1 +
 3 files changed, 155 insertions(+), 47 deletions(-)

diff --git a/block/ioctl.c b/block/ioctl.c
index f641698..edb683a 100644
--- a/block/ioctl.c
+++ b/block/ioctl.c
@@ -198,16 +198,18 @@ static int blk_zoned_report_ioctl(struct block_device *bdev, fmode_t mode,
 		void __user *parg)
 {
 	int error = -EFAULT;
-	int gfp = GFP_KERNEL|GFP_DMA;
+	gfp_t gfp = GFP_KERNEL;
 	struct bdev_zone_report_io *zone_iodata = NULL;
-	u32 alloc_size = max(PAGE_SIZE, sizeof(*zone_iodata));
+	int order = 0;
+	struct page *pgs = NULL;
+	u32 alloc_size = PAGE_SIZE;
 	unsigned long bi_rw = 0;
 	u8 opt = 0;
 
 	if (!(mode & FMODE_READ))
 		return -EBADF;
 
-	zone_iodata = kmalloc(alloc_size, gfp);
+	zone_iodata = (void *)get_zeroed_page(gfp);
 	if (!zone_iodata) {
 		error = -ENOMEM;
 		goto report_zones_out;
@@ -217,16 +219,23 @@ static int blk_zoned_report_ioctl(struct block_device *bdev, fmode_t mode,
 		goto report_zones_out;
 	}
 	if (zone_iodata->data.in.return_page_count > alloc_size) {
-		void *tmp;
+		int npages;
 
 		alloc_size = zone_iodata->data.in.return_page_count;
-		if (alloc_size < KMALLOC_MAX_SIZE) {
-			tmp = krealloc(zone_iodata, alloc_size, gfp);
-			if (!tmp) {
+		npages = (alloc_size + PAGE_SIZE - 1) / PAGE_SIZE;
+		order =  ilog2(roundup_pow_of_two(npages));
+		pgs = alloc_pages(gfp, order);
+		if (pgs) {
+			void *mem = page_address(pgs);
+
+			if (!mem) {
 				error = -ENOMEM;
 				goto report_zones_out;
 			}
-			zone_iodata = tmp;
+			memset(mem, 0, alloc_size);
+			memcpy(mem, zone_iodata, sizeof(*zone_iodata));
+			free_page((unsigned long)zone_iodata);
+			zone_iodata = mem;
 		} else {
 			/* Result requires DMA capable memory */
 			pr_err("Not enough memory available for request.\n");
@@ -235,10 +244,13 @@ static int blk_zoned_report_ioctl(struct block_device *bdev, fmode_t mode,
 		}
 	}
 	opt = zone_iodata->data.in.report_option & 0x7F;
+	if (zone_iodata->data.in.report_option & ZOPT_USE_ATA_PASS)
+		bi_rw |= REQ_META;
 
 	error = blkdev_issue_zone_report(bdev, bi_rw,
 			zone_iodata->data.in.zone_locator_lba, opt,
-			zone_iodata, alloc_size, GFP_KERNEL);
+			pgs ? pgs : virt_to_page(zone_iodata),
+			alloc_size, GFP_KERNEL);
 
 	if (error)
 		goto report_zones_out;
@@ -247,27 +259,71 @@ static int blk_zoned_report_ioctl(struct block_device *bdev, fmode_t mode,
 		error = -EFAULT;
 
 report_zones_out:
-	kfree(zone_iodata);
+	if (pgs)
+		__free_pages(pgs, order);
+	else if (zone_iodata)
+		free_page((unsigned long)zone_iodata);
 	return error;
 }
 
 static int blk_zoned_action_ioctl(struct block_device *bdev, fmode_t mode,
-				  unsigned cmd, unsigned long arg)
+				  unsigned int cmd, unsigned long arg)
 {
 	unsigned long bi_rw = 0;
 
 	if (!(mode & FMODE_WRITE))
 		return -EBADF;
 
+	/*
+	 * When acting on zones we explicitly disallow using a partition.
+	 */
+	if (bdev != bdev->bd_contains) {
+		pr_err("%s: All zone operations disallowed on this device\n",
+			__func__);
+		return -EFAULT;
+	}
+
+	/*
+	 * When the low bit is set force ATA passthrough try to work around
+	 * older SAS HBA controllers that don't support ZBC to ZAC translation.
+	 *
+	 * When the low bit is clear follow the normal path but also correct
+	 * for ~0ul LBA means 'for all lbas'.
+	 *
+	 * NB: We should do extra checking here to see if the user specified
+	 *     the entire block device as opposed to a partition of the
+	 *     device....
+	 */
+	if (arg & 1) {
+		bi_rw |= REQ_META;
+		if (arg != ~0ul)
+			arg &= ~1ul; /* ~1 :: 0xFF...FE */
+	} else {
+		if (arg == ~1ul)
+			arg = ~0ul;
+	}
+
+	/*
+	 * When acting on zones we explicitly disallow using a partition.
+	 */
+	if (bdev != bdev->bd_contains) {
+		pr_err("%s: All zone operations disallowed on this device\n",
+			__func__);
+		return -EFAULT;
+	}
+
 	switch (cmd) {
 	case BLKOPENZONE:
-		bi_rw = REQ_OPEN_ZONE;
+		bi_rw |= REQ_OPEN_ZONE;
 		break;
 	case BLKCLOSEZONE:
-		bi_rw = REQ_CLOSE_ZONE;
+		bi_rw |= REQ_CLOSE_ZONE;
+		break;
+	case BLKRESETZONE:
+		bi_rw |= REQ_RESET_ZONE;
 		break;
 	default:
-		pr_err("%s: Unknown action: %u", __func__, cmd);
+		pr_err("%s: Unknown action: %u\n", __func__, cmd);
 		WARN_ON(1);
 	}
 	return blkdev_issue_zone_action(bdev, bi_rw, arg, GFP_KERNEL);
@@ -278,6 +334,9 @@ static int blk_ioctl_discard(struct block_device *bdev, uint64_t start,
 {
 	unsigned long flags = 0;
 
+	if (start & 3 && len == (1 << 29))
+		return blk_zoned_action_ioctl(bdev, FMODE_WRITE,
+					      BLKDISCARD, start);
 	if (start & 511)
 		return -EINVAL;
 	if (len & 511)
@@ -534,6 +593,7 @@ int blkdev_ioctl(struct block_device *bdev, fmode_t mode, unsigned cmd,
 		return blk_zoned_report_ioctl(bdev, mode, argp);
 	case BLKOPENZONE:
 	case BLKCLOSEZONE:
+	case BLKRESETZONE:
 		return blk_zoned_action_ioctl(bdev, mode, cmd, arg);
 	default:
 		ret = __blkdev_driver_ioctl(bdev, mode, cmd, arg);
diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index 9bbf410..f919025 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -52,6 +52,7 @@
 #include <linux/slab.h>
 #include <linux/pm_runtime.h>
 #include <linux/blkzoned_api.h>
+#include <linux/ata.h>
 #include <asm/uaccess.h>
 #include <asm/unaligned.h>
 
@@ -100,6 +101,16 @@ MODULE_ALIAS_SCSI_DEVICE(TYPE_ZBC);
 #define SD_MINORS	0
 #endif
 
+static inline void _lba_to_cmd_ata(u8 *cmd, u64 _lba)
+{
+	cmd[1] =  _lba	      & 0xff;
+	cmd[3] = (_lba >>  8) & 0xff;
+	cmd[5] = (_lba >> 16) & 0xff;
+	cmd[0] = (_lba >> 24) & 0xff;
+	cmd[2] = (_lba >> 32) & 0xff;
+	cmd[4] = (_lba >> 40) & 0xff;
+}
+
 static void sd_config_discard(struct scsi_disk *, unsigned int);
 static void sd_config_write_same(struct scsi_disk *);
 static int  sd_revalidate_disk(struct gendisk *);
@@ -1251,8 +1262,7 @@ static int sd_setup_zoned_cmnd(struct scsi_cmnd *cmd)
 	int ret = BLKPREP_KILL;
 	u8 allbit = 0;
 
-	if (rq->cmd_flags & REQ_REPORT_ZONES) {
-		WARN_ON(rq_data_dir(rq) != READ);
+	if (rq->cmd_flags & REQ_REPORT_ZONES && rq_data_dir(rq) == READ) {
 		WARN_ON(nr_bytes == 0);
 
 		/*
@@ -1286,11 +1296,29 @@ static int sd_setup_zoned_cmnd(struct scsi_cmnd *cmd)
 			goto out;
 		}
 
-		cmd->cmnd[0] = ZBC_IN;
-		cmd->cmnd[1] = ZI_REPORT_ZONES;
-		put_unaligned_be64(sector, &cmd->cmnd[2]);
-		put_unaligned_be32(nr_bytes, &cmd->cmnd[10]);
-		cmd->cmnd[14] = bio_get_streamid(bio); /* report option */
+		cmd->cmd_len = 16;
+		memset(cmd->cmnd, 0, cmd->cmd_len);
+		if (rq->cmd_flags & REQ_META) {
+			cmd->cmnd[0] = ATA_16;
+			cmd->cmnd[1] = (0x6 << 1) | 1;
+			cmd->cmnd[2] = 0x0e;
+			cmd->cmnd[3] = bio_get_streamid(bio);
+			cmd->cmnd[4] = ATA_SUBCMD_ZAC_MGMT_IN_REPORT_ZONES;
+			cmd->cmnd[5] = ((nr_bytes / 512) >> 8) & 0xff;
+			cmd->cmnd[6] = (nr_bytes / 512) & 0xff;
+
+			_lba_to_cmd_ata(&cmd->cmnd[7], sector);
+
+			cmd->cmnd[13] = 1 << 6;
+			cmd->cmnd[14] = ATA_CMD_ZAC_MGMT_IN;
+		} else {
+			cmd->cmnd[0] = ZBC_IN;
+			cmd->cmnd[1] = ZI_REPORT_ZONES;
+			put_unaligned_be64(sector, &cmd->cmnd[2]);
+			put_unaligned_be32(nr_bytes, &cmd->cmnd[10]);
+			cmd->cmnd[14] = bio_get_streamid(bio);
+		}
+
 		cmd->sc_data_direction = DMA_FROM_DEVICE;
 		cmd->sdb.length = nr_bytes;
 		cmd->transfersize = sdp->sector_size;
@@ -1308,21 +1336,39 @@ static int sd_setup_zoned_cmnd(struct scsi_cmnd *cmd)
 		sector = 0;
 	}
 
-	cmd->cmnd[0] = ZBC_OUT;
-	cmd->cmnd[1] = ZO_OPEN_ZONE;
-	if (rq->cmd_flags & REQ_CLOSE_ZONE)
-		cmd->cmnd[1] = ZO_CLOSE_ZONE;
-	if (rq->cmd_flags & REQ_RESET_ZONE)
-		cmd->cmnd[1] = ZO_RESET_WRITE_POINTER;
-	cmd->cmnd[14] = allbit;
-	put_unaligned_be64(sector, &cmd->cmnd[2]);
 	cmd->cmd_len = 16;
+	memset(cmd->cmnd, 0, cmd->cmd_len);
+	memset(&cmd->sdb, 0, sizeof(cmd->sdb));
+	if (rq->cmd_flags & REQ_META) {
+		cmd->cmnd[0] = ATA_16;
+		cmd->cmnd[1] = (3 << 1) | 1;
+		cmd->cmnd[3] = allbit;
+		cmd->cmnd[4] = ATA_SUBCMD_ZAC_MGMT_OUT_RESET_WRITE_POINTER;
+		if (rq->cmd_flags & REQ_OPEN_ZONE)
+			cmd->cmnd[4] = ATA_SUBCMD_ZAC_MGMT_OUT_OPEN_ZONE;
+		if (rq->cmd_flags & REQ_CLOSE_ZONE)
+			cmd->cmnd[4] = ATA_SUBCMD_ZAC_MGMT_OUT_CLOSE_ZONE;
+		_lba_to_cmd_ata(&cmd->cmnd[7], sector);
+		cmd->cmnd[13] = 1 << 6;
+		cmd->cmnd[14] = ATA_CMD_ZAC_MGMT_OUT;
+	} else {
+		cmd->cmnd[0] = ZBC_OUT;
+		cmd->cmnd[1] = ZO_OPEN_ZONE;
+		if (rq->cmd_flags & REQ_CLOSE_ZONE)
+			cmd->cmnd[1] = ZO_CLOSE_ZONE;
+		if (rq->cmd_flags & REQ_RESET_ZONE)
+			cmd->cmnd[1] = ZO_RESET_WRITE_POINTER;
+		cmd->cmnd[14] = allbit;
+		put_unaligned_be64(sector, &cmd->cmnd[2]);
+	}
+
 	cmd->transfersize = 0;
 	cmd->underflow = 0;
 	cmd->allowed = SD_MAX_RETRIES;
 	cmd->sc_data_direction = DMA_NONE;
+
 	ret = BLKPREP_OK;
- out:
+out:
 	return ret;
 }
 
@@ -2913,22 +2959,6 @@ static void sd_read_block_limits(struct scsi_disk *sdkp)
 		}
 	}
 
-	if (buffer[8] & 0x10) {
-		/*
-		 * A Host Aware ZBC device 'reset wp' operation will discard
-		 * a zone of data. A zone can be very large and need not all
-		 * be of the same size on a single drive so we will defer
-		 * all of that to the layer handling the zones geometry and
-		 * issuing the DISCARD to the device.
-		 * ...WS16_BLOCKS seems like a nice large number to use as
-		 * an analog to the size of a zone.
-		 *
-		 * Any subsequent reads will be zero'd.
-		 */
-		sdkp->zoned = (buffer[8] >> 4) & 3;
-		sdkp->lbprz = 1;
-	}
-
  out:
 	kfree(buffer);
 }
@@ -2941,7 +2971,7 @@ static void sd_read_block_characteristics(struct scsi_disk *sdkp)
 {
 	unsigned char *buffer;
 	u16 rot;
-	const int vpd_len = 64;
+	const int vpd_len = 512;
 
 	buffer = kmalloc(vpd_len, GFP_KERNEL);
 
@@ -2958,6 +2988,23 @@ static void sd_read_block_characteristics(struct scsi_disk *sdkp)
 	}
 
 	sdkp->zoned = (buffer[8] >> 4) & 3;
+	if (sdkp->zoned != 1) {
+		unsigned char cmd[16] = { 0 };
+
+		cmd[0] = ATA_16;
+		cmd[1] = (4 << 1) | 1;
+		cmd[2] = 0xe;
+		cmd[6] = 0x1;
+		cmd[8] = 0x1;
+		cmd[14] = ATA_CMD_ID_ATA;
+
+		if (scsi_execute_req(sdkp->device, cmd, DMA_FROM_DEVICE, buffer,
+				     vpd_len, NULL, 30 * HZ, 3, NULL))
+			goto out;
+		if (ata_id_zoned_cap((u16 *)buffer) == 0x01)
+			sdkp->zoned = 1;
+	}
+
  out:
 	kfree(buffer);
 }
diff --git a/include/uapi/linux/blkzoned_api.h b/include/uapi/linux/blkzoned_api.h
index 06a211d..2007b56 100644
--- a/include/uapi/linux/blkzoned_api.h
+++ b/include/uapi/linux/blkzoned_api.h
@@ -216,5 +216,6 @@ struct bdev_zone_report_io {
 #define BLKREPORT	_IOWR(0x12, 130, struct bdev_zone_report_io)
 #define BLKOPENZONE	_IO(0x12, 131)
 #define BLKCLOSEZONE	_IO(0x12, 132)
+#define BLKRESETZONE	_IO(0x12, 133)
 
 #endif /* _UAPI_BLKZONED_API_H */
-- 
2.8.1

