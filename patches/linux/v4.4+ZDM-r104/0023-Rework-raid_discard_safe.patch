From 684a8f51a0bb0d1e7419bb7e4f1b1eb99154000f Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun@tancheff.com>
Date: Thu, 10 Mar 2016 01:00:57 -0600
Subject: [PATCH 23/25] Rework raid_discard_safe

Make raid_discard_safe configurable by user space.
Default it to off.

Signed-off-by: Shaun Tancheff <shaun.tancheff@seagate.com>
---
 block/blk-settings.c   |  2 ++
 block/blk-sysfs.c      | 11 +++++++++++
 drivers/md/dm-zoned.c  |  5 ++++-
 drivers/md/dm-zoned.h  |  2 +-
 drivers/md/raid5.c     | 13 +++++++++++--
 include/linux/blkdev.h | 10 +++++++++-
 6 files changed, 38 insertions(+), 5 deletions(-)

diff --git a/block/blk-settings.c b/block/blk-settings.c
index dd49735..4050323 100644
--- a/block/blk-settings.c
+++ b/block/blk-settings.c
@@ -101,6 +101,7 @@ void blk_set_default_limits(struct queue_limits *lim)
 	lim->discard_alignment = 0;
 	lim->discard_misaligned = 0;
 	lim->discard_zeroes_data = 0;
+	lim->raid_discard_safe = 0;
 	lim->logical_block_size = lim->physical_block_size = lim->io_min = 512;
 	lim->bounce_pfn = (unsigned long)(BLK_BOUNCE_ANY >> PAGE_SHIFT);
 	lim->alignment_offset = 0;
@@ -570,6 +571,7 @@ int blk_stack_limits(struct queue_limits *t, struct queue_limits *b,
 
 	t->cluster &= b->cluster;
 	t->discard_zeroes_data &= b->discard_zeroes_data;
+	t->raid_discard_safe &= b->raid_discard_safe;
 
 	/* Physical block size a multiple of the logical block size? */
 	if (t->physical_block_size & (t->logical_block_size - 1)) {
diff --git a/block/blk-sysfs.c b/block/blk-sysfs.c
index e140cc4..115fd7f 100644
--- a/block/blk-sysfs.c
+++ b/block/blk-sysfs.c
@@ -187,6 +187,11 @@ static ssize_t queue_discard_zeroes_data_show(struct request_queue *q, char *pag
 	return queue_var_show(queue_discard_zeroes_data(q), page);
 }
 
+static ssize_t queue_raid_discard_safe_show(struct request_queue *q, char *page)
+{
+	return queue_var_show(queue_raid_discard_safe(q), page);
+}
+
 static ssize_t queue_write_same_max_show(struct request_queue *q, char *page)
 {
 	return sprintf(page, "%llu\n",
@@ -438,6 +443,11 @@ static struct queue_sysfs_entry queue_discard_zeroes_data_entry = {
 	.show = queue_discard_zeroes_data_show,
 };
 
+static struct queue_sysfs_entry queue_raid_discard_safe_entry = {
+	.attr = {.name = "raid_discard_safe", .mode = S_IRUGO },
+	.show = queue_raid_discard_safe_show,
+};
+
 static struct queue_sysfs_entry queue_write_same_max_entry = {
 	.attr = {.name = "write_same_max_bytes", .mode = S_IRUGO },
 	.show = queue_write_same_max_show,
@@ -497,6 +507,7 @@ static struct attribute *default_attrs[] = {
 	&queue_discard_max_entry.attr,
 	&queue_discard_max_hw_entry.attr,
 	&queue_discard_zeroes_data_entry.attr,
+	&queue_raid_discard_safe_entry.attr,
 	&queue_write_same_max_entry.attr,
 	&queue_nonrot_entry.attr,
 	&queue_nomerges_entry.attr,
diff --git a/drivers/md/dm-zoned.c b/drivers/md/dm-zoned.c
index c3ec7be..2a13e0b 100644
--- a/drivers/md/dm-zoned.c
+++ b/drivers/md/dm-zoned.c
@@ -660,6 +660,7 @@ static int zoned_ctr(struct dm_target *ti, unsigned argc, char **argv)
 	}
 
 	znd->trim = 1;
+	znd->raid5_trim = 0;
 
 	if (argc < 1) {
 		ti->error = "Invalid argument count";
@@ -689,6 +690,8 @@ static int zoned_ctr(struct dm_target *ti, unsigned argc, char **argv)
 			znd->trim = 1;
 		if (!strcasecmp("nodiscard", argv[r]))
 			znd->trim = 0;
+		if (!strcasecmp("raid5_trim", argv[r]))
+			znd->raid5_trim = 1;
 
 		if (!strncasecmp("reserve=", argv[r], 8)) {
 			long long mz_resv;
@@ -2021,7 +2024,7 @@ static void zoned_io_hints(struct dm_target *ti, struct queue_limits *limits)
 		limits->max_discard_sectors = 1 << 30;
 		limits->max_hw_discard_sectors = 1 << 30;
 		limits->discard_zeroes_data = 1;
-		limits->raid_discard_safe = 1;
+		limits->raid_discard_safe = znd->raid5_trim;
 	}
 }
 
diff --git a/drivers/md/dm-zoned.h b/drivers/md/dm-zoned.h
index 8d51ff7..53096b6 100644
--- a/drivers/md/dm-zoned.h
+++ b/drivers/md/dm-zoned.h
@@ -661,7 +661,7 @@ struct zoned {
 	unsigned issue_close_zone:1;
 	unsigned is_empty:1;
 	unsigned trim:1;
-
+	unsigned raid5_trim:1;
 };
 
 /**
diff --git a/drivers/md/raid5.c b/drivers/md/raid5.c
index 8efb7f1..1ab8aa9 100644
--- a/drivers/md/raid5.c
+++ b/drivers/md/raid5.c
@@ -7003,19 +7003,28 @@ static int run(struct mddev *mddev)
 						limits.discard_zeroes_data)
 				discard_supported = false;
 
+			if (!bdev_discard_raid_safe(rdev->bdev)) {
+				if (discard_supported) {
+					pr_info("md/raid456: No discard: %s.\n",
+						"!RAID SAFE");
+					pr_info("Set raid5_trim on ZDM.\n");
+				}
+				discard_supported = false;
+			}
+
 			/* Unfortunately, discard_zeroes_data is not currently
 			 * a guarantee - just a hint.  So we only allow DISCARD
 			 * if the sysadmin has confirmed that only safe devices
 			 * are in use by setting a module parameter.
 			 */
-			if (!devices_handle_discard_safely &&
-			    !bdev_discard_raid_safe(rdev->bdev)) {
+			if (!devices_handle_discard_safely) {
 				if (discard_supported) {
 					pr_info("md/raid456: discard support disabled due to uncertainty.\n");
 					pr_info("Set raid456.devices_handle_discard_safely=Y to override.\n");
 				}
 				discard_supported = false;
 			}
+
 		}
 
 		if (discard_supported &&
diff --git a/include/linux/blkdev.h b/include/linux/blkdev.h
index abbf4f5..b603acf 100644
--- a/include/linux/blkdev.h
+++ b/include/linux/blkdev.h
@@ -1316,9 +1316,17 @@ static inline unsigned int bdev_discard_zeroes_data(struct block_device *bdev)
 	return queue_discard_zeroes_data(bdev_get_queue(bdev));
 }
 
+static inline unsigned int queue_raid_discard_safe(struct request_queue *q)
+{
+	if (queue_discard_zeroes_data(q) && q->limits.raid_discard_safe)
+		return 1;
+
+	return 0;
+}
+
 static inline unsigned int bdev_discard_raid_safe(struct block_device *bdev)
 {
-	return bdev_get_queue(bdev)->limits.raid_discard_safe;
+	return queue_raid_discard_safe(bdev_get_queue(bdev));
 }
 
 static inline unsigned int bdev_write_same(struct block_device *bdev)
-- 
2.7.0

