From d0c73afe9656c02c22766da71fdc62798480b6c3 Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun@tancheff.com>
Date: Wed, 2 Mar 2016 23:29:02 -0600
Subject: [PATCH 05/10] Add ata pass-through path for ZAC commands.

The current generation of HBA SAS adapters support connecting SATA
drives and perform SCSI<->ATA translations in hardware.
Unfortunately the ZBC commands are not being translate (yet).

Currently users of SAS controllers can only send ZAC commands via
ata pass-through.

This method overloads the meaning of REQ_PRIO to direct ZBC commands
to follow the ZAC path.
Note also that this approach expects the initiator to deal with the
little endian result due to bypassing the normal translation layers.

Signed-off-by: Shaun Tancheff <shaun.tancheff@seagate.com>
---
 block/ioctl.c     |  14 +++--
 drivers/scsi/sd.c | 160 +++++++++++++++++++++++++++++++++++++-----------------
 2 files changed, 119 insertions(+), 55 deletions(-)

diff --git a/block/ioctl.c b/block/ioctl.c
index 65d19e4..fc25c7f 100644
--- a/block/ioctl.c
+++ b/block/ioctl.c
@@ -291,9 +291,13 @@ static int blk_zoned_report_ioctl(struct block_device *bdev, fmode_t mode,
 		}
 	}
 	opt = zone_iodata->data.in.report_option & 0x7F;
-	error = blkdev_issue_zone_report(bdev,
-			zone_iodata->data.in.zone_locator_lba, GFP_KERNEL,
-			zone_iodata, alloc_size, bi_rw);
+	if (zone_iodata->data.in.report_option & ZOPT_USE_ATA_PASS)
+		bi_rw = REQ_PRIO;
+
+	error = blkdev_issue_zone_report(bdev, bi_rw,
+			zone_iodata->data.in.zone_locator_lba,
+			zone_iodata, alloc_size, GFP_KERNEL);
+
 	if (error)
 		goto report_zones_out;
 
@@ -314,6 +318,7 @@ static int blk_zoned_action_ioctl(struct block_device *bdev, fmode_t mode,
 		return -EBADF;
 
 	if (arg & 1) {
+		bi_rw = REQ_PRIO;
 		if (arg != ~0ul)
 			arg &= ~1ul; /* ~1 :: 0xFF...FE */
 	} else {
@@ -332,8 +337,7 @@ static int blk_zoned_action_ioctl(struct block_device *bdev, fmode_t mode,
 		pr_err("%s: Unknown action: %u", __func__, cmd);
 		WARN_ON(1);
 	}
-
-	return blkdev_issue_zone_action(bdev, arg, GFP_KERNEL, bi_rw);
+	return blkdev_issue_zone_action(bdev, bi_rw, arg, GFP_KERNEL);
 }
 
 static int put_ushort(unsigned long arg, unsigned short val)
diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index 88d542b..6ea5977 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -7,20 +7,20 @@
  *              Subsequent revisions: Eric Youngdale
  *	Modification history:
  *       - Drew Eckhardt <drew@colorado.edu> original
- *       - Eric Youngdale <eric@andante.org> add scatter-gather, multiple 
+ *       - Eric Youngdale <eric@andante.org> add scatter-gather, multiple
  *         outstanding request, and other enhancements.
  *         Support loadable low-level scsi drivers.
- *       - Jirka Hanika <geo@ff.cuni.cz> support more scsi disks using 
+ *       - Jirka Hanika <geo@ff.cuni.cz> support more scsi disks using
  *         eight major numbers.
  *       - Richard Gooch <rgooch@atnf.csiro.au> support devfs.
- *	 - Torben Mathiasen <tmm@image.dk> Resource allocation fixes in 
+ *	 - Torben Mathiasen <tmm@image.dk> Resource allocation fixes in
  *	   sd_init and cleanups.
  *	 - Alex Davis <letmein@erols.com> Fix problem where partition info
- *	   not being read in sd_open. Fix problem where removable media 
+ *	   not being read in sd_open. Fix problem where removable media
  *	   could be ejected after sd_open.
  *	 - Douglas Gilbert <dgilbert@interlog.com> cleanup for lk 2.5.x
- *	 - Badari Pulavarty <pbadari@us.ibm.com>, Matthew Wilcox 
- *	   <willy@debian.org>, Kurt Garloff <garloff@suse.de>: 
+ *	 - Badari Pulavarty <pbadari@us.ibm.com>, Matthew Wilcox
+ *	   <willy@debian.org>, Kurt Garloff <garloff@suse.de>:
  *	   Support 32k/1M disks.
  *
  *	Logging policy (needs CONFIG_SCSI_LOGGING defined):
@@ -29,7 +29,7 @@
  *	 - entering sd_ioctl: SCSI_LOG_IOCTL level 1
  *	 - entering other commands: SCSI_LOG_HLQUEUE level 3
  *	Note: when the logging level is set by the user, it must be greater
- *	than the level indicated above to trigger output.	
+ *	than the level indicated above to trigger output.
  */
 
 #include <linux/module.h>
@@ -53,6 +53,7 @@
 #include <linux/pm_runtime.h>
 #include <linux/pr.h>
 #include <linux/blkzoned_api.h>
+#include <linux/ata.h>
 #include <asm/uaccess.h>
 #include <asm/unaligned.h>
 
@@ -100,6 +101,16 @@ MODULE_ALIAS_SCSI_DEVICE(TYPE_RBC);
 #define SD_MINORS	0
 #endif
 
+static inline void _lba_to_cmd_ata(u8 *cmd, u64 _lba)
+{
+	cmd[1] =  _lba	      & 0xff;
+	cmd[3] = (_lba >>  8) & 0xff;
+	cmd[5] = (_lba >> 16) & 0xff;
+	cmd[0] = (_lba >> 24) & 0xff;
+	cmd[2] = (_lba >> 32) & 0xff;
+	cmd[4] = (_lba >> 40) & 0xff;
+}
+
 static void sd_config_discard(struct scsi_disk *, unsigned int);
 static void sd_config_write_same(struct scsi_disk *);
 static int  sd_revalidate_disk(struct gendisk *);
@@ -540,16 +551,16 @@ static struct kobject *sd_default_probe(dev_t devt, int *partno, void *data)
 
 /*
  * Device no to disk mapping:
- * 
+ *
  *       major         disc2     disc  p1
  *   |............|.............|....|....| <- dev_t
  *    31        20 19          8 7  4 3  0
- * 
+ *
  * Inside a major, we have 16k disks, however mapped non-
  * contiguously. The first 16 disks are for major0, the next
- * ones with major1, ... Disk 256 is for major0 again, disk 272 
- * for major1, ... 
- * As we stay compatible with our numbering scheme, we can reuse 
+ * ones with major1, ... Disk 256 is for major0 again, disk 272
+ * for major1, ...
+ * As we stay compatible with our numbering scheme, we can reuse
  * the well-know SCSI majors 8, 65--71, 136--143.
  */
 static int sd_major(int major_idx)
@@ -956,7 +967,7 @@ static int sd_setup_read_write_cmnd(struct scsi_cmnd *SCpnt)
 
 	if (sdp->changed) {
 		/*
-		 * quietly refuse to do anything to a changed disc until 
+		 * quietly refuse to do anything to a changed disc until
 		 * the changed bit has been reset
 		 */
 		/* printk("SCSI disk has been changed or is not present. Prohibiting further I/O.\n"); */
@@ -1182,7 +1193,7 @@ static int sd_setup_zoned_cmnd(struct scsi_cmnd *cmd)
 			src = kmap_atomic(rq->bio->bi_io_vec->bv_page);
 			conv = src + rq->bio->bi_io_vec->bv_offset;
 			conv->descriptor_count = cpu_to_be32(1);
-			conv->same_field = 1; /* ZS_ALL_SAME */
+			conv->same_field = ZS_ALL_SAME;
 			conv->maximum_lba = cpu_to_be64(disk->part0.nr_sects);
 			kunmap_atomic(src);
 			goto out;
@@ -1199,11 +1210,26 @@ static int sd_setup_zoned_cmnd(struct scsi_cmnd *cmd)
 			goto out;
 		}
 
-		cmd->cmnd[0] = ZBC_REPORT_ZONES;
-		cmd->cmnd[1] = ZBC_REPORT_OPT;
-		put_unaligned_be64(sector, &cmd->cmnd[2]);
-		put_unaligned_be32(nr_bytes, &cmd->cmnd[10]);
-		cmd->cmnd[14] = 0;
+		if (rq->cmd_flags & REQ_PRIO) {
+			cmd->cmnd[0] = ATA_16;
+			cmd->cmnd[1] = (0x6 << 1) | 1;
+			cmd->cmnd[2] = 0x0e;
+			cmd->cmnd[3] = ZBC_REPORT_OPT;
+			cmd->cmnd[4] = ATA_SUBCMD_REP_ZONES;
+			cmd->cmnd[5] = ((nr_bytes / 512) >> 8) & 0xff;
+			cmd->cmnd[6] = (nr_bytes / 512) & 0xff;
+
+			_lba_to_cmd_ata(&cmd->cmnd[7], sector);
+
+			cmd->cmnd[13] = 1 << 6;
+			cmd->cmnd[14] = ATA_CMD_ZONE_MAN_IN;
+		} else {
+			cmd->cmnd[0] = ZBC_REPORT_ZONES;
+			cmd->cmnd[1] = ZBC_REPORT_OPT;
+			put_unaligned_be64(sector, &cmd->cmnd[2]);
+			put_unaligned_be32(nr_bytes, &cmd->cmnd[10]);
+			cmd->cmnd[14] = 0;
+		}
 		cmd->sc_data_direction = DMA_FROM_DEVICE;
 		cmd->sdb.length = nr_bytes;
 		cmd->transfersize = sdp->sector_size;
@@ -1225,11 +1251,25 @@ static int sd_setup_zoned_cmnd(struct scsi_cmnd *cmd)
 		sector = 0;
 	}
 
-	cmd->cmnd[0] = ZBC_ACTION;
-	cmd->cmnd[1] = (rq->cmd_flags & REQ_OPEN_ZONE)
-		     ? ZBC_SA_ZONE_OPEN : ZBC_SA_ZONE_CLOSE;
-	cmd->cmnd[14] = allbit;
-	put_unaligned_be64(sector, &cmd->cmnd[2]);
+	if (rq->cmd_flags & REQ_PRIO) {
+		cmd->cmnd[0] = ATA_16;
+		cmd->cmnd[1] = (3 << 1) | 1;
+		cmd->cmnd[3] = allbit;
+		cmd->cmnd[4] = ATA_SUBCMD_OPEN_ZONES;
+		if (rq->cmd_flags & REQ_CLOSE_ZONE)
+			cmd->cmnd[4] = ATA_SUBCMD_CLOSE_ZONES;
+		if (rq->cmd_flags & REQ_DISCARD)
+			cmd->cmnd[4] = ATA_SUBCMD_RESET_WP;
+		_lba_to_cmd_ata(&cmd->cmnd[7], sector);
+		cmd->cmnd[13] = 1 << 6;
+		cmd->cmnd[14] = ATA_CMD_ZONE_MAN_OUT;
+	} else {
+		cmd->cmnd[0] = ZBC_ACTION;
+		cmd->cmnd[1] = (rq->cmd_flags & REQ_OPEN_ZONE)
+			     ? ZBC_SA_ZONE_OPEN : ZBC_SA_ZONE_CLOSE;
+		cmd->cmnd[14] = allbit;
+		put_unaligned_be64(sector, &cmd->cmnd[2]);
+	}
 	cmd->sc_data_direction = DMA_NONE;
 	ret = BLKPREP_OK;
  out:
@@ -1240,23 +1280,23 @@ static int sd_init_command(struct scsi_cmnd *cmd)
 {
 	struct request *rq = cmd->request;
 
+	if ((rq->cmd_flags & REQ_ZONED_FLAGS) ||
+	   ((rq->cmd_flags & REQ_PRIO) && (rq->cmd_flags & REQ_DISCARD)))
+		return sd_setup_zoned_cmnd(cmd);
 	if (rq->cmd_flags & REQ_DISCARD)
 		return sd_setup_discard_cmnd(cmd);
-	else if (rq->cmd_flags & REQ_WRITE_SAME)
+	if (rq->cmd_flags & REQ_WRITE_SAME)
 		return sd_setup_write_same_cmnd(cmd);
-	else if (rq->cmd_flags & REQ_FLUSH)
+	if (rq->cmd_flags & REQ_FLUSH)
 		return sd_setup_flush_cmnd(cmd);
-	else if (rq->cmd_flags & REQ_ZONED_FLAGS)
-		return sd_setup_zoned_cmnd(cmd);
-	else
-		return sd_setup_read_write_cmnd(cmd);
+	return sd_setup_read_write_cmnd(cmd);
 }
 
 static void sd_uninit_command(struct scsi_cmnd *SCpnt)
 {
 	struct request *rq = SCpnt->request;
 
-	if (rq->cmd_flags & REQ_DISCARD)
+	if ((rq->cmd_flags & REQ_DISCARD) && !(rq->cmd_flags & REQ_PRIO))
 		__free_page(rq->completion_data);
 
 	if (SCpnt->cmnd != rq->cmd) {
@@ -1271,7 +1311,7 @@ static void sd_uninit_command(struct scsi_cmnd *SCpnt)
  *	@inode: only i_rdev member may be used
  *	@filp: only f_mode and f_flags may be used
  *
- *	Returns 0 if successful. Returns a negated errno value in case 
+ *	Returns 0 if successful. Returns a negated errno value in case
  *	of error.
  *
  *	Note: This can be called from a user context (e.g. fsck(1) )
@@ -1339,7 +1379,7 @@ static int sd_open(struct block_device *bdev, fmode_t mode)
 
 error_out:
 	scsi_disk_put(sdkp);
-	return retval;	
+	return retval;
 }
 
 /**
@@ -1348,7 +1388,7 @@ error_out:
  *	@inode: only i_rdev member may be used
  *	@filp: only f_mode and f_flags may be used
  *
- *	Returns 0. 
+ *	Returns 0.
  *
  *	Note: may block (uninterruptible) if error recovery is underway
  *	on this disk.
@@ -1386,7 +1426,7 @@ static int sd_getgeo(struct block_device *bdev, struct hd_geometry *geo)
         diskinfo[0] = 0x40;	/* 1 << 6 */
        	diskinfo[1] = 0x20;	/* 1 << 5 */
        	diskinfo[2] = sdkp->capacity >> 11;
-	
+
 	/* override with calculated, extended default, or driver values */
 	if (host->hostt->bios_param)
 		host->hostt->bios_param(sdp, bdev, sdkp->capacity, diskinfo);
@@ -1421,7 +1461,7 @@ static int sd_ioctl(struct block_device *bdev, fmode_t mode,
 	struct scsi_device *sdp = sdkp->device;
 	void __user *p = (void __user *)arg;
 	int error;
-    
+
 	SCSI_LOG_IOCTL(1, sd_printk(KERN_INFO, sdkp, "sd_ioctl: disk=%s, "
 				    "cmd=0x%x\n", disk->disk_name, cmd));
 
@@ -1631,9 +1671,9 @@ static void sd_rescan(struct device *dev)
 
 
 #ifdef CONFIG_COMPAT
-/* 
- * This gets directly called from VFS. When the ioctl 
- * is not recognized we go back to the other translation paths. 
+/*
+ * This gets directly called from VFS. When the ioctl
+ * is not recognized we go back to the other translation paths.
  */
 static int sd_compat_ioctl(struct block_device *bdev, fmode_t mode,
 			   unsigned int cmd, unsigned long arg)
@@ -1645,12 +1685,12 @@ static int sd_compat_ioctl(struct block_device *bdev, fmode_t mode,
 			(mode & FMODE_NDELAY) != 0);
 	if (error)
 		return error;
-	       
-	/* 
+
+	/*
 	 * Let the static ioctl translation table take care of it.
 	 */
 	if (!sdev->host->hostt->compat_ioctl)
-		return -ENOIOCTLCMD; 
+		return -ENOIOCTLCMD;
 	return sdev->host->hostt->compat_ioctl(sdev, cmd, (void __user *)arg);
 }
 #endif
@@ -1992,7 +2032,7 @@ sd_spinup_disk(struct scsi_disk *sdkp)
 			if (the_result)
 				sense_valid = scsi_sense_valid(&sshdr);
 			retries++;
-		} while (retries < 3 && 
+		} while (retries < 3 &&
 			 (!scsi_status_is_good(the_result) ||
 			  ((driver_byte(the_result) & DRIVER_SENSE) &&
 			  sense_valid && sshdr.sense_key == UNIT_ATTENTION)));
@@ -2065,7 +2105,7 @@ sd_spinup_disk(struct scsi_disk *sdkp)
 			}
 			break;
 		}
-				
+
 	} while (spintime && time_before_eq(jiffies, spintime_expire));
 
 	if (spintime) {
@@ -2823,7 +2863,7 @@ static void sd_read_block_characteristics(struct scsi_disk *sdkp)
 {
 	unsigned char *buffer;
 	u16 rot;
-	const int vpd_len = 64;
+	const int vpd_len = 512;
 
 	buffer = kmalloc(vpd_len, GFP_KERNEL);
 
@@ -2855,6 +2895,26 @@ static void sd_read_block_characteristics(struct scsi_disk *sdkp)
 		sdkp->lbprz = 1;
 		sdkp->max_unmap_blocks = SD_MAX_WS16_BLOCKS;
 		sd_config_discard(sdkp, SD_LBP_RESET_WP);
+	} else {
+		unsigned char cmd[16] = { 0 };
+
+		cmd[0] = ATA_16;
+		cmd[1] = (4 << 1) | 1;
+		cmd[2] = 0xe;
+		cmd[6] = 0x1;
+		cmd[8] = 0x1;
+		cmd[14] = ATA_CMD_ID_ATA;
+
+		if (scsi_execute_req(sdkp->device, cmd, DMA_FROM_DEVICE, buffer,
+				     vpd_len, NULL, 30 * HZ, 3, NULL))
+			goto out;
+
+		if (ata_drive_zac_ha((u16 *)buffer)) {
+			sdkp->device->zabc = 1;
+			sdkp->lbprz = 1;
+			sdkp->max_unmap_blocks = SD_MAX_WS16_BLOCKS;
+			sd_config_discard(sdkp, SD_LBP_RESET_WP);
+		}
 	}
 
  out:
@@ -3161,13 +3221,13 @@ static void sd_probe_async(void *data, async_cookie_t cookie)
  *	for each scsi device (not just disks) present.
  *	@dev: pointer to device object
  *
- *	Returns 0 if successful (or not interested in this scsi device 
+ *	Returns 0 if successful (or not interested in this scsi device
  *	(e.g. scanner)); 1 when there is an error.
  *
  *	Note: this function is invoked from the scsi mid-level.
- *	This function sets up the mapping between a given 
- *	<host,channel,id,lun> (found in sdp) and new device name 
- *	(e.g. /dev/sda). More precisely it is the block device major 
+ *	This function sets up the mapping between a given
+ *	<host,channel,id,lun> (found in sdp) and new device name
+ *	(e.g. /dev/sda). More precisely it is the block device major
  *	and minor number that is chosen here.
  *
  *	Assume sd_probe is not re-entrant (for time being)
@@ -3313,7 +3373,7 @@ static void scsi_disk_release(struct device *dev)
 {
 	struct scsi_disk *sdkp = to_scsi_disk(dev);
 	struct gendisk *disk = sdkp->disk;
-	
+
 	spin_lock(&sd_index_lock);
 	ida_remove(&sd_index_ida, sdkp->index);
 	spin_unlock(&sd_index_lock);
-- 
2.7.0

