From dc93faab70c2c350c468ba951415f6df012fa1d4 Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun@tancheff.com>
Date: Wed, 2 Mar 2016 22:09:15 -0600
Subject: [PATCH 04/10] Add ioctl to issue new ZBC/ZAC commands via block / bio

Add New ioctl types BLKREPORT, BLKOPENZONE and BLKCLOSEZONE to
issue report zones and open/close zone commands.

Signed-off-by: Shaun Tancheff <shaun.tancheff@seagate.com>
---
 block/ioctl.c                     | 94 +++++++++++++++++++++++++++++++++++++++
 include/uapi/linux/blkzoned_api.h |  4 ++
 include/uapi/linux/fs.h           |  1 +
 3 files changed, 99 insertions(+)

diff --git a/block/ioctl.c b/block/ioctl.c
index 0918aed..65d19e4 100644
--- a/block/ioctl.c
+++ b/block/ioctl.c
@@ -7,6 +7,7 @@
 #include <linux/backing-dev.h>
 #include <linux/fs.h>
 #include <linux/blktrace_api.h>
+#include <linux/blkzoned_api.h>
 #include <linux/pr.h>
 #include <asm/uaccess.h>
 
@@ -249,6 +250,92 @@ static int blk_ioctl_zeroout(struct block_device *bdev, fmode_t mode,
 	return blkdev_issue_zeroout(bdev, start, len, GFP_KERNEL, false);
 }
 
+static int blk_zoned_report_ioctl(struct block_device *bdev, fmode_t mode,
+		void __user *parg)
+{
+	int error = -EFAULT;
+	int gfp = GFP_KERNEL|GFP_DMA;
+	struct bdev_zone_report_io *zone_iodata = NULL;
+	u32 alloc_size = max(PAGE_SIZE, sizeof(*zone_iodata));
+	unsigned long bi_rw = 0;
+	u8 opt = 0;
+
+	if (!(mode & FMODE_READ))
+		return -EBADF;
+
+	zone_iodata = kmalloc(alloc_size, gfp);
+	if (!zone_iodata) {
+		error = -ENOMEM;
+		goto report_zones_out;
+	}
+	if (copy_from_user(zone_iodata, parg, sizeof(*zone_iodata))) {
+		error = -EFAULT;
+		goto report_zones_out;
+	}
+	if (zone_iodata->data.in.return_page_count > alloc_size) {
+		void *tmp;
+
+		alloc_size = zone_iodata->data.in.return_page_count;
+		if (alloc_size < KMALLOC_MAX_SIZE) {
+			tmp = krealloc(zone_iodata, alloc_size, gfp);
+			if (!tmp) {
+				error = -ENOMEM;
+				goto report_zones_out;
+			}
+			zone_iodata = tmp;
+		} else {
+			/* Result requires DMA capable memory */
+			pr_err("Not enough memory available for request.\n");
+			error = -ENOMEM;
+			goto report_zones_out;
+		}
+	}
+	opt = zone_iodata->data.in.report_option & 0x7F;
+	error = blkdev_issue_zone_report(bdev,
+			zone_iodata->data.in.zone_locator_lba, GFP_KERNEL,
+			zone_iodata, alloc_size, bi_rw);
+	if (error)
+		goto report_zones_out;
+
+	if (copy_to_user(parg, zone_iodata, alloc_size))
+		error = -EFAULT;
+
+report_zones_out:
+	kfree(zone_iodata);
+	return error;
+}
+
+static int blk_zoned_action_ioctl(struct block_device *bdev, fmode_t mode,
+				  unsigned cmd, unsigned long arg)
+{
+	unsigned long bi_rw = 0;
+
+	if (!(mode & FMODE_WRITE))
+		return -EBADF;
+
+	if (arg & 1) {
+		if (arg != ~0ul)
+			arg &= ~1ul; /* ~1 :: 0xFF...FE */
+	} else {
+		if (arg == ~1ul)
+			arg = ~0ul;
+	}
+
+	switch (cmd) {
+	case BLKOPENZONE:
+		bi_rw = REQ_OPEN_ZONE;
+		break;
+	case BLKCLOSEZONE:
+		bi_rw = REQ_CLOSE_ZONE;
+		break;
+	default:
+		pr_err("%s: Unknown action: %u", __func__, cmd);
+		WARN_ON(1);
+	}
+
+	return blkdev_issue_zone_action(bdev, arg, GFP_KERNEL, bi_rw);
+}
+
 static int put_ushort(unsigned long arg, unsigned short val)
 {
 	return put_user(val, (unsigned short __user *)arg);
@@ -568,6 +655,13 @@ int blkdev_ioctl(struct block_device *bdev, fmode_t mode, unsigned cmd,
 	case BLKTRACESETUP:
 	case BLKTRACETEARDOWN:
 		return blk_trace_ioctl(bdev, cmd, argp);
+
+	case BLKREPORT:
+		return blk_zoned_report_ioctl(bdev, mode, argp);
+	case BLKOPENZONE:
+	case BLKCLOSEZONE:
+		return blk_zoned_action_ioctl(bdev, mode, cmd, arg);
+
 	case IOC_PR_REGISTER:
 		return blkdev_pr_register(bdev, argp);
 	case IOC_PR_RESERVE:
diff --git a/include/uapi/linux/blkzoned_api.h b/include/uapi/linux/blkzoned_api.h
index cc9a262..e627fc6 100644
--- a/include/uapi/linux/blkzoned_api.h
+++ b/include/uapi/linux/blkzoned_api.h
@@ -213,4 +213,8 @@ struct bdev_zone_report_io {
 } __packed;
 
 
+#define BLKREPORT	_IOWR(0x12, 128, struct bdev_zone_report_io)
+#define BLKOPENZONE	_IO(0x12, 129)
+#define BLKCLOSEZONE	_IO(0x12, 130)
+
 #endif /* _UAPI_BLKZONED_API_H */
diff --git a/include/uapi/linux/fs.h b/include/uapi/linux/fs.h
index f15d980..08948e6 100644
--- a/include/uapi/linux/fs.h
+++ b/include/uapi/linux/fs.h
@@ -152,6 +152,7 @@ struct inodes_stat_t {
 #define BLKSECDISCARD _IO(0x12,125)
 #define BLKROTATIONAL _IO(0x12,126)
 #define BLKZEROOUT _IO(0x12,127)
+/* A jump here: See blkzoned_api.h, Reserving 128,129,130. */
 
 #define BMAP_IOCTL 1		/* obsolete - kept for compatibility */
 #define FIBMAP	   _IO(0x00,1)	/* bmap access */
-- 
2.7.0

