From dccdee953309df6ddfe9de7de907a947db502689 Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun@tancheff.com>
Date: Mon, 16 May 2016 14:22:05 -0500
Subject: [PATCH 66/66] Add support for SCT Write Same

Since the Write Same command was deprecated and moved to
an SCT feature ATA drives have not supported Write Same
in Linux.

On the current SMR drives support is being added to report
TRIM/DISCARD/UNMAP support via Reset WP. However Reset WP
is not available for the conventional zones. Write Same is
the preferred fallback for UNMAP to maintain the
'Discard returns 0s' contract.

Restore Write Same support by translating SCSI Write Same to
SCT Write Same for drives which support it.

Signed-off-by: Shaun Tancheff <shaun.tancheff@seagate.com>
---
 drivers/scsi/sd.c          | 72 +++++++++++++++++++++++++---------------------
 include/scsi/scsi_device.h |  1 +
 2 files changed, 40 insertions(+), 33 deletions(-)

diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index e09c28b..ecfc2b5 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -691,12 +691,16 @@ static void sd_config_discard(struct scsi_disk *sdkp, unsigned int mode)
 
 	case SD_ZBC_RESET_WP:
 		q->limits.discard_zeroes_data = 1;
+		q->limits.discard_alignment = 
 		q->limits.discard_granularity =
 			sd_zbc_discard_granularity(sdkp);
 
 		max_blocks = min_not_zero(sdkp->max_unmap_blocks,
 					  q->limits.discard_granularity >>
 						ilog2(logical_block_size));
+
+		if (sdkp->device->sct_write_same)
+			sdkp->max_ws_blocks = max_blocks;
 		break;
 
 	case SD_LBP_ZERO:
@@ -847,7 +851,7 @@ static int sd_setup_discard_cmnd(struct scsi_cmnd *cmd)
 				cmd->cmnd[6] = 1;
 				cmd->cmnd[8] = ATA_CMD_STANDBYNOW1;
 				cmd->cmnd[13] = ATA_CMD_STANDBYNOW1;
-				cmd->cmnd[14] = ATA_CMD_WRITE_LOG_DMA_EXT;
+				cmd->cmnd[14] = ATA_CMD_WRITE_LOG_EXT;
 				put_unaligned_le16(0x0002, &sctpg[0]);
 				put_unaligned_le16(0x0101, &sctpg[1]);
 				put_unaligned_le64(sector, &sctpg[2]);
@@ -882,10 +886,24 @@ static int sd_setup_discard_cmnd(struct scsi_cmnd *cmd)
 		zone->wp = zone->start;
 		spin_unlock_irqrestore(&zone->lock, flags);
 #endif
-		cmd->cmd_len = 16;
-		cmd->cmnd[0] = ZBC_OUT;
-		cmd->cmnd[1] = ZO_RESET_WRITE_POINTER;
-		put_unaligned_be64(sector, &cmd->cmnd[2]);
+
+		if (sdp->use_ata16_for_zbc) {
+			cmd->cmnd[0] = ATA_16;
+			cmd->cmnd[1] = (3 << 1) | 1;
+			cmd->cmnd[4] =
+				ATA_SUBCMD_ZAC_MGMT_OUT_RESET_WRITE_POINTER;
+			if (sector == ~0ul || sector == ~1ul)
+				cmd->cmnd[3] = 0x1;
+			else
+				_lba_to_cmd_ata(&cmd->cmnd[7], sector);
+			cmd->cmnd[13] = 1 << 6;
+			cmd->cmnd[14] = ATA_CMD_ZAC_MGMT_OUT;
+		} else {
+			cmd->cmd_len = 16;
+			cmd->cmnd[0] = ZBC_OUT;
+			cmd->cmnd[1] = ZO_RESET_WRITE_POINTER;
+			put_unaligned_be64(sector, &cmd->cmnd[2]);
+		}
 		/* Reset Write Pointer doesn't have a payload */
 		len = 0;
 		cmd->sc_data_direction = DMA_NONE;
@@ -3001,6 +3019,7 @@ static void sd_read_block_limits(struct scsi_disk *sdkp)
  */
 static void sd_read_block_characteristics(struct scsi_disk *sdkp)
 {
+	struct scsi_device *sdev = sdkp->device;
 	unsigned char *buffer;
 	u16 rot;
 	const int vpd_len = 512;
@@ -3020,21 +3039,23 @@ static void sd_read_block_characteristics(struct scsi_disk *sdkp)
 	}
 
 	sdkp->zoned = (buffer[8] >> 4) & 3;
-	if (sdkp->zoned != 1) {
-		unsigned char cmd[16] = { 0 };
 
-		cmd[0] = ATA_16;
-		cmd[1] = (4 << 1) | 1;
-		cmd[2] = 0xe;
-		cmd[6] = 0x1;
-		cmd[8] = 0x1;
-		cmd[14] = ATA_CMD_ID_ATA;
+	if (scsi_get_vpd_page(sdev, 0x89, buffer, SD_BUF_SIZE))
+		goto out;
 
-		if (scsi_execute_req(sdkp->device, cmd, DMA_FROM_DEVICE, buffer,
-				     vpd_len, NULL, 30 * HZ, 3, NULL))
-			goto out;
-		if (ata_id_zoned_cap((u16 *)buffer) == 0x01)
-			sdkp->zoned = 1;
+	/* buf size is 512, ata id page (512 bytes) starts at offset 60 */
+	if (ata_id_sct_write_same((u16 *)&buffer[60])) {
+		sdev->sct_write_same = 1;
+		sdkp->max_ws_blocks = SD_MAX_WS16_BLOCKS;
+	}
+
+	if (sdkp->zoned != 1) {
+		sdkp->zoned = ata_id_zoned_cap((u16 *)&buffer[60]);
+		if (sdkp->zoned == 1) {
+			sdev->use_ata16_for_zbc = 1;
+			sd_printk(KERN_WARNING, sdkp,
+				"ATA 16 for ZBC*\n");
+		}
 	}
 
  out:
@@ -3115,20 +3136,6 @@ static int sd_try_extended_inquiry(struct scsi_device *sdp)
 	return 0;
 }
 
-static void sd_read_sct_write_same(struct scsi_disk *sdkp,
-				   unsigned char *buffer)
-{
-	struct scsi_device *sdev = sdkp->device;
-
-	/* buf size is 512, page is 60 + 512, we need page 206 */
-	if (!scsi_get_vpd_page(sdev, 0x89, buffer, SD_BUF_SIZE)) {
-		if (ata_id_sct_write_same((u16 *)&buffer[60])) {
-			sdev->sct_write_same = 1;
-			sdkp->max_ws_blocks = SD_MAX_WS16_BLOCKS;
-		}
-	}
-}
-
 /**
  *	sd_revalidate_disk - called the first time a new disk is seen,
  *	performs disk spin up, read_capacity, etc.
@@ -3177,7 +3184,6 @@ static int sd_revalidate_disk(struct gendisk *disk)
 		sd_read_cache_type(sdkp, buffer);
 		sd_read_app_tag_own(sdkp, buffer);
 		sd_read_write_same(sdkp, buffer);
-		sd_read_sct_write_same(sdkp, buffer);
 	}
 
 	sdkp->first_scan = 0;
diff --git a/include/scsi/scsi_device.h b/include/scsi/scsi_device.h
index 20ef6f3..6b683e1 100644
--- a/include/scsi/scsi_device.h
+++ b/include/scsi/scsi_device.h
@@ -150,6 +150,7 @@ struct scsi_device {
 	unsigned no_report_opcodes:1;	/* no REPORT SUPPORTED OPERATION CODES */
 	unsigned no_write_same:1;	/* no WRITE SAME command */
 	unsigned sct_write_same:1;	/* Has WRITE SAME via SCT Command */
+	unsigned use_ata16_for_zbc:1;	/* HBA blocks ZBC -> ZAC use ata16 */
 	unsigned use_16_for_rw:1; /* Use read/write(16) over read/write(10) */
 	unsigned skip_ms_page_8:1;	/* do not use MODE SENSE page 0x08 */
 	unsigned skip_ms_page_3f:1;	/* do not use MODE SENSE page 0x3f */
-- 
2.8.1

