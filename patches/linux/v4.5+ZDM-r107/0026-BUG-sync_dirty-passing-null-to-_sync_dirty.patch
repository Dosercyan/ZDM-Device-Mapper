From 5fea5c0539db65bed14aafc5af6ed5e190f15540 Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun@tancheff.com>
Date: Sat, 19 Mar 2016 01:22:09 -0500
Subject: [PATCH 26/27] BUG: sync_dirty() passing null to _sync_dirty()

If a very large number of blocks need to be sync'd to disk
_sync_diry() will indicate that it needs to be called a
second time. The contents of 'drop' are expected to be 0
in the second call. However 'drop' was changed to a pointer
and setting 'drop' to 0 now becomes and unchecked for NULL
dereference in _sync_dirty().

The whole scheme was done to indicate if DO_FLUSH needs
to be asserted. Unwind passing drop as reference it is not
needed. _sync_dirty() should simply assert DO_FLUSH as
needed and the whole ugly by-reference calling goes away.

Signed-off-by: Shaun Tancheff <shaun.tancheff@seagate.com>
---
 block/blk-lib.c                   | 12 ++++++++++++
 block/ioctl.c                     | 27 +++++++++++++++++----------
 drivers/md/dm-zoned.h             |  1 +
 drivers/md/libzoned.c             | 30 ++++++++++++++++--------------
 drivers/scsi/sd.c                 | 35 +++++++++++++----------------------
 include/uapi/linux/blkzoned_api.h |  1 +
 include/uapi/linux/fs.h           |  2 +-
 7 files changed, 61 insertions(+), 47 deletions(-)

diff --git a/block/blk-lib.c b/block/blk-lib.c
index a700ed6..6c05a71 100644
--- a/block/blk-lib.c
+++ b/block/blk-lib.c
@@ -451,6 +451,18 @@ int blkdev_issue_zone_action(struct block_device *bdev, unsigned long bi_rw,
 	bio->bi_vcnt = 0;
 	bio->bi_iter.bi_size = 0;
 
+	/*
+	 * Since bi_size is zero the partion offset (if any) will
+	 * not get tacked on by blk_partition_remap(bio);
+	 * Do we want that to happen?
+	 */
+	if (bdev != bdev->bd_contains) {
+		struct hd_struct *p = bdev->bd_part;
+
+		bio->bi_iter.bi_sector += p->start_sect;
+		bio->bi_bdev = bdev->bd_contains;
+	}
+
 	atomic_inc(&bb.done);
 	submit_bio(REQ_WRITE | bi_rw, bio);
 
diff --git a/block/ioctl.c b/block/ioctl.c
index 04760ab..4e60590 100644
--- a/block/ioctl.c
+++ b/block/ioctl.c
@@ -238,7 +238,7 @@ static int blk_zoned_report_ioctl(struct block_device *bdev, fmode_t mode,
 	}
 	opt = zone_iodata->data.in.report_option & 0x7F;
 	if (zone_iodata->data.in.report_option & ZOPT_USE_ATA_PASS)
-		bi_rw = REQ_PRIO;
+		bi_rw |= REQ_META;
 
 	error = blkdev_issue_zone_report(bdev, bi_rw,
 			zone_iodata->data.in.zone_locator_lba, opt,
@@ -275,7 +275,7 @@ static int blk_zoned_action_ioctl(struct block_device *bdev, fmode_t mode,
 	 *     device....
 	 */
 	if (arg & 1) {
-		bi_rw = REQ_PRIO;
+		bi_rw |= REQ_META;
 		if (arg != ~0ul)
 			arg &= ~1ul; /* ~1 :: 0xFF...FE */
 	} else {
@@ -283,18 +283,27 @@ static int blk_zoned_action_ioctl(struct block_device *bdev, fmode_t mode,
 			arg = ~0ul;
 	}
 
+	/*
+	 * When acting on *all* zones we explicitly disallow using a partition.
+	 */
+	if (arg == ~0ul && bdev != bdev->bd_contains) {
+		pr_err("%s: All zone operations disallowed on this device\n",
+			__func__);
+		return -EFAULT;
+	}
+
 	switch (cmd) {
 	case BLKOPENZONE:
-		bi_rw = REQ_OPEN_ZONE;
+		bi_rw |= REQ_OPEN_ZONE;
 		break;
 	case BLKCLOSEZONE:
-		bi_rw = REQ_CLOSE_ZONE;
+		bi_rw |= REQ_CLOSE_ZONE;
 		break;
-	case BLKDISCARD:
-		bi_rw = REQ_DISCARD;
+	case BLKRESETZONE:
+		bi_rw |= REQ_DISCARD;
 		break;
 	default:
-		pr_err("%s: Unknown action: %u", __func__, cmd);
+		pr_err("%s: Unknown action: %u\n", __func__, cmd);
 		WARN_ON(1);
 	}
 	return blkdev_issue_zone_action(bdev, bi_rw, arg, GFP_KERNEL);
@@ -315,9 +324,6 @@ static int blk_ioctl_discard(struct block_device *bdev, fmode_t mode,
 	start = range[0];
 	len = range[1];
 
-	if (start & 3 && len == (1 << 29))
-		return blk_zoned_action_ioctl(bdev, mode, BLKDISCARD, start);
-
 	if (start & 511)
 		return -EINVAL;
 	if (len & 511)
@@ -710,6 +716,7 @@ int blkdev_ioctl(struct block_device *bdev, fmode_t mode, unsigned cmd,
 		return blk_zoned_report_ioctl(bdev, mode, argp);
 	case BLKOPENZONE:
 	case BLKCLOSEZONE:
+	case BLKRESETZONE:
 		return blk_zoned_action_ioctl(bdev, mode, cmd, arg);
 	case BLKDAXGET:
 		return put_int(arg, !!(bdev->bd_inode->i_flags & S_DAX));
diff --git a/drivers/md/dm-zoned.h b/drivers/md/dm-zoned.h
index 67f8190..75eb82e 100644
--- a/drivers/md/dm-zoned.h
+++ b/drivers/md/dm-zoned.h
@@ -713,3 +713,4 @@ struct zdm_ioc_status {
 #endif
 
 #endif /* _DM_ZONED_H */
+
diff --git a/drivers/md/libzoned.c b/drivers/md/libzoned.c
index 515c3e2..b7b22fe 100644
--- a/drivers/md/libzoned.c
+++ b/drivers/md/libzoned.c
@@ -12,7 +12,7 @@
  * warranty of any kind, whether express or implied.
  */
 
-#define BUILD_NO		107
+#define BUILD_NO		106
 
 #define EXTRA_DEBUG		0
 #define ENABLE_PG_FREE_VIA_LAZY	1
@@ -83,7 +83,7 @@ static void meta_work_task(struct work_struct *work);
 static u64 mcache_greatest_gen(struct zoned *, int, u64 *, u64 *);
 static u64 mcache_find_gen(struct zoned *, u64 base, int, u64 *out);
 static int find_superblock(struct zoned *znd, int use_wq, int do_init);
-static int sync_mapped_pages(struct zoned *znd, int sync, int drop);
+static int sync_mapped_pages(struct zoned *znd, int sync, int *drop);
 static int unused_phy(struct zoned *znd, u64 lba, u64 orig_s, gfp_t gfp);
 static struct io_4k_block *get_io_vcache(struct zoned *znd, gfp_t gfp);
 static int put_io_vcache(struct zoned *znd, struct io_4k_block *cache);
@@ -3170,13 +3170,15 @@ static int do_sync_metadata(struct zoned *znd, int sync, int drop)
 	if (want_flush)
 		set_bit(DO_FLUSH, &znd->flags);
 
-	/* if drop is non-zero, DO_FLUSH may be set on return */
-	err = sync_mapped_pages(znd, sync, drop);
+	err = sync_mapped_pages(znd, sync, &drop);
 	if (err) {
 		Z_ERR(znd, "Uh oh: sync_mapped_pages -> %d", err);
 		goto out;
 	}
 
+	if (drop)
+		set_bit(DO_FLUSH, &znd->flags);
+
 	/*
 	 * If we are lucky then this sync will get us to a 'clean'
 	 * state and the follow on bdev flush is redunant and skipped
@@ -6470,15 +6472,17 @@ out_queued:
  * @znd: ZDM instance
  * @bit_type: MAP blocks then CRC blocks.
  * @sync: If true write dirty blocks to disk
- * @drop: Number of ZLT blocks to free.
+ * @_drop: IN: Number of ZLT blocks to free.
+ *        OUT: Number of (clean) blocks removed tha are not FLUSH flagged.
  *
  * Return: 0 on success or -errno value
  */
-static int _sync_dirty(struct zoned *znd, int bit_type, int sync, int drop)
+static int _sync_dirty(struct zoned *znd, int bit_type, int sync, int *_drop)
 {
 	int err = 0;
 	int entries = 0;
 	int want_flush = 0;
+	int drop = *_drop;
 	struct map_pg *expg = NULL;
 	struct map_pg *_tpg;
 	struct map_pg **wset = NULL;
@@ -6586,8 +6590,7 @@ writeback:
 	}
 
 out:
-	if (want_flush)
-		set_bit(DO_FLUSH, &znd->flags);
+	*_drop = want_flush;
 	if (!list_empty(&droplist))
 		lazy_pool_splice(znd, &droplist);
 
@@ -6602,11 +6605,11 @@ out:
  * @znd: ZDM instance
  * @bit_type: MAP blocks then CRC blocks.
  * @sync: Write dirty blocks
- * @drop: IN: # of pages to free.
+ * @drop: In # of pages to free. Out # freed.
  *
  * Return: 0 on success or -errno value
  */
-static int sync_dirty(struct zoned *znd, int bit_type, int sync, int drop)
+static int sync_dirty(struct zoned *znd, int bit_type, int sync, int *drop)
 {
 	int err;
 
@@ -6631,10 +6634,10 @@ static int sync_dirty(struct zoned *znd, int bit_type, int sync, int drop)
  *
  * Return: 0 on success or -errno value
  */
-static int sync_mapped_pages(struct zoned *znd, int sync, int drop)
+static int sync_mapped_pages(struct zoned *znd, int sync, int *drop)
 {
 	int err;
-	int remove = drop ? 1 : 0;
+	int remove = 0;
 
 	err = sync_dirty(znd, IS_LUT, sync, drop);
 
@@ -6642,8 +6645,7 @@ static int sync_mapped_pages(struct zoned *znd, int sync, int drop)
 	if (err < 0)
 		return err;
 
-	/* TBD: purge CRC's on ref-count? */
-	err = sync_dirty(znd, IS_CRC, sync, remove);
+	err = sync_dirty(znd, IS_CRC, sync, &remove);
 
 	return err;
 }
diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index 8b23055..6b711e7 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -697,8 +697,9 @@ static void sd_config_discard(struct scsi_disk *sdkp, unsigned int mode)
 		break;
 
 	case SD_LBP_RESET_WP:
-		max_blocks = min_not_zero(sdkp->max_unmap_blocks,
-					  (u32)SD_MAX_WS16_BLOCKS);
+		max_blocks = (u32)SD_MAX_WS16_BLOCKS;
+		q->limits.discard_alignment = sdkp->physical_block_size;
+		q->limits.discard_granularity = sdkp->physical_block_size;
 		q->limits.discard_zeroes_data = sdkp->lbprz;
 		break;
 
@@ -757,20 +758,6 @@ static int sd_setup_discard_cmnd(struct scsi_cmnd *cmd)
 		len = 24;
 		break;
 
-	case SD_LBP_RESET_WP:
-		cmd->cmd_len = 16;
-		cmd->cmnd[0] = ZBC_ACTION;
-		cmd->cmnd[1] = ZBC_SA_RESET_WP;
-		cmd->cmnd[14] = 0;
-		if (sector == ~0ul) {
-			cmd->cmnd[14] = 1;
-			sector = 0;
-		}
-		put_unaligned_be64(sector, &cmd->cmnd[2]);
-		len = 0;
-		cmd->sc_data_direction = DMA_NONE;
-		break;
-
 	case SD_LBP_WS16:
 		cmd->cmd_len = 16;
 		cmd->cmnd[0] = WRITE_SAME_16;
@@ -1205,14 +1192,14 @@ static int sd_setup_zoned_cmnd(struct scsi_cmnd *cmd)
 		if (ret != BLKPREP_OK)
 			goto out;
 
-		ret = BLKPREP_KILL;
 		cmd = rq->special;
 		if (sdp->changed) {
 			pr_err("SCSI disk has been changed or is not present.");
+			ret = BLKPREP_KILL;
 			goto out;
 		}
 
-		if (rq->cmd_flags & REQ_PRIO) {
+		if (rq->cmd_flags & REQ_META) {
 			cmd->cmnd[0] = ATA_16;
 			cmd->cmnd[1] = (0x6 << 1) | 1;
 			cmd->cmnd[2] = 0x0e;
@@ -1252,7 +1239,7 @@ static int sd_setup_zoned_cmnd(struct scsi_cmnd *cmd)
 		sector = 0;
 	}
 
-	if (rq->cmd_flags & REQ_PRIO) {
+	if (rq->cmd_flags & REQ_META) {
 		cmd->cmnd[0] = ATA_16;
 		cmd->cmnd[1] = (3 << 1) | 1;
 		cmd->cmnd[3] = allbit;
@@ -1274,6 +1261,7 @@ static int sd_setup_zoned_cmnd(struct scsi_cmnd *cmd)
 		cmd->cmnd[14] = allbit;
 		put_unaligned_be64(sector, &cmd->cmnd[2]);
 	}
+	rq->__data_len = 0;
 	cmd->cmd_len = 16;
 	cmd->transfersize = 0;
 	cmd->underflow = 0;
@@ -1287,9 +1275,11 @@ static int sd_setup_zoned_cmnd(struct scsi_cmnd *cmd)
 static int sd_init_command(struct scsi_cmnd *cmd)
 {
 	struct request *rq = cmd->request;
+	struct scsi_device *sdp = cmd->device;
 
-	if ((rq->cmd_flags & REQ_ZONED_FLAGS) ||
-	   ((rq->cmd_flags & REQ_PRIO) && (rq->cmd_flags & REQ_DISCARD)))
+	if (rq->cmd_flags & REQ_ZONED_FLAGS)
+		return sd_setup_zoned_cmnd(cmd);
+	if ((rq->cmd_flags & REQ_DISCARD) && sdp->zabc)
 		return sd_setup_zoned_cmnd(cmd);
 	if (rq->cmd_flags & REQ_DISCARD)
 		return sd_setup_discard_cmnd(cmd);
@@ -1303,8 +1293,9 @@ static int sd_init_command(struct scsi_cmnd *cmd)
 static void sd_uninit_command(struct scsi_cmnd *SCpnt)
 {
 	struct request *rq = SCpnt->request;
+	struct scsi_device *sdp = SCpnt->device;
 
-	if ((rq->cmd_flags & REQ_DISCARD) && !(rq->cmd_flags & REQ_PRIO))
+	if ((rq->cmd_flags & REQ_DISCARD) && !sdp->zabc)
 		__free_page(rq->completion_data);
 
 	if (SCpnt->cmnd != rq->cmd) {
diff --git a/include/uapi/linux/blkzoned_api.h b/include/uapi/linux/blkzoned_api.h
index 06a211d..2007b56 100644
--- a/include/uapi/linux/blkzoned_api.h
+++ b/include/uapi/linux/blkzoned_api.h
@@ -216,5 +216,6 @@ struct bdev_zone_report_io {
 #define BLKREPORT	_IOWR(0x12, 130, struct bdev_zone_report_io)
 #define BLKOPENZONE	_IO(0x12, 131)
 #define BLKCLOSEZONE	_IO(0x12, 132)
+#define BLKRESETZONE	_IO(0x12, 133)
 
 #endif /* _UAPI_BLKZONED_API_H */
diff --git a/include/uapi/linux/fs.h b/include/uapi/linux/fs.h
index 8ae49ca..d62e48c 100644
--- a/include/uapi/linux/fs.h
+++ b/include/uapi/linux/fs.h
@@ -223,7 +223,7 @@ struct fsxattr {
 #define BLKROTATIONAL _IO(0x12,126)
 #define BLKZEROOUT _IO(0x12,127)
 #define BLKDAXGET _IO(0x12,129)
-/* A jump here: See blkzoned_api.h, Reserving 130,131,132. */
+/* A jump here: See blkzoned_api.h, Reserving 130 to 133. */
 
 #define BMAP_IOCTL 1		/* obsolete - kept for compatibility */
 #define FIBMAP	   _IO(0x00,1)	/* bmap access */
-- 
2.7.0

