From 0cdfd7bacf7c868812e238b437b25cdabcce28c6 Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun@tancheff.com>
Date: Mon, 18 Apr 2016 08:06:36 -0500
Subject: [PATCH 92/93] Stream Id: Use PID to seed Stream Id construction.

Depends on:
https://lkml.kernel.org/r/1457107853-8689-1-git-send-email-axboe@fb.com

Use the process id that opened the file and the associated inode's
i_no to seed generation of a fallback streamid when fadvise is
not supplied.

Signed-off-by: Shaun Tancheff <shaun.tancheff@seagate.com>
---
 drivers/md/dm-zdm.c | 12 +++++++++++-
 fs/ext4/file.c      |  1 +
 fs/xfs/xfs_aops.c   |  2 +-
 fs/xfs/xfs_file.c   |  1 +
 include/linux/fs.h  | 10 ++++++++--
 5 files changed, 22 insertions(+), 4 deletions(-)

diff --git a/drivers/md/dm-zdm.c b/drivers/md/dm-zdm.c
index d535f2f..26a7215 100644
--- a/drivers/md/dm-zdm.c
+++ b/drivers/md/dm-zdm.c
@@ -120,8 +120,18 @@ static inline u32 bio_stream(struct bio *bio)
 	 * use this heuristic to try to skip unnecessary co-mingling of data.
 	 */
 
-	if (bio->bi_rw & REQ_META)
+	if (bio->bi_rw & REQ_META) {
 		stream_id = 0xff;
+	} else {
+		unsigned int id = bio_get_streamid(bio);
+
+		/* high 8 bits is hash of PID, low 8 bits is hash of inode# */
+		stream_id = id >> 8;
+		if (stream_id == 0)
+			stream_id++;
+		if (stream_id == 0xff)
+			stream_id--;
+	}
 
 	return stream_id;
 }
diff --git a/fs/ext4/file.c b/fs/ext4/file.c
index fa2208b..d1dbb31 100644
--- a/fs/ext4/file.c
+++ b/fs/ext4/file.c
@@ -334,6 +334,7 @@ static int ext4_file_open(struct inode * inode, struct file * filp)
 	char buf[64], *cp;
 	int ret;
 
+	inode->pid = get_current()->pid;
 	if (unlikely(!(sbi->s_mount_flags & EXT4_MF_MNTDIR_SAMPLED) &&
 		     !(sb->s_flags & MS_RDONLY))) {
 		sbi->s_mount_flags |= EXT4_MF_MNTDIR_SAMPLED;
diff --git a/fs/xfs/xfs_aops.c b/fs/xfs/xfs_aops.c
index 16f61f5..8cf12e1 100644
--- a/fs/xfs/xfs_aops.c
+++ b/fs/xfs/xfs_aops.c
@@ -396,7 +396,7 @@ xfs_submit_ioend_bio(
 	bio->bi_op = REQ_OP_WRITE;
 	if (wbc->sync_mode == WB_SYNC_ALL)
 		bio->bi_rw = WRITE_SYNC;
-        bio_set_streamid(bio, ioend->io_inode->i_streamid);
+        bio_set_streamid(bio, inode_streamid(ioend->io_inode));
 	submit_bio(bio);
 }
 
diff --git a/fs/xfs/xfs_file.c b/fs/xfs/xfs_file.c
index 569938a..deef6ff 100644
--- a/fs/xfs/xfs_file.c
+++ b/fs/xfs/xfs_file.c
@@ -1058,6 +1058,7 @@ xfs_file_open(
 		return -EFBIG;
 	if (XFS_FORCED_SHUTDOWN(XFS_M(inode->i_sb)))
 		return -EIO;
+	inode->pid = get_current()->pid;
 	return 0;
 }
 
diff --git a/include/linux/fs.h b/include/linux/fs.h
index 6a8be8e..30456c9 100644
--- a/include/linux/fs.h
+++ b/include/linux/fs.h
@@ -32,6 +32,7 @@
 #include <linux/workqueue.h>
 #include <linux/percpu-rwsem.h>
 #include <linux/delayed_call.h>
+#include <linux/hash.h>
 
 #include <asm/byteorder.h>
 #include <uapi/linux/fs.h>
@@ -686,15 +687,20 @@ struct inode {
 #if IS_ENABLED(CONFIG_FS_ENCRYPTION)
 	struct fscrypt_info	*i_crypt_info;
 #endif
+	pid_t			pid; /* use PID for fallback streamid */
 
 	void			*i_private; /* fs or device private pointer */
 };
 
 static inline unsigned int inode_streamid(struct inode *inode)
 {
-	if (inode)
-		return inode->i_streamid;
+	if (inode) {
+		if (inode->i_streamid)
+			return inode->i_streamid;
 
+		return ((hash_32(inode->pid, 8) << 8)
+			|hash_32(inode->i_ino, 8));
+	}
 	return 0;
 }
 
-- 
2.8.0.rc3

