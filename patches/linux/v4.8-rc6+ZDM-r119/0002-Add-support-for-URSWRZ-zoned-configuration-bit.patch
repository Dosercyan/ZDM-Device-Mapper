From fd8ff5ed7ac880debdb82f336bcc869612ffcd4e Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun@tancheff.com>
Date: Tue, 13 Sep 2016 14:23:47 -0500
Subject: [PATCH 2/7] Add support for URSWRZ zoned configuration bit

Currently devices are presumed to follow unrestricted reads in that
read failures indicated bad media or partial writes.

Host Managed devices can optional enable a restricted read mode that
returns errors for reads beyond the current zone write pointer or
reads the cross zone boundaries.

This restricted read mode is indicated in the URSWRZ bit of the zoned
capability.

This patch exposes the URSWRZ flag via sysfs.

A proper default (1) is reported for devices that do not support
restricted reads.

Signed-off-by: Shaun Tancheff <shaun.tancheff@seagate.com>
---
 drivers/ata/libata-core.c  | 23 +++++++++++++----------
 drivers/ata/libata-scsi.c  | 15 +++++++--------
 drivers/scsi/sd.c          | 44 +++++++++++++++++++++++++++++++++++++++++---
 include/scsi/scsi_device.h |  1 +
 4 files changed, 62 insertions(+), 21 deletions(-)

diff --git a/drivers/ata/libata-core.c b/drivers/ata/libata-core.c
index 223a770..368bc01 100644
--- a/drivers/ata/libata-core.c
+++ b/drivers/ata/libata-core.c
@@ -2235,20 +2235,17 @@ static void ata_dev_config_zac(struct ata_device *dev)
 	u8 *identify_buf = ap->sector_buf;
 	int log_index = ATA_LOG_SATA_ID_DEV_DATA * 2, i, found = 0;
 	u16 log_pages;
+	bool is_hostaware = ata_id_zoned_cap(dev->id) == 0x01 ? true : false;
 
+	dev->zac_zoned_cap = 1;
 	dev->zac_zones_optimal_open = U32_MAX;
 	dev->zac_zones_optimal_nonseq = U32_MAX;
 	dev->zac_zones_max_open = U32_MAX;
 
 	/*
-	 * Always set the 'ZAC' flag for Host-managed devices.
+	 * Always set the 'ZAC' flag for Host-managed and Host-aware devices.
 	 */
-	if (dev->class == ATA_DEV_ZAC)
-		dev->flags |= ATA_DFLAG_ZAC;
-	else if (ata_id_zoned_cap(dev->id) == 0x01)
-		/*
-		 * Check for host-aware devices.
-		 */
+	if (dev->class == ATA_DEV_ZAC || is_hostaware)
 		dev->flags |= ATA_DFLAG_ZAC;
 
 	if (!(dev->flags & ATA_DFLAG_ZAC))
@@ -2306,9 +2303,15 @@ static void ata_dev_config_zac(struct ata_device *dev)
 	if (!err_mask) {
 		u64 zoned_cap, opt_open, opt_nonseq, max_open;
 
-		zoned_cap = get_unaligned_le64(&identify_buf[8]);
-		if ((zoned_cap >> 63))
-			dev->zac_zoned_cap = (zoned_cap & 1);
+		/*
+		 * Host Aware devices do not set this bit, they are however
+		 * required to support unrestricted reads (defaulted above).
+		 */
+		if (!is_hostaware) {
+			zoned_cap = get_unaligned_le64(&identify_buf[8]);
+			if ((zoned_cap >> 63))
+				dev->zac_zoned_cap = (zoned_cap & 1);
+		}
 		opt_open = get_unaligned_le64(&identify_buf[24]);
 		if ((opt_open >> 63))
 			dev->zac_zones_optimal_open = (u32)opt_open;
diff --git a/drivers/ata/libata-scsi.c b/drivers/ata/libata-scsi.c
index e207b33..690af6c 100644
--- a/drivers/ata/libata-scsi.c
+++ b/drivers/ata/libata-scsi.c
@@ -2355,20 +2355,19 @@ static unsigned int ata_scsiop_inq_b2(struct ata_scsi_args *args, u8 *rbuf)
 
 static unsigned int ata_scsiop_inq_b6(struct ata_scsi_args *args, u8 *rbuf)
 {
+	struct ata_device *dev = args->dev;
+
 	/*
 	 * zbc-r05 SCSI Zoned Block device characteristics VPD page
 	 */
 	rbuf[1] = 0xb6;
 	rbuf[3] = 0x3C;
 
-	/*
-	 * URSWRZ bit is only meaningful for host-managed ZAC drives
-	 */
-	if (args->dev->zac_zoned_cap & 1)
-		rbuf[4] |= 1;
-	put_unaligned_be32(args->dev->zac_zones_optimal_open, &rbuf[8]);
-	put_unaligned_be32(args->dev->zac_zones_optimal_nonseq, &rbuf[12]);
-	put_unaligned_be32(args->dev->zac_zones_max_open, &rbuf[16]);
+	/* URSWRZ bit */
+	rbuf[4] |= dev->zac_zoned_cap & 1;
+	put_unaligned_be32(dev->zac_zones_optimal_open, &rbuf[8]);
+	put_unaligned_be32(dev->zac_zones_optimal_nonseq, &rbuf[12]);
+	put_unaligned_be32(dev->zac_zones_max_open, &rbuf[16]);
 
 	return 0;
 }
diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index 36c5e39..08adc10 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -291,6 +291,16 @@ FUA_show(struct device *dev, struct device_attribute *attr, char *buf)
 static DEVICE_ATTR_RO(FUA);
 
 static ssize_t
+urswrz_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	struct scsi_disk *sdkp = to_scsi_disk(dev);
+
+	return snprintf(buf, 20, "%u\n", sdkp->device->urswrz);
+}
+static DEVICE_ATTR_RO(urswrz);
+
+
+static ssize_t
 protection_type_show(struct device *dev, struct device_attribute *attr,
 		     char *buf)
 {
@@ -483,6 +493,7 @@ static DEVICE_ATTR_RW(max_write_same_blocks);
 static struct attribute *sd_disk_attrs[] = {
 	&dev_attr_cache_type.attr,
 	&dev_attr_FUA.attr,
+	&dev_attr_urswrz.attr,
 	&dev_attr_allow_restart.attr,
 	&dev_attr_manage_start_stop.attr,
 	&dev_attr_protection_type.attr,
@@ -2715,6 +2726,34 @@ static void sd_read_block_limits(struct scsi_disk *sdkp)
 }
 
 /**
+ * sd_read_block_provisioning - Query zoned device VPD page
+ * @disk: disk to query
+ */
+static void sd_read_block_zoned_support(struct scsi_disk *sdkp)
+{
+	unsigned char *buffer = NULL;
+	const int vpd_len = 64;
+
+	/* Default urswrz for non-Host Managed devices */
+	if (sdkp->device->type != TYPE_ZBC)
+		sdkp->device->urswrz = 1;
+
+	/* Don't ask for b6 page if device isn't expected to support it */
+	if (sdkp->zoned != 1 && sdkp->device->type != TYPE_ZBC)
+		goto out;
+
+	buffer = kmalloc(vpd_len, GFP_KERNEL);
+	if (!buffer ||
+	    /* Zoned Block device characteristics VPD */
+	    scsi_get_vpd_page(sdkp->device, 0xb6, buffer, vpd_len))
+		goto out;
+
+	sdkp->device->urswrz = buffer[4] & 1;
+out:
+	kfree(buffer);
+}
+
+/**
  * sd_read_block_characteristics - Query block dev. characteristics
  * @disk: disk to query
  */
@@ -2838,14 +2877,13 @@ static int sd_revalidate_disk(struct gendisk *disk)
 	 * react badly if we do.
 	 */
 	if (sdkp->media_present) {
-		sd_read_capacity(sdkp, buffer);
-
 		if (scsi_device_supports_vpd(sdp)) {
 			sd_read_block_provisioning(sdkp);
 			sd_read_block_limits(sdkp);
 			sd_read_block_characteristics(sdkp);
+			sd_read_block_zoned_support(sdkp);
 		}
-
+		sd_read_capacity(sdkp, buffer);
 		sd_read_write_protect_flag(sdkp, buffer);
 		sd_read_cache_type(sdkp, buffer);
 		sd_read_app_tag_own(sdkp, buffer);
diff --git a/include/scsi/scsi_device.h b/include/scsi/scsi_device.h
index 8a95631..7a4d38a 100644
--- a/include/scsi/scsi_device.h
+++ b/include/scsi/scsi_device.h
@@ -182,6 +182,7 @@ struct scsi_device {
 	unsigned broken_fua:1;		/* Don't set FUA bit */
 	unsigned lun_in_cdb:1;		/* Store LUN bits in CDB[1] */
 	unsigned synchronous_alua:1;	/* Synchronous ALUA commands */
+	unsigned urswrz:1;		/* Unrestricted reads */
 
 	atomic_t disk_events_disable_depth; /* disable depth for disk events */
 
-- 
2.9.3

