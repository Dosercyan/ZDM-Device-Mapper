From 7cc0424b4a30e8330593c37d13347fd5c063d58c Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun@tancheff.com>
Date: Tue, 15 Mar 2016 01:03:37 -0500
Subject: [PATCH 17/23] Add ata pass-through path for ZAC commands.

The current generation of HBA SAS adapters support connecting SATA
drives and perform SCSI<->ATA translations in hardware.
Unfortunately the ZBC commands are not being translate (yet).

Currently users of SAS controllers can only send ZAC commands via
ata pass-through.

This method overloads the meaning of REQ_PRIO to direct ZBC commands
to follow the ZAC path.
Note also that this approach expects the initiator to deal with the
little endian result due to bypassing the normal translation layers.

Signed-off-by: Shaun Tancheff <shaun.tancheff@seagate.com>
---
 block/ioctl.c     |  28 +++++++++++++++
 drivers/scsi/sd.c | 102 +++++++++++++++++++++++++++++++++++++++++++-----------
 2 files changed, 109 insertions(+), 21 deletions(-)

diff --git a/block/ioctl.c b/block/ioctl.c
index 772618e..04760ab 100644
--- a/block/ioctl.c
+++ b/block/ioctl.c
@@ -237,6 +237,8 @@ static int blk_zoned_report_ioctl(struct block_device *bdev, fmode_t mode,
 		}
 	}
 	opt = zone_iodata->data.in.report_option & 0x7F;
+	if (zone_iodata->data.in.report_option & ZOPT_USE_ATA_PASS)
+		bi_rw = REQ_PRIO;
 
 	error = blkdev_issue_zone_report(bdev, bi_rw,
 			zone_iodata->data.in.zone_locator_lba, opt,
@@ -261,6 +263,26 @@ static int blk_zoned_action_ioctl(struct block_device *bdev, fmode_t mode,
 	if (!(mode & FMODE_WRITE))
 		return -EBADF;
 
+	/*
+	 * When the low bit is set force ATA passthrough try to work around
+	 * older SAS HBA controllers that don't support ZBC to ZAC translation.
+	 *
+	 * When the low bit is clear follow the normal path but also correct
+	 * for ~0ul LBA means 'for all lbas'.
+	 *
+	 * NB: We should do extra checking here to see if the user specified
+	 *     the entire block device as opposed to a partition of the
+	 *     device....
+	 */
+	if (arg & 1) {
+		bi_rw = REQ_PRIO;
+		if (arg != ~0ul)
+			arg &= ~1ul; /* ~1 :: 0xFF...FE */
+	} else {
+		if (arg == ~1ul)
+			arg = ~0ul;
+	}
+
 	switch (cmd) {
 	case BLKOPENZONE:
 		bi_rw = REQ_OPEN_ZONE;
@@ -268,6 +290,9 @@ static int blk_zoned_action_ioctl(struct block_device *bdev, fmode_t mode,
 	case BLKCLOSEZONE:
 		bi_rw = REQ_CLOSE_ZONE;
 		break;
+	case BLKDISCARD:
+		bi_rw = REQ_DISCARD;
+		break;
 	default:
 		pr_err("%s: Unknown action: %u", __func__, cmd);
 		WARN_ON(1);
@@ -290,6 +315,9 @@ static int blk_ioctl_discard(struct block_device *bdev, fmode_t mode,
 	start = range[0];
 	len = range[1];
 
+	if (start & 3 && len == (1 << 29))
+		return blk_zoned_action_ioctl(bdev, mode, BLKDISCARD, start);
+
 	if (start & 511)
 		return -EINVAL;
 	if (len & 511)
diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index 3702a40..208cde9 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -53,6 +53,7 @@
 #include <linux/pm_runtime.h>
 #include <linux/pr.h>
 #include <linux/blkzoned_api.h>
+#include <linux/ata.h>
 #include <asm/uaccess.h>
 #include <asm/unaligned.h>
 
@@ -100,6 +101,16 @@ MODULE_ALIAS_SCSI_DEVICE(TYPE_RBC);
 #define SD_MINORS	0
 #endif
 
+static inline void _lba_to_cmd_ata(u8 *cmd, u64 _lba)
+{
+	cmd[1] =  _lba	      & 0xff;
+	cmd[3] = (_lba >>  8) & 0xff;
+	cmd[5] = (_lba >> 16) & 0xff;
+	cmd[0] = (_lba >> 24) & 0xff;
+	cmd[2] = (_lba >> 32) & 0xff;
+	cmd[4] = (_lba >> 40) & 0xff;
+}
+
 static void sd_config_discard(struct scsi_disk *, unsigned int);
 static void sd_config_write_same(struct scsi_disk *);
 static int  sd_revalidate_disk(struct gendisk *);
@@ -1200,11 +1211,26 @@ static int sd_setup_zoned_cmnd(struct scsi_cmnd *cmd)
 			goto out;
 		}
 
-		cmd->cmnd[0] = ZBC_REPORT_ZONES;
-		cmd->cmnd[1] = ZBC_REPORT_OPT;
-		put_unaligned_be64(sector, &cmd->cmnd[2]);
-		put_unaligned_be32(nr_bytes, &cmd->cmnd[10]);
-		cmd->cmnd[14] = 0;
+		if (rq->cmd_flags & REQ_PRIO) {
+			cmd->cmnd[0] = ATA_16;
+			cmd->cmnd[1] = (0x6 << 1) | 1;
+			cmd->cmnd[2] = 0x0e;
+			cmd->cmnd[3] = bio_get_streamid(bio);
+			cmd->cmnd[4] = ATA_SUBCMD_REP_ZONES;
+			cmd->cmnd[5] = ((nr_bytes / 512) >> 8) & 0xff;
+			cmd->cmnd[6] = (nr_bytes / 512) & 0xff;
+
+			_lba_to_cmd_ata(&cmd->cmnd[7], sector);
+
+			cmd->cmnd[13] = 1 << 6;
+			cmd->cmnd[14] = ATA_CMD_ZONE_MAN_IN;
+		} else {
+			cmd->cmnd[0] = ZBC_REPORT_ZONES;
+			cmd->cmnd[1] = ZBC_REPORT_OPT;
+			put_unaligned_be64(sector, &cmd->cmnd[2]);
+			put_unaligned_be32(nr_bytes, &cmd->cmnd[10]);
+			cmd->cmnd[14] = bio_get_streamid(bio);
+		}
 		cmd->sc_data_direction = DMA_FROM_DEVICE;
 		cmd->sdb.length = nr_bytes;
 		cmd->transfersize = sdp->sector_size;
@@ -1225,14 +1251,28 @@ static int sd_setup_zoned_cmnd(struct scsi_cmnd *cmd)
 		sector = 0;
 	}
 
-	cmd->cmnd[0] = ZBC_ACTION;
-	cmd->cmnd[1] = ZBC_SA_ZONE_OPEN;
-	if (rq->cmd_flags & REQ_CLOSE_ZONE)
-		cmd->cmnd[1] = ZBC_SA_ZONE_CLOSE;
-	if (rq->cmd_flags & REQ_DISCARD)
-		cmd->cmnd[1] = ZBC_SA_RESET_WP;
-	cmd->cmnd[14] = allbit;
-	put_unaligned_be64(sector, &cmd->cmnd[2]);
+	if (rq->cmd_flags & REQ_PRIO) {
+		cmd->cmnd[0] = ATA_16;
+		cmd->cmnd[1] = (3 << 1) | 1;
+		cmd->cmnd[3] = allbit;
+		cmd->cmnd[4] = ATA_SUBCMD_OPEN_ZONES;
+		if (rq->cmd_flags & REQ_CLOSE_ZONE)
+			cmd->cmnd[4] = ATA_SUBCMD_CLOSE_ZONES;
+		if (rq->cmd_flags & REQ_DISCARD)
+			cmd->cmnd[4] = ATA_SUBCMD_RESET_WP;
+		_lba_to_cmd_ata(&cmd->cmnd[7], sector);
+		cmd->cmnd[13] = 1 << 6;
+		cmd->cmnd[14] = ATA_CMD_ZONE_MAN_OUT;
+	} else {
+		cmd->cmnd[0] = ZBC_ACTION;
+		cmd->cmnd[1] = ZBC_SA_ZONE_OPEN;
+		if (rq->cmd_flags & REQ_CLOSE_ZONE)
+			cmd->cmnd[1] = ZBC_SA_ZONE_CLOSE;
+		if (rq->cmd_flags & REQ_DISCARD)
+			cmd->cmnd[1] = ZBC_SA_RESET_WP;
+		cmd->cmnd[14] = allbit;
+		put_unaligned_be64(sector, &cmd->cmnd[2]);
+	}
 	cmd->cmd_len = 16;
 	cmd->transfersize = 0;
 	cmd->underflow = 0;
@@ -1247,23 +1287,23 @@ static int sd_init_command(struct scsi_cmnd *cmd)
 {
 	struct request *rq = cmd->request;
 
+	if ((rq->cmd_flags & REQ_ZONED_FLAGS) ||
+	   ((rq->cmd_flags & REQ_PRIO) && (rq->cmd_flags & REQ_DISCARD)))
+		return sd_setup_zoned_cmnd(cmd);
 	if (rq->cmd_flags & REQ_DISCARD)
 		return sd_setup_discard_cmnd(cmd);
-	else if (rq->cmd_flags & REQ_WRITE_SAME)
+	if (rq->cmd_flags & REQ_WRITE_SAME)
 		return sd_setup_write_same_cmnd(cmd);
-	else if (rq->cmd_flags & REQ_FLUSH)
+	if (rq->cmd_flags & REQ_FLUSH)
 		return sd_setup_flush_cmnd(cmd);
-	else if (rq->cmd_flags & REQ_ZONED_FLAGS)
-		return sd_setup_zoned_cmnd(cmd);
-	else
-		return sd_setup_read_write_cmnd(cmd);
+	return sd_setup_read_write_cmnd(cmd);
 }
 
 static void sd_uninit_command(struct scsi_cmnd *SCpnt)
 {
 	struct request *rq = SCpnt->request;
 
-	if (rq->cmd_flags & REQ_DISCARD)
+	if ((rq->cmd_flags & REQ_DISCARD) && !(rq->cmd_flags & REQ_PRIO))
 		__free_page(rq->completion_data);
 
 	if (SCpnt->cmnd != rq->cmd) {
@@ -2830,7 +2870,7 @@ static void sd_read_block_characteristics(struct scsi_disk *sdkp)
 {
 	unsigned char *buffer;
 	u16 rot;
-	const int vpd_len = 64;
+	const int vpd_len = 512;
 
 	buffer = kmalloc(vpd_len, GFP_KERNEL);
 
@@ -2862,6 +2902,26 @@ static void sd_read_block_characteristics(struct scsi_disk *sdkp)
 		sdkp->lbprz = 1;
 		sdkp->max_unmap_blocks = SD_MAX_WS16_BLOCKS;
 		sd_config_discard(sdkp, SD_LBP_RESET_WP);
+	} else {
+		unsigned char cmd[16] = { 0 };
+
+		cmd[0] = ATA_16;
+		cmd[1] = (4 << 1) | 1;
+		cmd[2] = 0xe;
+		cmd[6] = 0x1;
+		cmd[8] = 0x1;
+		cmd[14] = ATA_CMD_ID_ATA;
+
+		if (scsi_execute_req(sdkp->device, cmd, DMA_FROM_DEVICE, buffer,
+				     vpd_len, NULL, 30 * HZ, 3, NULL))
+			goto out;
+
+		if (ata_drive_zac_ha((u16 *)buffer)) {
+			sdkp->device->zabc = 1;
+			sdkp->lbprz = 1;
+			sdkp->max_unmap_blocks = SD_MAX_WS16_BLOCKS;
+			sd_config_discard(sdkp, SD_LBP_RESET_WP);
+		}
 	}
 
  out:
-- 
2.7.0

