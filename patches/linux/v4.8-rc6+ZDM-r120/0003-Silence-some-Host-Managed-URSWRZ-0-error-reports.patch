From 6e0c97e609ddf5babb1c639eb11fbbc7a3a8ce42 Mon Sep 17 00:00:00 2001
From: Shaun Tancheff <shaun@tancheff.com>
Date: Tue, 13 Sep 2016 16:29:43 -0500
Subject: [PATCH 3/7] Silence some Host Managed URSWRZ=0 error reports.

Host Mangaged devices may enable restricted reads [URSWRZ=0].

During early device probe (blkid/udev/etc) such reads cause the
read errors to be reported in dmesg / syslog and provides a rather
poor indication of device failure when the device is working
as intended.

This patch suppresses these errors and returns the data unmodified
allowing such probes operate as normal.

Signed-off-by: Shaun Tancheff <shaun.tancheff@seagate.com>
---
 drivers/scsi/scsi_lib.c    | 9 +++++++++
 drivers/scsi/sd.c          | 6 ++++++
 include/scsi/scsi_common.h | 8 ++++++++
 3 files changed, 23 insertions(+)

diff --git a/drivers/scsi/scsi_lib.c b/drivers/scsi/scsi_lib.c
index c71344a..c4261a4 100644
--- a/drivers/scsi/scsi_lib.c
+++ b/drivers/scsi/scsi_lib.c
@@ -745,6 +745,15 @@ void scsi_io_completion(struct scsi_cmnd *cmd, unsigned int good_bytes)
 			sense_deferred = scsi_sense_is_deferred(&sshdr);
 	}
 
+	if (req_op(req) == REQ_OP_READ &&
+	    sense_valid && !sense_deferred &&
+	    sshdr.sense_key == ILLEGAL_REQUEST &&
+	    cmd->device->urswrz == 0 &&
+	    is_read_past_wp(&sshdr)) {
+		cmd->result = result = 0;
+		return;
+	}
+
 	if (req->cmd_type == REQ_TYPE_BLOCK_PC) { /* SG_IO ioctl from block level */
 		if (result) {
 			if (sense_valid && req->sense) {
diff --git a/drivers/scsi/sd.c b/drivers/scsi/sd.c
index 08adc10..95be504 100644
--- a/drivers/scsi/sd.c
+++ b/drivers/scsi/sd.c
@@ -1855,6 +1855,12 @@ static int sd_done(struct scsi_cmnd *SCpnt)
 				}
 			}
 		}
+		/* ATTEMPT TO READ INVALID DATA */
+		if (is_read_past_wp(&sshdr)) {
+			good_bytes = blk_rq_bytes(req);
+			scsi_set_resid(SCpnt, 0);
+			sd_printk(KERN_NOTICE, sdkp, "Read past WP\n");
+		}
 		break;
 	default:
 		break;
diff --git a/include/scsi/scsi_common.h b/include/scsi/scsi_common.h
index 20bf7ea..2f9dd53 100644
--- a/include/scsi/scsi_common.h
+++ b/include/scsi/scsi_common.h
@@ -58,6 +58,14 @@ static inline bool scsi_sense_valid(const struct scsi_sense_hdr *sshdr)
 	return (sshdr->response_code & 0x70) == 0x70;
 }
 
+static inline bool is_read_past_wp(struct scsi_sense_hdr *sshdr)
+{
+	/* attempt to read invalid data */
+	if (sshdr->asc == 0x21 && sshdr->ascq == 0x06)
+		return true;
+	return false;
+}
+
 extern bool scsi_normalize_sense(const u8 *sense_buffer, int sb_len,
 				 struct scsi_sense_hdr *sshdr);
 
-- 
2.9.3

